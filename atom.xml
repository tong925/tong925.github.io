<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沦陷</title>
  
  <subtitle>沦陷 .</subtitle>
  <link href="https://tsblog.cn/atom.xml" rel="self"/>
  
  <link href="https://tsblog.cn/"/>
  <updated>2022-03-12T16:02:21.592Z</updated>
  <id>https://tsblog.cn/</id>
  
  <author>
    <name>佟帅</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tsblog.cn/2022/03/05/hello-world/"/>
    <id>https://tsblog.cn/2022/03/05/hello-world/</id>
    <published>2022-03-04T16:13:47.989Z</published>
    <updated>2022-03-12T16:02:21.592Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tt</title>
    <link href="https://tsblog.cn/pages/f77974/"/>
    <id>https://tsblog.cn/pages/f77974/</id>
    <published>2021-03-10T03:27:22.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    
  </entry>
  
  <entry>
    <title>00.作业</title>
    <link href="https://tsblog.cn/pages/edf3d4/"/>
    <id>https://tsblog.cn/pages/edf3d4/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作业"><a href="#1-作业" class="headerlink" title="1.作业"></a>1.作业</h1><ul><li>cookie与session的原理及区别</li><li>session与JWT比较</li><li>JWT原理</li><li>JWT安装与配置<ul><li>1.登录接口</li><li>2.刷新接口</li><li>3.自定义返回格式</li></ul></li><li>完成注册接口</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-作业&quot;&gt;&lt;a href=&quot;#1-作业&quot; class=&quot;headerlink&quot; title=&quot;1.作业&quot;&gt;&lt;/a&gt;1.作业&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;cookie与session的原理及区别&lt;/li&gt;
&lt;li&gt;session与JWT比较&lt;/li&gt;
&lt;li&gt;JWT</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day02" scheme="https://tsblog.cn/categories/python/SYL/day02/"/>
    
    
  </entry>
  
  <entry>
    <title>01.初始化项目结构__回顾</title>
    <link href="https://tsblog.cn/pages/07aec8/"/>
    <id>https://tsblog.cn/pages/07aec8/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-初始化项目结构"><a href="#1-初始化项目结构" class="headerlink" title="1.初始化项目结构"></a>1.初始化项目结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">└─shiyanlou_project</span><br><span class="line">    │  .gitignore</span><br><span class="line">    │  README.en.md</span><br><span class="line">    │  README.md</span><br><span class="line">    │</span><br><span class="line">    ├─celery_task            <span class="comment"># 用来存放celery相关文件</span></span><br><span class="line">    │      __init__.py</span><br><span class="line">    │</span><br><span class="line">    ├─db                     <span class="comment"># 数据库相关：1.数据库初始化sql脚本； 2.数据库维护脚本，清理，备份脚本</span></span><br><span class="line">    ├─logs                   <span class="comment"># 存放日志</span></span><br><span class="line">    ├─packages               <span class="comment"># 外部包，原始的，未配置的：1.七牛云sdk；2.阿里云短信；</span></span><br><span class="line">    ├─scrips                 <span class="comment"># 脚本目录：1.定时任务脚本；2.页面静态化脚本；处理项目脚本</span></span><br><span class="line">    └─uwsgi_conf             <span class="comment"># uwsgi配置，日志，pid</span></span><br><span class="line">    │</span><br><span class="line">    │</span><br><span class="line">    └─syl</span><br><span class="line">        │  apps （python包）                   <span class="comment"># Django各种app模块 </span></span><br><span class="line">        │  libs （python包）                   <span class="comment"># 七牛云sdk+配置</span></span><br><span class="line">        │  utils （python包）                  <span class="comment"># 小工具，常用函数</span></span><br><span class="line">        │  static                 </span><br><span class="line">        │  templates</span><br><span class="line">        │  syl（项目配置）</span><br><span class="line">        │  manager.py</span><br></pre></td></tr></table></figure><h1 id="2-创建Django项目"><a href="#2-创建Django项目" class="headerlink" title="2.创建Django项目"></a>2.创建Django项目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@dev:shiyanlou_project<span class="comment"># workon syl</span></span><br><span class="line">(syl) root@dev:shiyanlou_project<span class="comment"># cd /aaa/shiyanlou_project/</span></span><br><span class="line">(syl) root@dev:shiyanlou_project<span class="comment"># django-admin startproject syl</span></span><br><span class="line"><span class="comment"># 注：创建三个python包， apps、utils、libs</span></span><br></pre></td></tr></table></figure><h1 id="3-创建user模型"><a href="#3-创建user模型" class="headerlink" title="3.创建user模型"></a>3.创建user模型</h1><h3 id="3-1-创建用户模型user"><a href="#3-1-创建用户模型user" class="headerlink" title="3.1 创建用户模型user"></a>3.1 创建用户模型user</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ../manage.py startapp user  <span class="comment"># 创建user模型</span></span><br></pre></td></tr></table></figure><h3 id="3-2-在setting-py中注册user模型（第一步）"><a href="#3-2-在setting-py中注册user模型（第一步）" class="headerlink" title="3.2 在setting.py中注册user模型（第一步）"></a>3.2 在setting.py中注册user模型（第一步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;user.apps.UserConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 注：pycharm无法联想，需要把apps文件夹设置为源根</span></span><br></pre></td></tr></table></figure><h3 id="3-3-syl-x2F-urls-py添加路由（第二步）"><a href="#3-3-syl-x2F-urls-py添加路由（第二步）" class="headerlink" title="3.3 syl&#x2F;urls.py添加路由（第二步）"></a>3.3 syl&#x2F;urls.py添加路由（第二步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;user/&#x27;</span>, include(<span class="string">&#x27;user.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-4-syl-x2F-settings-py中添加apps路径"><a href="#3-4-syl-x2F-settings-py中添加apps路径" class="headerlink" title="3.4 syl&#x2F;settings.py中添加apps路径"></a>3.4 syl&#x2F;settings.py中添加apps路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把apps目录插入，到系统包搜索路径第一个位置中</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR,<span class="string">&#x27;apps&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-5-创建-user-x2F-urls-py路由文件（第三步）"><a href="#3-5-创建-user-x2F-urls-py路由文件（第三步）" class="headerlink" title="3.5 创建 user&#x2F;urls.py路由文件（第三步）"></a>3.5 创建 user&#x2F;urls.py路由文件（第三步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="4-重写Django默认认证用户模型"><a href="#4-重写Django默认认证用户模型" class="headerlink" title="4.重写Django默认认证用户模型"></a>4.重写Django默认认证用户模型</h1><h3 id="4-1-user-x2F-models-py创建模型"><a href="#4-1-user-x2F-models-py创建模型" class="headerlink" title="4.1 user&#x2F;models.py创建模型"></a>4.1 user&#x2F;models.py创建模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.CharField(<span class="string">&#x27;手机号&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;user&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">    nick_name = models.CharField(<span class="string">&#x27;昵称&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;地址&#x27;</span>,max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_user&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-syl-x2F-settings-py中注册自己的用户模型类"><a href="#4-2-syl-x2F-settings-py中注册自己的用户模型类" class="headerlink" title="4.2 syl&#x2F;settings.py中注册自己的用户模型类"></a>4.2 syl&#x2F;settings.py中注册自己的用户模型类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册自己的用户模型类: 应用名.模型名</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;user.User&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-配置mysql"><a href="#4-3-配置mysql" class="headerlink" title="4.3 配置mysql"></a>4.3 配置mysql</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1.创建mysql数据库&#x27;&#x27;&#x27;</span></span><br><span class="line">mysql&gt; create database syldb charset utf8;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.在syl/settings.py中配置mysql&#x27;&#x27;&#x27;</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;syldb&#x27;</span>,              <span class="comment"># 指定数据库名称：MyCRM</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4生成表"><a href="#4-4生成表" class="headerlink" title="4.4生成表"></a>4.4生成表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manager.py makemigrations</span><br><span class="line">python manager.py migrate</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-初始化项目结构&quot;&gt;&lt;a href=&quot;#1-初始化项目结构&quot; class=&quot;headerlink&quot; title=&quot;1.初始化项目结构&quot;&gt;&lt;/a&gt;1.初始化项目结构&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day02" scheme="https://tsblog.cn/categories/python/SYL/day02/"/>
    
    
  </entry>
  
  <entry>
    <title>02.ModelViewSet+ModelSerializer使用__回顾</title>
    <link href="https://tsblog.cn/pages/67c076/"/>
    <id>https://tsblog.cn/pages/67c076/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-DRF初始化"><a href="#1-DRF初始化" class="headerlink" title="1.DRF初始化"></a>1.DRF初始化</h1><h3 id="1-1-安装DjangoRestFramework"><a href="#1-1-安装DjangoRestFramework" class="headerlink" title="1.1 安装DjangoRestFramework"></a>1.1 安装DjangoRestFramework</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework==<span class="number">3.11</span><span class="number">.1</span></span><br><span class="line">pip install django-<span class="built_in">filter</span>==<span class="number">2.3</span><span class="number">.0</span>             <span class="comment"># 过滤器</span></span><br><span class="line">pip install markdown                         <span class="comment"># Markdown support for the browsable API.</span></span><br></pre></td></tr></table></figure><h3 id="1-2-在syl-x2F-settings-py中注册"><a href="#1-2-在syl-x2F-settings-py中注册" class="headerlink" title="1.2 在syl&#x2F;settings.py中注册"></a>1.2 在syl&#x2F;settings.py中注册</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django_filters&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-3-syl-x2F-settings-py配置DRF"><a href="#1-3-syl-x2F-settings-py配置DRF" class="headerlink" title="1.3 syl&#x2F;settings.py配置DRF"></a>1.3 syl&#x2F;settings.py配置DRF</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤器</span></span><br><span class="line"><span class="comment"># 1,安装 django-filter</span></span><br><span class="line"><span class="comment"># 2,注册应用</span></span><br><span class="line"><span class="comment"># 3,配置settings, 在view里配置可过滤的字段</span></span><br><span class="line"><span class="comment"># 4,使用 查询字符串携带过滤信息</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 文档报错： AttributeError: ‘AutoSchema’ object has no attribute ‘get_link’</span></span><br><span class="line">    <span class="comment"># 用下面的设置可以解决</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,</span><br><span class="line">    <span class="comment"># 默认设置是:</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_SCHEMA_CLASS&#x27;: &#x27;rest_framework.schemas.openapi.AutoSchema&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 异常处理器</span></span><br><span class="line">    <span class="comment"># &#x27;EXCEPTION_HANDLER&#x27;: &#x27;user.utils.exception_handler&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Base API policies</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.FormParser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.MultiPartParser&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 1.认证器</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,  <span class="comment"># 使用session时的认证器</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>     <span class="comment"># 提交表单时的认证器</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">#2.权限配置（全局）： 顺序靠上的严格</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAdminUser&#x27;,  # 管理员可以访问</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAuthenticated&#x27;,  # 认证用户可以访问</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAuthenticatedOrReadOnly&#x27;,  # 认证用户可以访问, 否则只能读取</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.AllowAny&#x27;,  # 所有用户都可以访问</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">#3.限流</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">#3.1限流策略</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;100/hour&#x27;</span>,    <span class="comment"># 认证用户每小时10次</span></span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;3/day&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;DEFAULT_CONTENT_NEGOTIATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.negotiation.DefaultContentNegotiation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_METADATA_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.metadata.SimpleMetadata&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSIONING_CLASS&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">#4.分页（全局）：全局分页器, 例如 省市区的数据自定义分页器, 不需要分页</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="comment"># 每页返回数量</span></span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">10</span>,  <span class="comment"># 默认 None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#5.过滤器后端</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;django_filters.rest_framework.backends.DjangoFilterBackend&#x27;, 包路径有变化</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">#5.1过滤排序（全局）：Filtering 过滤排序</span></span><br><span class="line">    <span class="string">&#x27;SEARCH_PARAM&#x27;</span>: <span class="string">&#x27;search&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ORDERING_PARAM&#x27;</span>: <span class="string">&#x27;ordering&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;NUM_PROXIES&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">#6.版本控制：Versioning  接口版本控制</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSION&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;ALLOWED_VERSIONS&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;VERSION_PARAM&#x27;</span>: <span class="string">&#x27;version&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Authentication  认证</span></span><br><span class="line">    <span class="comment"># 未认证用户使用的用户类型</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_USER&#x27;</span>: <span class="string">&#x27;django.contrib.auth.models.AnonymousUser&#x27;</span>,</span><br><span class="line">    <span class="comment"># 未认证用户使用的Token值</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># View configuration</span></span><br><span class="line">    <span class="string">&#x27;VIEW_NAME_FUNCTION&#x27;</span>: <span class="string">&#x27;rest_framework.views.get_view_name&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;VIEW_DESCRIPTION_FUNCTION&#x27;</span>: <span class="string">&#x27;rest_framework.views.get_view_description&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;NON_FIELD_ERRORS_KEY&#x27;</span>: <span class="string">&#x27;non_field_errors&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Testing</span></span><br><span class="line">    <span class="string">&#x27;TEST_REQUEST_RENDERER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.MultiPartRenderer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;TEST_REQUEST_DEFAULT_FORMAT&#x27;</span>: <span class="string">&#x27;multipart&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Hyperlink settings</span></span><br><span class="line">    <span class="string">&#x27;URL_FORMAT_OVERRIDE&#x27;</span>: <span class="string">&#x27;format&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;FORMAT_SUFFIX_KWARG&#x27;</span>: <span class="string">&#x27;format&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;URL_FIELD_NAME&#x27;</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Encoding</span></span><br><span class="line">    <span class="string">&#x27;UNICODE_JSON&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;COMPACT_JSON&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;STRICT_JSON&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;COERCE_DECIMAL_TO_STRING&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;UPLOADED_FILES_USE_URL&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Browseable API</span></span><br><span class="line">    <span class="string">&#x27;HTML_SELECT_CUTOFF&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">&#x27;HTML_SELECT_CUTOFF_TEXT&#x27;</span>: <span class="string">&quot;More than &#123;count&#125; items...&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Schemas</span></span><br><span class="line">    <span class="string">&#x27;SCHEMA_COERCE_PATH_PK&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;SCHEMA_COERCE_METHOD_NAMES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;retrieve&#x27;</span>: <span class="string">&#x27;read&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;destroy&#x27;</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-创建user-x2F-serializers-py写序列化器"><a href="#1-4-创建user-x2F-serializers-py写序列化器" class="headerlink" title="1.4 创建user&#x2F;serializers.py写序列化器"></a>1.4 创建user&#x2F;serializers.py写序列化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">address_validate</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 独立校验器</span></span><br><span class="line">    <span class="comment"># raise serializers.ValidationError(&#x27;请填写实际地址&#x27;)  # 有错就抛出异常</span></span><br><span class="line">    <span class="comment"># 没错就返回数据</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 1.独立校验器：重新设定字段, 替换掉模型中的设定, 重新设定地址的长度为5</span></span><br><span class="line">    address = serializers.CharField(max_length=<span class="number">255</span>, min_length=<span class="number">5</span>, validators=[address_validate])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.单一字段验证, 验证地址</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_address</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&#x27;测试&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;请填写实际地址&#x27;</span>)  <span class="comment"># 有错就抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> data  <span class="comment"># 没错就返回结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_phone</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># 不符合手机号格式</span></span><br><span class="line">        <span class="comment"># raise serializers.ValidationError(&#x27;手机号格式不正确&#x27;)</span></span><br><span class="line">        model = self.root.Meta.model</span><br><span class="line">        num = model.objects.<span class="built_in">filter</span>(phone=data).count()</span><br><span class="line">        <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;手机号已存在&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.所有属性验证器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="comment"># 所有属性验证器</span></span><br><span class="line">        <span class="comment"># self.context 中有request和view上下文</span></span><br><span class="line">        <span class="comment"># self.context[&#x27;view&#x27;].action 可以取到动作</span></span><br><span class="line">        <span class="comment"># attrs 是需要序列化的数据</span></span><br><span class="line">        <span class="comment"># raise serializers.ValidationError(&#x27;xxx错误&#x27;)  # 有问题报错</span></span><br><span class="line">        <span class="keyword">return</span> attrs  <span class="comment"># 没问题返回数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        <span class="comment"># fields = (&#x27;id&#x27;, ) # 临时添加字段也需要写在这里</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># 所有字段</span></span><br><span class="line">        <span class="comment"># exclude = [&#x27;id&#x27;]  # 排除 id 字段</span></span><br><span class="line">        read_only_fields = (<span class="string">&#x27;&#x27;</span>,)  <span class="comment"># 指定字段为 read_only,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 扩展address： extra_kwargs = &#123;&#125;  # 局部替换某些字段的设定, 或者新增设定</span></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;min_length&quot;</span>: <span class="number">5</span>,  <span class="comment"># 给地址增加 最小长度限制</span></span><br><span class="line">                <span class="string">&quot;default&quot;</span>: <span class="string">&#x27;默认测试地址&#x27;</span>,  <span class="comment"># 增加默认值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserUnActiveSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;is_active&#x27;</span>)  <span class="comment"># 临时添加字段也需要写在这里</span></span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;  # 所有字段</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-DRF-认证、权限、限流、分页、过滤、序列化"><a href="#2-DRF-认证、权限、限流、分页、过滤、序列化" class="headerlink" title="2. DRF 认证、权限、限流、分页、过滤、序列化"></a>2. DRF 认证、权限、限流、分页、过滤、序列化</h1><h3 id="2-1-user-x2F-urls-py"><a href="#2-1-user-x2F-urls-py" class="headerlink" title="2.1 user&#x2F;urls.py"></a>2.1 user&#x2F;urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter, DefaultRouter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动生成路由方法, 必须使用视图集</span></span><br><span class="line"><span class="comment"># router = SimpleRouter()  # 没有根路由  /user/ 无法识别</span></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 有根路由</span></span><br><span class="line">router.register(<span class="string">r&#x27;user&#x27;</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>))  <span class="comment"># 认证地址</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 模块地址</span></span><br></pre></td></tr></table></figure><h3 id="2-2-user-x2F-views-py"><a href="#2-2-user-x2F-views-py" class="headerlink" title="2.2 user&#x2F;views.py"></a>2.2 user&#x2F;views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BasicAuthentication, SessionAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny, IsAdminUser, IsAuthenticated, IsAuthenticatedOrReadOnly</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission, SAFE_METHODS</span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> user.serializers <span class="keyword">import</span> UserSerializer, UserUnActiveSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 需要认证才能访问的视图</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页（局部）：自定义分页器 局部</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageNum</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 查询字符串中代表每页返回数据数量的参数名, 默认值: None</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span></span><br><span class="line">    <span class="comment"># 查询字符串中代表页码的参数名, 有默认值: page</span></span><br><span class="line">    <span class="comment"># page_query_param = &#x27;page&#x27;</span></span><br><span class="line">    <span class="comment"># 一页中最多的结果条数</span></span><br><span class="line">    max_page_size = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义权限（局部）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPermission</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="built_in">print</span>(view.kwargs.get(<span class="string">&quot;pk&quot;</span>), request.user.<span class="built_in">id</span>)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断用户对模型有没有访问权&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 任何用户对使用此权限类的视图都有访问权限</span></span><br><span class="line">        <span class="built_in">print</span>(request)</span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="comment"># 管理员对用户模型有访问权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> view.kwargs.get(<span class="string">&#x27;pk&#x27;</span>) == <span class="built_in">str</span>(request.user.<span class="built_in">id</span>):</span><br><span class="line">            <span class="comment"># 携带的id和用户的id相同时有访问权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取单个数据时,判断用户对某个数据对象是否有访问权限&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> request.user.<span class="built_in">id</span> == obj.<span class="built_in">id</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    完成产品的增删改查</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer  <span class="comment"># 优先使用 get_serializer_class 返回的序列化器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 1.认证：自定义认证类, 自定义会覆盖全局配置</span></span><br><span class="line">    <span class="comment"># authentication_classes = (BasicAuthentication, SessionAuthentication)</span></span><br><span class="line">    <span class="comment"># # 2.权限：自定义权限类</span></span><br><span class="line">    <span class="comment"># permission_classes = (MyPermission,)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.分页：自定义分页器 覆盖全局配置</span></span><br><span class="line">    pagination_class = PageNum</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.限流：自定义限流类</span></span><br><span class="line">    throttle_classes = [UserRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.过滤：指定过滤方法类, 排序方法类, 一个或多个</span></span><br><span class="line">    filter_backends = (DjangoFilterBackend, OrderingFilter)  <span class="comment"># 同时支持过滤和排序</span></span><br><span class="line">    <span class="comment"># 5.1指定排序字段, 不设置, 排序功能不起效</span></span><br><span class="line">    ordering_fields = (<span class="string">&#x27;date_joined&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)              <span class="comment"># ?ordering=-id</span></span><br><span class="line">    <span class="comment"># 5.2指定过滤字段, 不设置, 过滤功能不起效</span></span><br><span class="line">    filter_fields = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;is_active&#x27;</span>)   <span class="comment"># ?username=tom&amp;phone=&amp;is_active=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据不同的请求, 获得不同的序列化器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">&#x27;unactived&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserUnActiveSerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unactived</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取查询集, 过滤出未激活的用户</span></span><br><span class="line">        qs = self.queryset.<span class="built_in">filter</span>(is_active=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 使用序列化器, 序列化查询集, 并且是</span></span><br><span class="line">        ser = self.get_serializer(qs, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure><h1 id="3-测试接口"><a href="#3-测试接口" class="headerlink" title="3.测试接口"></a>3.测试接口</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查询所有用户</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/</span><br><span class="line"><span class="comment">#2.查询id=1的用户</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/<span class="number">1</span>/</span><br><span class="line"><span class="comment">#3.查询 用户名（tom），激活的用户</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/?username=tom&amp;phone=&amp;is_active=true</span><br><span class="line"><span class="comment">#4.查询所有用户 用id 反向排序</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/?ordering=-<span class="built_in">id</span></span><br><span class="line"><span class="comment">#5.查询用户表中第一页，每页显示一条数据</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/?page=<span class="number">1</span>&amp;page_size=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200920220030900.png" style="width: 600px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;count&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;next&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/user/user/?is_active=&amp;page=3&amp;page_size=1&amp;page_size=1&amp;phone=&amp;username=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;previous&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/user/user/?is_active=&amp;page_size=1&amp;page_size=1&amp;phone=&amp;username=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;results&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: <span class="string">&quot;河南郑州市&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;chn@1099&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_login&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;is_superuser&quot;</span>: false,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            <span class="string">&quot;first_name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;is_staff&quot;</span>: false,</span><br><span class="line">            <span class="string">&quot;is_active&quot;</span>: true,</span><br><span class="line">            <span class="string">&quot;date_joined&quot;</span>: <span class="string">&quot;2020-09-20T13:41:58.528732Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;18538752511&quot;</span>,</span><br><span class="line">            <span class="string">&quot;img&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;nick_name&quot;</span>: <span class="string">&quot;吊炸天&quot;</span>,</span><br><span class="line">            <span class="string">&quot;groups&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;user_permissions&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-DRF初始化&quot;&gt;&lt;a href=&quot;#1-DRF初始化&quot; class=&quot;headerlink&quot; title=&quot;1.DRF初始化&quot;&gt;&lt;/a&gt;1.DRF初始化&lt;/h1&gt;&lt;h3 id=&quot;1-1-安装DjangoRestFramework&quot;&gt;&lt;a href=&quot;#1-1-</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day02" scheme="https://tsblog.cn/categories/python/SYL/day02/"/>
    
    
  </entry>
  
  <entry>
    <title>03.JWT原理</title>
    <link href="https://tsblog.cn/pages/1d30c0/"/>
    <id>https://tsblog.cn/pages/1d30c0/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-COOKIE使用和优缺点"><a href="#1-COOKIE使用和优缺点" class="headerlink" title="1.COOKIE使用和优缺点"></a>1.COOKIE使用和优缺点</h1><p><a href="https://www.cnblogs.com/xiaonq/p/11094480.html">https://www.cnblogs.com/xiaonq/p/11094480.html</a></p><h3 id="1-1-cookie原理：用户名-密码"><a href="#1-1-cookie原理：用户名-密码" class="headerlink" title="1.1 cookie原理：用户名+密码"></a>1.1 cookie原理：<code>用户名+密码</code></h3><ul><li>cookie是保存在用户浏览器端，用户名和密码等明文信息</li></ul><p><img src="././assets/image-20201005135948317.png" style="width: 500px; margin-left: 50px;"> </img></p><h3 id="1-2-session使用原理"><a href="#1-2-session使用原理" class="headerlink" title="1.2 session使用原理"></a>1.2 session使用原理</h3><ul><li><code>session是存储在服务器端的一段字符串,相当于字典的key</code></li></ul><p><img src="./assets/image-20201005141004241.png" style="width: 700px; margin-left: 50px;"> </img></p><ul><li>1.用户向服务器发送用户名和密码。</li><li>2.验证服务器后，相关数据（如用户角色，登录时间等）将保存在当前会话中。</li><li>3.服务器向用户返回session_id，session信息都会写入到用户的Cookie。</li><li>4.用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。</li><li>5.服务器收到session_id并对比之前保存的数据，确认用户的身份。</li></ul><p><img src="./assets/image-20201005134822521.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="1-3-session使用缺点"><a href="#1-3-session使用缺点" class="headerlink" title="1.3 session使用缺点"></a>1.3 session使用缺点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU</span><br><span class="line">主板</span><br><span class="line">显卡</span><br><span class="line">内存条（把硬盘中的程序读取到内存中，就变成了进程）</span><br><span class="line">硬盘（1T， 500G）（可运行的代码存储在硬盘中，就是程序）</span><br><span class="line">IO操作（把硬盘中或者网络中的数据读取到内存中就是IO操作）</span><br></pre></td></tr></table></figure><ul><li><code>session默认存储在登录的那台服务器的内存中。</code></li><li>1.这种模式最大的问题是，没有分布式架构，无法支持横向扩展。</li><li>2.如果使用一个服务器，该模式完全没有问题。</li><li>3.但是，如果它是服务器群集或面向服务的跨域体系结构的话，则需要一个统一的session数据库库来保存会话数据实现共享，</li><li>4.这样负载均衡下的每个服务器才可以正确的验证用户身份。</li></ul><h3 id="1-4-常用解决session方法"><a href="#1-4-常用解决session方法" class="headerlink" title="1.4 常用解决session方法"></a>1.4 常用解决session方法</h3><ul><li>1.一种解决方案是通过持久化session数据，写入数据库或文件持久层等。</li><li>2.收到请求后，验证服务从持久层请求数据。</li><li>3.依赖于持久层的数据库或者问题系统，会有单点风险，如果持久层失败，整个认证体系都会挂掉。</li></ul><p><img src="./assets/image-20201005135211140.png" style="width: 600px; margin-left: 50px;"> </img></p><ul><li>第一种：没有session持久化<ul><li>没有分布式架构，无法支持横向扩展</li><li>session默认存储在内存中，如果把代码部署在多台机器上，session保存到了其中某一台机器的内存中</li><li>用户如果在A机器上登录，只有A机器的内存中存了这个session的key，如果请求nginx路由到B机器，B机器内存中没有这个session数据，就需要从新登录</li></ul></li><li>第二种：写入数据库或文件持久层（<code>session+redis</code>）<ul><li>解决了横向扩展问题</li><li>数据库持久层出现问题，所有集群都没办法登录，<code>单点故障</code></li><li>如果数据放到mysql中，用户量过大，查询很慢，效率很低</li></ul></li></ul><h1 id="2-JWT介绍"><a href="#2-JWT介绍" class="headerlink" title="2. JWT介绍"></a>2. JWT介绍</h1><h3 id="2-1-jwt原理"><a href="#2-1-jwt原理" class="headerlink" title="2.1 jwt原理"></a>2.1 jwt原理</h3><ul><li>最简单理解：jwt本质就是，<code>把用户信息通过加密后生成的一个字符串</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;UserName&quot;</span>: <span class="string">&quot;Chongchong&quot;</span>,</span><br><span class="line"><span class="string">&quot;Role&quot;</span>: <span class="string">&quot;Admin&quot;</span>,</span><br><span class="line"><span class="string">&quot;Expire&quot;</span>: <span class="string">&quot;2018-08-08 20:15:56&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">之后，当用户与服务器通信时，客户在请求中发回JSON对象，服务器仅依赖于这个JSON对象来标识用户。</span><br><span class="line">为了防止用户篡改数据，服务器将在生成对象时添加签名（有关详细信息，请参阅下文）。</span><br><span class="line">服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展</span><br></pre></td></tr></table></figure><h3 id="2-2-JWT的数据结构"><a href="#2-2-JWT的数据结构" class="headerlink" title="2.2 JWT的数据结构"></a>2.2 JWT的数据结构</h3><ul><li>1）jwt头：JWT头部分是一个描述JWT元数据的JSON对象</li><li>2）有效载荷：七个默认字段+自定义私有字段（用户信息）</li><li>3）签名&#x3D;HMACSHA256(<code>base64UrlEncode(header)</code> + “.” + <code>base64UrlEncode(payload)</code>,secret)</li></ul><p><img src="./assets/image-20201005145547397.png" style="width: 600px; margin-left: 50px;"> </img></p><blockquote><p>第一部分：<code>JWT头</code></p></blockquote><ul><li><code>base64UrlEncode(header)</code>—&gt;字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line"><span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 1）alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；</span></span><br><span class="line"><span class="comment"># 2）typ属性表示令牌的类型，JWT令牌统一写为JWT。</span></span><br><span class="line"><span class="comment"># 3）最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</span></span><br></pre></td></tr></table></figure><blockquote><p>第二部分：<code>有效载荷</code>   没有敏感数据的用户信息</p></blockquote><ul><li><code>base64UrlEncode(payload)</code>—&gt;字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">iss：发行人</span></span><br><span class="line"><span class="string">exp：到期时间</span></span><br><span class="line"><span class="string">sub：主题</span></span><br><span class="line"><span class="string">aud：用户</span></span><br><span class="line"><span class="string">nbf：在此之前不可用</span></span><br><span class="line"><span class="string">iat：发布时间</span></span><br><span class="line"><span class="string">jti：JWT ID用于标识该JWT</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、除以上默认字段外，我们还可以自定义私有字段，如下例：</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;chongchong&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>: true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、注意</span></span><br><span class="line">默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</span><br><span class="line">JSON对象也使用Base64 URL算法转换为字符串保存。</span><br></pre></td></tr></table></figure><blockquote><p>第三部分：<code>签名哈希</code></p></blockquote><ul><li>签名&#x3D;HMACSHA256(<code>base64UrlEncode(header)</code> + “.” + <code>base64UrlEncode(payload)</code>,secret)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</span></span><br><span class="line"><span class="comment"># 2.首先，需要指定一个密码（secret），该密码仅仅为保存在服务器中，并且不能向用户公开。</span></span><br><span class="line"><span class="comment"># 3.然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。</span></span><br><span class="line"><span class="comment"># 4.HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret)</span></span><br><span class="line"><span class="comment"># 5.在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用&quot;.&quot;分隔，就构成整个JWT对象。</span></span><br></pre></td></tr></table></figure><h3 id="2-3-jwt核心"><a href="#2-3-jwt核心" class="headerlink" title="2.3 jwt核心"></a>2.3 jwt核心</h3><ul><li>1）给用户颁发的token值相当于一把锁，服务器端的秘钥相当于一把钥匙</li><li>2）每次客户端请求都会携带这把锁，服务器端用秘钥去开这把锁，若果无法打开就证明是伪造的</li></ul><h3 id="2-4-jwt特点分析"><a href="#2-4-jwt特点分析" class="headerlink" title="2.4 jwt特点分析"></a>2.4 jwt特点分析</h3><ul><li>1、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限，一旦JWT签发，在有效期内将会一直有效。</li><li>2、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。</li><li>3、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</li><li>4、JWT不仅可用于认证，还可用于信息交换，善用JWT有助于减少服务器请求数据库的次数。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-COOKIE使用和优缺点&quot;&gt;&lt;a href=&quot;#1-COOKIE使用和优缺点&quot; class=&quot;headerlink&quot; title=&quot;1.COOKIE使用和优缺点&quot;&gt;&lt;/a&gt;1.COOKIE使用和优缺点&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.c</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day02" scheme="https://tsblog.cn/categories/python/SYL/day02/"/>
    
    
  </entry>
  
  <entry>
    <title>04.JWT安装配置</title>
    <link href="https://tsblog.cn/pages/a71095/"/>
    <id>https://tsblog.cn/pages/a71095/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.登录接口</span><br><span class="line">2.刷新接口</span><br><span class="line">3.自定义返回格式</span><br></pre></td></tr></table></figure><ul><li>可用地方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;第一：提供三个视图函数&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># obtain_jwt_token = ObtainJSONWebToken.as_view()      # 获取token</span></span><br><span class="line"><span class="comment"># refresh_jwt_token = RefreshJSONWebToken.as_view()    # 刷新token</span></span><br><span class="line"><span class="comment"># verify_jwt_token = VerifyJSONWebToken.as_view()      # 修改token</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;第二：jwt_response_payload_handler可以重写返回&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="1-JWT安装配置"><a href="#1-JWT安装配置" class="headerlink" title="1.JWT安装配置"></a>1.JWT安装配置</h1><h3 id="1-1-安装JWT"><a href="#1-1-安装JWT" class="headerlink" title="1.1 安装JWT"></a>1.1 安装JWT</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt==1.11.0</span><br></pre></td></tr></table></figure><h3 id="1-2-syl-settings-py配置jwt载荷中的有效期设置"><a href="#1-2-syl-settings-py配置jwt载荷中的有效期设置" class="headerlink" title="1.2 syl/settings.py配置jwt载荷中的有效期设置"></a>1.2 <code>syl/settings.py</code>配置jwt载荷中的有效期设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># jwt载荷中的有效期设置</span></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="comment"># 1.token前缀：headers中 Authorization 值的前缀</span></span><br><span class="line">    <span class="string">&#x27;JWT_AUTH_HEADER_PREFIX&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">    <span class="comment"># 2.token有效期：一天有效</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="comment"># 3.刷新token：允许使用旧的token换新token，接口对接需要设置为true</span></span><br><span class="line">    <span class="string">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 4.token有效期：token在24小时内过期, 可续期token</span></span><br><span class="line">    <span class="string">&#x27;JWT_REFRESH_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(hours=<span class="number">24</span>),</span><br><span class="line">    <span class="comment"># 5.自定义JWT载荷信息：自定义返回格式，需要手工创建</span></span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class="string">&#x27;user.utils.jwt_response_payload_handler&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-syl-settings-pyJWT结合DRF进行认证权限配置"><a href="#1-3-syl-settings-pyJWT结合DRF进行认证权限配置" class="headerlink" title="1.3 syl/settings.pyJWT结合DRF进行认证权限配置"></a>1.3 <code>syl/settings.py</code>JWT结合DRF进行认证权限配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在DRF配置文件中开启认证和权限</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 用户登陆认证方式</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,    <span class="comment"># 在DRF中配置JWT认证</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # 使用session时的认证器</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.BasicAuthentication&#x27;     # 提交表单时的认证器</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 权限配置, 顺序靠上的严格</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAdminUser&#x27;,                # 管理员可以访问</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,              <span class="comment"># 全局配置只有认证用户可以访问接口</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAuthenticatedOrReadOnly&#x27;,  # 认证用户可以访问, 否则只能读取</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.AllowAny&#x27;,                   # 所有用户都可以访问</span></span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-user-urls-py增加获取token接口和刷新token接口"><a href="#1-4-user-urls-py增加获取token接口和刷新token接口" class="headerlink" title="1.4 user/urls.py增加获取token接口和刷新token接口"></a>1.4 <code>user/urls.py</code>增加获取token接口和刷新token接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.views <span class="keyword">import</span> obtain_auth_token</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter, DefaultRouter</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token, refresh_jwt_token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动生成路由方法, 必须使用视图集</span></span><br><span class="line"><span class="comment"># router = SimpleRouter()  # 没有根路由  /user/ 无法识别</span></span><br><span class="line">router = DefaultRouter()   <span class="comment"># 有根路由</span></span><br><span class="line">router.register(<span class="string">r&#x27;user&#x27;</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),          <span class="comment"># 函数视图</span></span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),     <span class="comment"># 获取token，登录视图</span></span><br><span class="line">    path(<span class="string">&#x27;refresh/&#x27;</span>, refresh_jwt_token),  <span class="comment"># 刷新token</span></span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>)),  <span class="comment"># 认证地址</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 模块地址</span></span><br><span class="line"><span class="comment"># print(router.urls)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># obtain_jwt_token = ObtainJSONWebToken.as_view()      # 获取token</span></span><br><span class="line"><span class="comment"># refresh_jwt_token = RefreshJSONWebToken.as_view()    # 刷新token</span></span><br><span class="line"><span class="comment"># verify_jwt_token = VerifyJSONWebToken.as_view()      # 修改token</span></span><br></pre></td></tr></table></figure><h3 id="1-5-在user-x2F-utils-py中从写jwt-response-payload-handler"><a href="#1-5-在user-x2F-utils-py中从写jwt-response-payload-handler" class="headerlink" title="1.5 在user&#x2F;utils.py中从写jwt_response_payload_handler"></a>1.5 在user&#x2F;utils.py中从写jwt_response_payload_handler</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jwt_response_payload_handler</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span>, role=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义jwt认证成功返回数据</span></span><br><span class="line"><span class="string">    :token  返回的jwt</span></span><br><span class="line"><span class="string">    :user   当前登录的用户信息[对象]</span></span><br><span class="line"><span class="string">    :request 当前本次客户端提交过来的数据</span></span><br><span class="line"><span class="string">    :role 角色</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> user.first_name:</span><br><span class="line">        name = user.first_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = user.username</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;authenticated&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: role,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user.username,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: user.email,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="2-postman测试接口"><a href="#2-postman测试接口" class="headerlink" title="2.postman测试接口"></a>2.postman测试接口</h1><h3 id="2-1-测试登录接口，获取token"><a href="#2-1-测试登录接口，获取token" class="headerlink" title="2.1 测试登录接口，获取token"></a>2.1 测试登录接口，获取token</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/login/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921112356369.png" style="width: 1000px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;自定义认证和权限优先级更高，可以覆盖settings.py中的 &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 自定义权限类</span></span><br><span class="line">permission_classes = (MyPermission,)</span><br><span class="line"><span class="comment"># 自定义认证类, 自定义会覆盖全局配置</span></span><br><span class="line">authentication_classes = (JSONWebTokenAuthentication,)</span><br></pre></td></tr></table></figure><h3 id="2-2-使用获得的token获取所有用户信息"><a href="#2-2-使用获得的token获取所有用户信息" class="headerlink" title="2.2 使用获得的token获取所有用户信息"></a>2.2 使用获得的token获取所有用户信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/user/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921115316697.png" style="width: 1000px; margin-left: 50px;"> </img></p><h1 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3.源码分析"></a>3.源码分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JSONWebTokenAPIView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base API View that various JWT interactions inherit from.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    permission_classes = ()</span><br><span class="line">    authentication_classes = ()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_context</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Extra context provided to the serializer class.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;request&#x27;</span>: self.request,</span><br><span class="line">            <span class="string">&#x27;view&#x27;</span>: self,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return the class to use for the serializer.</span></span><br><span class="line"><span class="string">        Defaults to using `self.serializer_class`.</span></span><br><span class="line"><span class="string">        You may want to override this if you need to provide different</span></span><br><span class="line"><span class="string">        serializations depending on the incoming request.</span></span><br><span class="line"><span class="string">        (Eg. admins get full serialization, others get basic serialization)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.serializer_class <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">            <span class="string">&quot;&#x27;%s&#x27; should either include a `serializer_class` attribute, &quot;</span></span><br><span class="line">            <span class="string">&quot;or override the `get_serializer_class()` method.&quot;</span></span><br><span class="line">            % self.__class__.__name__)</span><br><span class="line">        <span class="keyword">return</span> self.serializer_class</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return the serializer instance that should be used for validating and</span></span><br><span class="line"><span class="string">        deserializing input, and for serializing output.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        serializer_class = self.get_serializer_class()</span><br><span class="line">        kwargs[<span class="string">&#x27;context&#x27;</span>] = self.get_serializer_context()</span><br><span class="line">        <span class="keyword">return</span> serializer_class(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            user = serializer.<span class="built_in">object</span>.get(<span class="string">&#x27;user&#x27;</span>) <span class="keyword">or</span> request.user   <span class="comment"># User表对象</span></span><br><span class="line">            token = serializer.<span class="built_in">object</span>.get(<span class="string">&#x27;token&#x27;</span>)                 <span class="comment"># 获取到生成的token</span></span><br><span class="line">            response_data = jwt_response_payload_handler(token, user, request)</span><br><span class="line">            response = Response(response_data)</span><br><span class="line">            <span class="keyword">if</span> api_settings.JWT_AUTH_COOKIE:</span><br><span class="line">                expiration = (datetime.utcnow() +</span><br><span class="line">                              api_settings.JWT_EXPIRATION_DELTA)</span><br><span class="line">                response.set_cookie(api_settings.JWT_AUTH_COOKIE,</span><br><span class="line">                                    token,</span><br><span class="line">                                    expires=expiration,</span><br><span class="line">                                    httponly=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day02" scheme="https://tsblog.cn/categories/python/SYL/day02/"/>
    
    
  </entry>
  
  <entry>
    <title>06.配置django跨域</title>
    <link href="https://tsblog.cn/pages/a4121f/"/>
    <id>https://tsblog.cn/pages/a4121f/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-配置django跨域"><a href="#1-配置django跨域" class="headerlink" title="1.配置django跨域"></a>1.配置django跨域</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 安装包</span><br><span class="line">pip install django-cors-headers </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 注册应用</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,   <span class="comment"># 添加 django-cors-headers 使其可以进行 cors 跨域</span></span><br><span class="line">]</span><br><span class="line"><span class="number">3.</span> 添加中间件</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># 放在中间件第一个</span></span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"><span class="number">4.</span> 设置</span><br><span class="line"><span class="comment"># CORS跨域请求白名单设置</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 允许携带cookie</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-配置django跨域&quot;&gt;&lt;a href=&quot;#1-配置django跨域&quot; class=&quot;headerlink&quot; title=&quot;1.配置django跨域&quot;&gt;&lt;/a&gt;1.配置django跨域&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day02" scheme="https://tsblog.cn/categories/python/SYL/day02/"/>
    
    
  </entry>
  
  <entry>
    <title>03.短信验证接口</title>
    <link href="https://tsblog.cn/pages/a7e911/"/>
    <id>https://tsblog.cn/pages/a7e911/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-注册容联云账号"><a href="#1-注册容联云账号" class="headerlink" title="1.注册容联云账号"></a>1.注册容联云账号</h1><h3 id="1-1-注册账号"><a href="#1-1-注册账号" class="headerlink" title="1.1  注册账号"></a>1.1  注册账号</h3><p><a href="https://www.yuntongxun.com/user/login">https://www.yuntongxun.com/user/login</a> </p><p><img src="./assets/image-20200921202404527.png" style="width: 700px; margin-left: 50px;"> </img></p><h3 id="1-2-登录即可看到开发者账号信息"><a href="#1-2-登录即可看到开发者账号信息" class="headerlink" title="1.2 登录即可看到开发者账号信息"></a>1.2 登录即可看到开发者账号信息</h3><p><img src="./assets/image-20200921202725860.png" style="width: 700px; margin-left: 50px;"> </img></p><h3 id="1-3-添加测试账号"><a href="#1-3-添加测试账号" class="headerlink" title="1.3 添加测试账号"></a>1.3 添加测试账号</h3><p><img src="./assets/image-20200921202948549.png" style="width: 1000px; margin-left: 50px;"> </img></p><h1 id="2-使用容联云发送代码测试"><a href="#2-使用容联云发送代码测试" class="headerlink" title="2.使用容联云发送代码测试"></a>2.使用容联云发送代码测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1. 安装容联云sdk&#x27;&#x27;&#x27;</span></span><br><span class="line">pip install ronglian_sms_sdk</span><br><span class="line"><span class="comment"># 免费测试文档地址:https://doc.yuntongxun.com/p/5a531a353b8496dd00dcdfe2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2. 短信发送代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># libs/rl_sms.py</span></span><br><span class="line"><span class="keyword">from</span> ronglian_sms_sdk <span class="keyword">import</span> SmsSDK</span><br><span class="line"></span><br><span class="line">accId = <span class="string">&#x27;8a216da8747ac98201749c0de38723b7&#x27;</span></span><br><span class="line">accToken = <span class="string">&#x27;86072b540b4648229b27400414150ef2&#x27;</span></span><br><span class="line">appId = <span class="string">&#x27;8a216da8747ac98201749c0de45123be&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">phone, datas</span>):</span><br><span class="line">    sdk = SmsSDK(accId, accToken, appId)</span><br><span class="line">    tid = <span class="string">&#x27;1&#x27;</span>  <span class="comment"># 测试模板id为: 1. 内容为: 【云通讯】您的验证码是&#123;1&#125;，请于&#123;2&#125;分钟内正确输入。</span></span><br><span class="line">    <span class="comment"># mobile = &#x27;13303479527&#x27;</span></span><br><span class="line">    <span class="comment"># datas = (&#x27;666777&#x27;, &#x27;5&#x27;)  # 模板中的参数按照位置传递</span></span><br><span class="line">    resp = sdk.sendMessage(tid, phone, datas)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h1 id="3-在视图函数中使用"><a href="#3-在视图函数中使用" class="headerlink" title="3.在视图函数中使用"></a>3.在视图函数中使用</h1><h3 id="3-1-在verifications-x2F-urls-py中添加路由"><a href="#3-1-在verifications-x2F-urls-py中添加路由" class="headerlink" title="3.1 在verifications&#x2F;urls.py中添加路由"></a>3.1 在verifications&#x2F;urls.py中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;sms_codes/&#x27;</span>, views.SmsCodeView.as_view()), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-2-写试图函数"><a href="#3-2-写试图函数" class="headerlink" title="3.2 写试图函数"></a>3.2 写试图函数</h3><p><img src="./assets/image-20201008091131678.png" style="width: 700px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># verifications/views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> utils.rl_sms <span class="keyword">import</span> send_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmsCodeView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 1. 所有人可以访问</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1. 获取参数</span></span><br><span class="line">        phone = request.data.get(<span class="string">&#x27;phone&#x27;</span>) </span><br><span class="line">        image_code = request.data.get(<span class="string">&#x27;image_code&#x27;</span>)    <span class="comment"># 字符串验证码</span></span><br><span class="line">        image_code_uuid = request.data.get(<span class="string">&#x27;image_code_uuid&#x27;</span>)   <span class="comment"># 前端生成的uuid，是redis中图片验证码的key</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 检查参数是否完整</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([phone, image_code, image_code_uuid]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;参数不全&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^1[3456789]\d&#123;9&#125;$&#x27;</span>, phone):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;手机号码不正确&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 检查是否已经发送过</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;img_code&#x27;</span>)  <span class="comment"># 连接redis</span></span><br><span class="line">        phone_exists = redis_client.get(phone)</span><br><span class="line">        <span class="keyword">if</span> phone_exists:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;频繁发送, 请稍后再试&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.检查图片验证码是否合法</span></span><br><span class="line">        redis_image_code = redis_client.get(image_code_uuid)  <span class="comment"># 字符串验证码</span></span><br><span class="line">        <span class="keyword">if</span> redis_image_code:</span><br><span class="line">            <span class="comment"># bytes 转成 string</span></span><br><span class="line">            redis_image_code = redis_image_code.decode()</span><br><span class="line">        <span class="comment"># 比较用户提供的图片内容是否和redis中保存的一致</span></span><br><span class="line">        <span class="keyword">if</span> image_code.upper() != redis_image_code:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;图片验证码不正确&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 发送</span></span><br><span class="line">        code = <span class="string">&#x27;%06d&#x27;</span> % random.randint(<span class="number">0</span>, <span class="number">999999</span>)  <span class="comment"># 随机6位验证码</span></span><br><span class="line">        send_resp = send_message(phone, (code, <span class="string">&quot;5&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5.1 保存code 到 redis中</span></span><br><span class="line">        <span class="comment"># redis_client.setex(phone, 60 * 5, code)  # phone:code, 5分钟有效期</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5.2 从redis中删除这个图片验证码, 以防再次被使用</span></span><br><span class="line">        <span class="comment"># redis_client.delete(image_code_uuid)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6.存储这个已经出发发送的手机号，防止频繁发送 （使用 pipeline 批量操作）</span></span><br><span class="line">        pl = redis_client.pipeline()      <span class="comment"># 实例化一个pipeline对象</span></span><br><span class="line">        pl.setex(phone, <span class="number">60</span> * <span class="number">5</span>, code)</span><br><span class="line">        pl.delete(image_code_uuid)</span><br><span class="line">        pl.execute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">0</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;短信发送成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-注册容联云账号&quot;&gt;&lt;a href=&quot;#1-注册容联云账号&quot; class=&quot;headerlink&quot; title=&quot;1.注册容联云账号&quot;&gt;&lt;/a&gt;1.注册容联云账号&lt;/h1&gt;&lt;h3 id=&quot;1-1-注册账号&quot;&gt;&lt;a href=&quot;#1-1-注册账号&quot; class=&quot;</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day03" scheme="https://tsblog.cn/categories/python/SYL/day03/"/>
    
    
  </entry>
  
  <entry>
    <title>00.作业</title>
    <link href="https://tsblog.cn/pages/e4a5bb/"/>
    <id>https://tsblog.cn/pages/e4a5bb/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><ul><li>图片验证码接口（项目代码+记录到博客中）</li><li>vue联调，图片验证码（项目代码+记录到博客中）</li><li>短信验证接口（项目代码+记录到博客中）</li><li>redis的pipeline（记录到博客中）</li><li>画图<ul><li>图片验证码原理（画图）<ul><li><img src="./assets/image-20201008103409256.png" style="width: 400px; margin-left: 50px;"> </img></li></ul></li><li>短信验证码原理（画图）<ul><li><img src="./assets/image-20201008103458943.png" style="width: 600px; margin-left: 50px;"> </img></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;作业&quot;&gt;&lt;a href=&quot;#作业&quot; class=&quot;headerlink&quot; title=&quot;作业&quot;&gt;&lt;/a&gt;作业&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;图片验证码接口（项目代码+记录到博客中）&lt;/li&gt;
&lt;li&gt;vue联调，图片验证码（项目代码+记录到博客中）&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day03" scheme="https://tsblog.cn/categories/python/SYL/day03/"/>
    
    
  </entry>
  
  <entry>
    <title>02.vue图片验证码</title>
    <link href="https://tsblog.cn/pages/83164a/"/>
    <id>https://tsblog.cn/pages/83164a/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生成图片验证码"><a href="#1-生成图片验证码" class="headerlink" title="1.生成图片验证码"></a>1.生成图片验证码</h1><h3 id="1-1-修改components-common-lab-header-vue添加图片验证码"><a href="#1-1-修改components-common-lab-header-vue添加图片验证码" class="headerlink" title="1.1 修改components\common\lab_header.vue添加图片验证码"></a>1.1 修改<code>components\common\lab_header.vue</code>添加图片验证码</h3><ul><li>只需要把原始的url路径修改成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getImgUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> uuid = <span class="variable language_">this</span>.<span class="title function_">getUuid</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uuid</span> = uuid</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;http://192.168.56.100:8888/verify/image_codes/?uuid=&#x27;</span> + uuid</span><br><span class="line">  <span class="comment">// let url = &#x27;http://192.168.56.100:8888/verify/image_codes/?uuid=66ea64aa-fbe6-11ea-a3d3-005056c00008&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">imgUrl</span> = url</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="2-前端学习方法"><a href="#2-前端学习方法" class="headerlink" title="2.前端学习方法"></a>2.前端学习方法</h1><ul><li><p>1.找路由：src\router\index.js，根据路由找到xxx.vue文件</p></li><li><p>2.分析xxx.vue</p><ul><li>1.点击按钮的html位置</li><li>2.点击后触发什么一个js函数<ul><li>js函数从后端获取了什么数据</li><li>获取到数据以后做了什么修改</li></ul></li></ul></li><li><p>3.发送请求（axios封装）</p><ul><li>components\axios_api\apis.js</li><li>components\axios_api\http.js</li><li>导入并使用</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-生成图片验证码&quot;&gt;&lt;a href=&quot;#1-生成图片验证码&quot; class=&quot;headerlink&quot; title=&quot;1.生成图片验证码&quot;&gt;&lt;/a&gt;1.生成图片验证码&lt;/h1&gt;&lt;h3 id=&quot;1-1-修改components-common-lab-header-vu</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day03" scheme="https://tsblog.cn/categories/python/SYL/day03/"/>
    
    
  </entry>
  
  <entry>
    <title>01.图片验证码接口</title>
    <link href="https://tsblog.cn/pages/73dabe/"/>
    <id>https://tsblog.cn/pages/73dabe/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-django-缓存设置"><a href="#1-django-缓存设置" class="headerlink" title="1.django 缓存设置"></a>1.django 缓存设置</h1><p><code>django的六种缓存（mysql+redis）</code>：<a href="https://www.cnblogs.com/xiaonq/p/7978402.html#i6">https://www.cnblogs.com/xiaonq/p/7978402.html#i6</a></p><p><code>redis使用：</code><a href="https://www.cnblogs.com/xiaonq/category/1544586.html">https://www.cnblogs.com/xiaonq/category/1544586.html</a></p><h3 id="1-1-安装Django缓存模块"><a href="#1-1-安装Django缓存模块" class="headerlink" title="1.1 安装Django缓存模块"></a>1.1 安装Django缓存模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-redis==<span class="number">4.12</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="1-2-syl-settings-py中配置缓存"><a href="#1-2-syl-settings-py中配置缓存" class="headerlink" title="1.2 syl/settings.py中配置缓存"></a>1.2 <code>syl/settings.py</code>中配置缓存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="comment"># django存缓默认位置,redis 0号库</span></span><br><span class="line">    <span class="comment"># default: 连接名称</span></span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># django session存 reidis 1 号库（现在基本不需要使用）</span></span><br><span class="line">    <span class="string">&quot;session&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 图形验证码，存redis 2号库</span></span><br><span class="line">    <span class="string">&quot;img_code&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置session使用redis存储</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.cache&quot;</span></span><br><span class="line"><span class="comment"># 配置session存储的位置: 使用cache中的 session配置</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&quot;session&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-新建应用verifications"><a href="#2-新建应用verifications" class="headerlink" title="2.新建应用verifications"></a>2.新建应用verifications</h1><ul><li>图形验证码</li><li>短信验证码</li><li>邮件验证</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;2.1 在apps文件夹下新建应用： verifications&#x27;&#x27;&#x27;</span></span><br><span class="line">python ../manage.py startapp verifications   <span class="comment"># 切换到apps文件夹下执行创建命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.2 在syl/settings.py中添加应用&#x27;&#x27;&#x27;</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;verifications.apps.VerificationsConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.3 在syl/urls.py主路由中添加&#x27;&#x27;&#x27;</span></span><br><span class="line">path(<span class="string">&#x27;verify/&#x27;</span>, include(<span class="string">&#x27;verifications.urls&#x27;</span>)),</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.4 添加子路由： verifications/urls.py&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&#x27;image_codes/&#x27;, views.ImageCodeView.as_view())</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="3-图形验证码captcha使用"><a href="#3-图形验证码captcha使用" class="headerlink" title="3.图形验证码captcha使用"></a>3.图形验证码captcha使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>下载captcha压缩包captcha.<span class="built_in">zip</span>，放到项目packages文件夹下</span><br><span class="line"><span class="number">2.</span>解压captcha.<span class="built_in">zip</span>放到syl/libs文件夹下</span><br><span class="line"><span class="number">3.</span>解压文件中的syl/libs/captcha/captcha.py 右键运行即可生成图片验证码</span><br><span class="line">unzip xxx.<span class="built_in">zip</span></span><br></pre></td></tr></table></figure><h1 id="4-在verifications-x2F-views-py中使用"><a href="#4-在verifications-x2F-views-py中使用" class="headerlink" title="4.在verifications&#x2F;views.py中使用"></a>4.在verifications&#x2F;views.py中使用</h1><p><img src="./assets/image-20201008084403574.png" style="width: 600px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseForbidden</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="keyword">from</span> libs.captcha.captcha <span class="keyword">import</span> captcha</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageCodeView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1.接收数据(uuid)</span></span><br><span class="line">        uuid = request.GET.get(<span class="string">&#x27;uuid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.校验数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uuid:</span><br><span class="line">            <span class="keyword">return</span> HttpResponseForbidden(<span class="string">&#x27;uuid无效&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.处理业务</span></span><br><span class="line">        <span class="comment"># 获取图片文本内容和图片二进制代码</span></span><br><span class="line">        text, image = captcha.generate_captcha()   <span class="comment"># text=GPMZ; image=图片</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.把uuid和图片文本存入redis</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;img_code&#x27;</span>)  <span class="comment"># 获取redis客户端</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5.写入redis(是字符串)</span></span><br><span class="line">        redis_client.setex(uuid, <span class="number">60</span> * <span class="number">5</span>, text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6.返回响应图片</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(image, content_type=<span class="string">&#x27;image/jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="5-测试验证码接口"><a href="#5-测试验证码接口" class="headerlink" title="5.测试验证码接口"></a>5.测试验证码接口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/verify/image_codes/?uuid=66ea64aa-fbe6-11ea-a3d3-005056c00008</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921164353098.png" style="width: 1000px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;<span class="comment">#  select 2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt;<span class="comment">#  keys *</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;66ea64aa-fbe6-11ea-a3d3-005056c00008&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt;<span class="comment">#  get 66ea64aa-fbe6-11ea-a3d3-005056c00008</span></span><br><span class="line"><span class="string">&quot;JEZ6&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-django-缓存设置&quot;&gt;&lt;a href=&quot;#1-django-缓存设置&quot; class=&quot;headerlink&quot; title=&quot;1.django 缓存设置&quot;&gt;&lt;/a&gt;1.django 缓存设置&lt;/h1&gt;&lt;p&gt;&lt;code&gt;django的六种缓存（mysql+re</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day03" scheme="https://tsblog.cn/categories/python/SYL/day03/"/>
    
    
  </entry>
  
  <entry>
    <title>05.编写注册接口</title>
    <link href="https://tsblog.cn/pages/8f565f/"/>
    <id>https://tsblog.cn/pages/8f565f/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-编写注册接口"><a href="#1-编写注册接口" class="headerlink" title="1.编写注册接口"></a>1.编写注册接口</h1><h3 id="1-1-user-urls-py中添加路由"><a href="#1-1-user-urls-py中添加路由" class="headerlink" title="1.1 user/urls.py中添加路由"></a>1.1 <code>user/urls.py</code>中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;register/&#x27;</span>, views.RegisterView.as_view()),  <span class="comment"># 注册视图,  /user/register/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-user-views-py中写注册视图函数"><a href="#1-2-user-views-py中写注册视图函数" class="headerlink" title="1.2 user/views.py中写注册视图函数"></a>1.2 <code>user/views.py</code>中写注册视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户注册, 权限是: 匿名用户可访问</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        接收邮箱和密码, 前端校验两遍一致性, 注册成功后返回成功, 然后用户自行登录获取token</span></span><br><span class="line"><span class="string">        1. 随机用户名</span></span><br><span class="line"><span class="string">        2. 生成用户</span></span><br><span class="line"><span class="string">        3. 设置用户密码</span></span><br><span class="line"><span class="string">        4. 保存用户</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return:  &#123;&#x27;code&#x27;:0,&#x27;msg&#x27;:&#x27;注册成功&#x27;&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        email = request.data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        passwrod = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([email, passwrod]):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">9999</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;参数不全&#x27;</span>&#125;)</span><br><span class="line">        user = User(username=username, email=email)</span><br><span class="line">        user.set_password(passwrod)                   <span class="comment"># 密码加密</span></span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;注册成功&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-重写django认证"><a href="#2-重写django认证" class="headerlink" title="2.重写django认证"></a>2.重写django认证</h1><h3 id="2-1-syl-settings-py中指定自定义后端认证函数位置"><a href="#2-1-syl-settings-py中指定自定义后端认证函数位置" class="headerlink" title="2.1 syl/settings.py中指定自定义后端认证函数位置"></a>2.1 <code>syl/settings.py</code>中指定自定义后端认证函数位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义验证后端，使用我们自己写的认证类来验证用户登录身份</span></span><br><span class="line">AUTHENTICATION_BACKENDS = [<span class="string">&#x27;user.utils.EmailAuthBackend&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-2-user-utils-py中重写认证函数（django多账号登录）"><a href="#2-2-user-utils-py中重写认证函数（django多账号登录）" class="headerlink" title="2.2 user/utils.py中重写认证函数（django多账号登录）"></a>2.2 <code>user/utils.py</code>中重写认证函数（django多账号登录）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以前使用username进行用户验证，现在修改成email进行验证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailAuthBackend</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        request: request请求对象</span></span><br><span class="line"><span class="string">        username:  用户名&amp;邮箱&amp;手机号</span></span><br><span class="line"><span class="string">        password: 密码</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 通过用户名获取</span></span><br><span class="line">            user = User.objects.get(username=username)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            user = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(email=username)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                user = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.check_password(password):</span><br><span class="line">            <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">self, user_id</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> User.objects.get(pk=user_id)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h1 id="3-注册用户-amp-测试登录"><a href="#3-注册用户-amp-测试登录" class="headerlink" title="3.注册用户 &amp; 测试登录"></a>3.注册用户 &amp; 测试登录</h1><h3 id="3-1-注册接口测试"><a href="#3-1-注册接口测试" class="headerlink" title="3.1 注册接口测试"></a>3.1 注册接口测试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/register/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921145153815.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="3-2-登录接口测试"><a href="#3-2-登录接口测试" class="headerlink" title="3.2 登录接口测试"></a>3.2 登录接口测试</h3><p>注：<code>认证时只能识别username，所以必须要在请求中携带username字段</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/login/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921145629191.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="3-3-获取用户列表接口测试"><a href="#3-3-获取用户列表接口测试" class="headerlink" title="3.3 获取用户列表接口测试"></a>3.3 获取用户列表接口测试</h3><ul><li>访问接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/user/5/</span></span><br></pre></td></tr></table></figure><ul><li><code>测试自定义权限</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义权限类</span></span><br><span class="line">permission_classes = (MyPermission,)</span><br><span class="line"><span class="comment"># 自定义认证类, 自定义会覆盖全局配置</span></span><br><span class="line">authentication_classes = (JSONWebTokenAuthentication,)</span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921150903996.png" style="width: 1000px; margin-left: 50px;"> </img></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-编写注册接口&quot;&gt;&lt;a href=&quot;#1-编写注册接口&quot; class=&quot;headerlink&quot; title=&quot;1.编写注册接口&quot;&gt;&lt;/a&gt;1.编写注册接口&lt;/h1&gt;&lt;h3 id=&quot;1-1-user-urls-py中添加路由&quot;&gt;&lt;a href=&quot;#1-1-user</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day02" scheme="https://tsblog.cn/categories/python/SYL/day02/"/>
    
    
  </entry>
  
  <entry>
    <title>04.redis的pipline使用</title>
    <link href="https://tsblog.cn/pages/9cbc46/"/>
    <id>https://tsblog.cn/pages/9cbc46/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-pipeline原理"><a href="#1-pipeline原理" class="headerlink" title="1.pipeline原理"></a>1.pipeline原理</h1><p>redis基本语法：<a href="https://www.cnblogs.com/xiaonq/p/7919111.html">https://www.cnblogs.com/xiaonq/p/7919111.html</a></p><p>redis四篇：<a href="https://www.cnblogs.com/xiaonq/category/1544586.html">https://www.cnblogs.com/xiaonq/category/1544586.html</a></p><h3 id="1-1-redis发送数据原理"><a href="#1-1-redis发送数据原理" class="headerlink" title="1.1 redis发送数据原理"></a>1.1 redis发送数据原理</h3><ul><li><p>Redis是建立在TCP协议基础上的CS架构，客户端client对redis server采取请求响应的方式交互。</p></li><li><p>一般来说客户端从提交请求到得到服务器相应，需要传送两个tcp报文。</p></li><li><p>设想这样的一个场景，你要批量的执行一系列redis命令，例如执行100次get key，这时你要向redis请求100次+获取响应100次。如果能一次性将100个请求提交给redis server，执行完成之后批量的获取相应，只需要向redis请求1次，然后批量执行完命令，一次性结果，性能是不是会好很多呢？</p></li></ul><h3 id="1-2-未使用pipeline执行N条命令"><a href="#1-2-未使用pipeline执行N条命令" class="headerlink" title="1.2 未使用pipeline执行N条命令"></a>1.2 未使用pipeline执行N条命令</h3><p><img src="./assets/image-20201005225859400.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="1-3-使用了pipeline执行N条命令"><a href="#1-3-使用了pipeline执行N条命令" class="headerlink" title="1.3 使用了pipeline执行N条命令"></a>1.3 使用了pipeline执行N条命令</h3><p><img src="./assets/image-20201005230053553.png" style="width: 600px; margin-left: 50px;"> </img></p><h1 id="2-pipeline性能代码展示"><a href="#2-pipeline性能代码展示" class="headerlink" title="2.pipeline性能代码展示"></a>2.pipeline性能代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection       <span class="comment"># 导入get_redis_connection模块</span></span><br><span class="line">In [<span class="number">2</span>]: redis_client = get_redis_connection(<span class="string">&#x27;default&#x27;</span>)      <span class="comment"># 连接redis 0号库</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;方法1：使用普通方法执行&#x27;&#x27;&#x27;</span></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99999</span>):</span><br><span class="line">   ...:     redis_client.<span class="built_in">set</span>(i,i)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;方法2：使用pipeline执行&#x27;&#x27;&#x27;</span></span><br><span class="line">In [<span class="number">4</span>]: p1 = redis_client.pipeline()           <span class="comment"># 实例化一个pipeline对象             </span></span><br><span class="line">In [<span class="number">5</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99999</span>):</span><br><span class="line">   ...:     p1.<span class="built_in">set</span>(i,i)                        <span class="comment"># 把要执行的命令打包到pipeline</span></span><br><span class="line">In [<span class="number">6</span>]: p1.execute()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-pipeline原理&quot;&gt;&lt;a href=&quot;#1-pipeline原理&quot; class=&quot;headerlink&quot; title=&quot;1.pipeline原理&quot;&gt;&lt;/a&gt;1.pipeline原理&lt;/h1&gt;&lt;p&gt;redis基本语法：&lt;a href=&quot;https://www</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day03" scheme="https://tsblog.cn/categories/python/SYL/day03/"/>
    
    
  </entry>
  
  <entry>
    <title>00.作业</title>
    <link href="https://tsblog.cn/pages/48b841/"/>
    <id>https://tsblog.cn/pages/48b841/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作业"><a href="#1-作业" class="headerlink" title="1.作业"></a>1.作业</h1><ul><li><p>celery原理与组件（博客+画图）</p></li><li><p>celery配置博客（博客：以后使用能够快速完成）</p></li><li><p>celery发送短信的接口（博客+项目代码）</p></li><li><p>vue发送短信（博客）</p></li><li><p>检查用户名接口</p></li><li><p>后端注册接口</p></li><li><p>前端：</p><ul><li>检查用户名复杂性、手机号是否合法</li><li>检查密码复杂度</li></ul></li><li><p>熟悉接口文档规范，完成 上面四个接口文档</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-作业&quot;&gt;&lt;a href=&quot;#1-作业&quot; class=&quot;headerlink&quot; title=&quot;1.作业&quot;&gt;&lt;/a&gt;1.作业&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;celery原理与组件（博客+画图）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;celery配置博客（博客：以后使</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day04" scheme="https://tsblog.cn/categories/python/SYL/day04/"/>
    
    
  </entry>
  
  <entry>
    <title>01.celery原理与组件</title>
    <link href="https://tsblog.cn/pages/ac52c6/"/>
    <id>https://tsblog.cn/pages/ac52c6/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Celery介绍"><a href="#1-Celery介绍" class="headerlink" title="1.Celery介绍"></a>1.Celery介绍</h1><p><a href="https://www.cnblogs.com/xiaonq/p/11166235.html#i1">https://www.cnblogs.com/xiaonq/p/11166235.html#i1</a></p><h3 id="1-1-celery应用举例"><a href="#1-1-celery应用举例" class="headerlink" title="1.1 celery应用举例"></a>1.1 celery应用举例</h3><ul><li><p>Celery 是一个 基于python开发的<code>分布式异步消息任务队列</code>，通过它可以轻松的实现任务的异步处理，如果你的业务场景中需要用到异步任务，就可以考虑使用celery</p></li><li><p>你想对100台机器执行一条批量命令，可能会花很长时间 ，但你不想让你的程序等着结果返回，而是给你返回 一个任务ID,你过一段时间只需要拿着这个任务id就可以拿到任务执行结果， 在任务执行ing进行时，你可以继续做其它的事情</p></li><li><p>Celery 在执行任务时需要通过一个消息中间件来接收和发送任务消息，以及存储任务结果， 一般使用rabbitMQ or Redis</p></li></ul><h3 id="1-2-Celery有以下优点"><a href="#1-2-Celery有以下优点" class="headerlink" title="1.2 Celery有以下优点"></a>1.2 Celery有以下优点</h3><ul><li>简单：一单熟悉了celery的工作流程后，配置和使用还是比较简单的</li><li>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务</li><li>快速：一个单进程的celery每分钟可处理上百万个任务</li><li>灵活： 几乎celery的各个组件都可以被扩展及自定制</li></ul><h3 id="1-3-Celery-特性"><a href="#1-3-Celery-特性" class="headerlink" title="1.3 Celery 特性"></a>1.3 Celery 特性</h3><ul><li><p>方便查看定时任务的执行情况, 如 是否成功, 当前状态, 执行任务花费的时间等.</p></li><li><p>可选 多进程, Eventlet 和 Gevent 三种模型并发执行.</p></li><li><p><code>Celery 是语言无关的.它提供了python 等常见语言的接口支持.</code></p></li></ul><h1 id="2-celery-组件"><a href="#2-celery-组件" class="headerlink" title="2.celery 组件"></a>2.celery 组件</h1><p><a href="https://www.cnblogs.com/xiaonq/p/11166235.html#i2">https://www.cnblogs.com/xiaonq/p/11166235.html#i2</a></p><h3 id="2-1-Celery-扮演生产者和消费者的角色"><a href="#2-1-Celery-扮演生产者和消费者的角色" class="headerlink" title="2.1 Celery 扮演生产者和消费者的角色"></a>2.1 Celery 扮演生产者和消费者的角色</h3><ul><li><p><strong>Celery Beat :</strong> 任务调度器. Beat 进程会读取配置文件的内容, 周期性的将配置中到期需要执行的任务发送给任务队列.</p></li><li><p><strong>Celery Worker :</strong> 执行任务的消费者, 通常会在多台服务器运行多个消费者, 提高运行效率.</p></li><li><p><strong>Broker :</strong> 消息代理, 队列本身. 也称为消息中间件. 接受任务生产者发送过来的任务消息, 存进队列再按序分发给任务消费方(通常是消息队列或者数据库).</p></li><li><p><strong>Producer :</strong> 任务生产者. 调用 Celery API , 函数或者装饰器, 而产生任务并交给任务队列处理的都是任务生产者.</p></li><li><p><strong>Result Backend :</strong> 任务处理完成之后保存状态信息和结果, 以供查询.</p></li></ul><h3 id="2-2-celery架构图（生产者消费者模型）"><a href="#2-2-celery架构图（生产者消费者模型）" class="headerlink" title="2.2 celery架构图（生产者消费者模型）"></a>2.2 celery架构图（<code>生产者消费者模型</code>）</h3><p><img src="./assets/image-20201004180304271.png" style="width: 700px; margin-left: 50px;"> </img></p><p><img src="./assets/image-20201008101758234.png" style="width: 700px; margin-left: 50px;"> </img></p><p><img src="./assets/image-20201104091750479.png" style="width: 800px; margin-left: 50px;"> </img></p><h3 id="2-3-产生任务的方式"><a href="#2-3-产生任务的方式" class="headerlink" title="2.3 产生任务的方式"></a>2.3 产生任务的方式</h3><ul><li><p>发布者发布任务(WEB 应用)</p></li><li><p>任务调度按期发布任务(定时任务)</p></li></ul><h3 id="2-4-celery-依赖三个库-这三个库-都由-Celery-的开发者开发和维护"><a href="#2-4-celery-依赖三个库-这三个库-都由-Celery-的开发者开发和维护" class="headerlink" title="2.4 celery 依赖三个库: 这三个库, 都由 Celery 的开发者开发和维护."></a>2.4 celery 依赖三个库: 这三个库, 都由 Celery 的开发者开发和维护.</h3><ul><li><code>billiard :</code> 基于 Python2.7 的 multisuprocessing 而改进的库, 主要用来提高性能和稳定性.</li><li><code>librabbitmp : </code>C 语言实现的 Python 客户端</li><li><code>kombu :</code> Celery 自带的用来收发消息的库, 提供了符合 Python 语言习惯的, 使用 AMQP 协议的高级借口.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Celery介绍&quot;&gt;&lt;a href=&quot;#1-Celery介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Celery介绍&quot;&gt;&lt;/a&gt;1.Celery介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xiaon</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day04" scheme="https://tsblog.cn/categories/python/SYL/day04/"/>
    
    
  </entry>
  
  <entry>
    <title>03.celery发送短信接口</title>
    <link href="https://tsblog.cn/pages/e04fba/"/>
    <id>https://tsblog.cn/pages/e04fba/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用celery异步发送短信"><a href="#1-使用celery异步发送短信" class="headerlink" title="1.使用celery异步发送短信"></a>1.使用celery异步发送短信</h1><h3 id="1-1-在celery-task-mian-py中添加发送短信函数"><a href="#1-1-在celery-task-mian-py中添加发送短信函数" class="headerlink" title="1.1 在celery_task/mian.py中添加发送短信函数"></a>1.1 在<code>celery_task/mian.py</code>中添加发送短信函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery项目中的所有导包地址, 都是以CELERY_BASE_DIR为基准设定.</span></span><br><span class="line"><span class="comment"># 执行celery命令时, 也需要进入CELERY_BASE_DIR目录执行.</span></span><br><span class="line">CELERY_BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_sms_code</span>(<span class="params">self, mobile, datas</span>):</span><br><span class="line">    sys.path.insert(<span class="number">0</span>, os.path.join(CELERY_BASE_DIR, <span class="string">&#x27;../syl&#x27;</span>))</span><br><span class="line">    <span class="comment"># 在方法中导包</span></span><br><span class="line">    <span class="keyword">from</span> utils.rl_sms <span class="keyword">import</span> send_message</span><br><span class="line">    <span class="comment"># time.sleep(5)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 用 res 接收发送结果, 成功是:０，　失败是：－１</span></span><br><span class="line">        res = send_message(mobile, datas)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        res = <span class="string">&#x27;-1&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&#x27;-1&#x27;</span>:</span><br><span class="line">        <span class="comment"># 如果发送结果是 -1  就重试.</span></span><br><span class="line">        self.retry(countdown=<span class="number">5</span>, max_retries=<span class="number">3</span>, exc=Exception(<span class="string">&#x27;短信发送失败&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="1-2-在verifications-views-py中添加celery发送短信试图函数"><a href="#1-2-在verifications-views-py中添加celery发送短信试图函数" class="headerlink" title="1.2 在verifications/views.py中添加celery发送短信试图函数"></a>1.2 在<code>verifications/views.py</code>中添加celery发送短信试图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SmsCodeView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用apiview的限流&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 所有人可以访问</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1. 获取参数</span></span><br><span class="line">        phone = request.data.get(<span class="string">&#x27;phone&#x27;</span>)  <span class="comment"># 手机号</span></span><br><span class="line">        image_code = request.data.get(<span class="string">&#x27;image_code&#x27;</span>)  <span class="comment"># 图片验证码</span></span><br><span class="line">        image_code_uuid = request.data.get(<span class="string">&#x27;image_code_uuid&#x27;</span>)  <span class="comment"># 前端生成的uuid</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 检查参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([phone, image_code, image_code_uuid]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;参数不全&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^1[3456789]\d&#123;9&#125;$&#x27;</span>, phone):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;手机号码不正确&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 检查是否发送</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;img_code&#x27;</span>)</span><br><span class="line">        phone_exists = redis_client.get(phone)</span><br><span class="line">        <span class="keyword">if</span> phone_exists:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;频繁发送, 请稍后再试&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.检查验证图形验证码</span></span><br><span class="line">        redis_image_code = redis_client.get(image_code_uuid)  <span class="comment"># bytes</span></span><br><span class="line">        <span class="keyword">if</span> redis_image_code:</span><br><span class="line">            <span class="comment"># bytes 转成 string</span></span><br><span class="line">            redis_image_code = redis_image_code.decode()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 比较用户提供的图片内容是否和redis中保存的一致</span></span><br><span class="line">        <span class="keyword">if</span> image_code.upper() != redis_image_code:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;图片验证码不正确&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 发送</span></span><br><span class="line">        code = <span class="string">&#x27;%06d&#x27;</span> % random.randint(<span class="number">0</span>, <span class="number">999999</span>)  <span class="comment"># 随机6位验证码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> syl.settings <span class="keyword">import</span> BASE_DIR</span><br><span class="line">        sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">&#x27;../celery_task&#x27;</span>))</span><br><span class="line">        <span class="keyword">from</span> main <span class="keyword">import</span> send_sms_code  <span class="comment"># 必须这么写, 从main中导包</span></span><br><span class="line"></span><br><span class="line">        send_sms_code.delay(phone, (code, <span class="string">&quot;5&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(code)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6.使用 pipeline 批量操作</span></span><br><span class="line">        pl = redis_client.pipeline()    <span class="comment"># 实例化pipeline对象</span></span><br><span class="line">        pl.setex(phone, <span class="number">60</span> * <span class="number">5</span>, code)   <span class="comment"># 存储phone:code, 5分钟有效期</span></span><br><span class="line">        pl.delete(image_code_uuid)      <span class="comment"># 从redis中删除这个图片验证码, 以防再次被使用</span></span><br><span class="line">        pl.execute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 7. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">0</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;短信发送成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-添加路由"><a href="#1-3-添加路由" class="headerlink" title="1.3 添加路由"></a>1.3 添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;sms_codes/&#x27;</span>, views.SmsCodeView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2.测试接口"></a>2.测试接口</h1><ul><li>接口URL</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.100:8888/user/sms_codes/</span><br></pre></td></tr></table></figure><ul><li>请求携带参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;phone&quot;</span>: <span class="number">18538752511</span>,</span><br><span class="line">    <span class="string">&quot;image_code&quot;</span>:<span class="string">&quot;aed3&quot;</span>,                                         <span class="comment"># 前端生成的 图形验证码</span></span><br><span class="line">    <span class="string">&quot;image_code_uuid&quot;</span>:<span class="string">&quot;de8edce2-fc9f-11ea-9325-005056c00008&quot;</span>     <span class="comment"># 前端生成的uuid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-使用celery异步发送短信&quot;&gt;&lt;a href=&quot;#1-使用celery异步发送短信&quot; class=&quot;headerlink&quot; title=&quot;1.使用celery异步发送短信&quot;&gt;&lt;/a&gt;1.使用celery异步发送短信&lt;/h1&gt;&lt;h3 id=&quot;1-1-在cele</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day04" scheme="https://tsblog.cn/categories/python/SYL/day04/"/>
    
    
  </entry>
  
  <entry>
    <title>02.celery配置与基本使用</title>
    <link href="https://tsblog.cn/pages/ee62e4/"/>
    <id>https://tsblog.cn/pages/ee62e4/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-celery配置与基本使用"><a href="#1-celery配置与基本使用" class="headerlink" title="1.celery配置与基本使用"></a>1.celery配置与基本使用</h1><h3 id="1-1-安装celery"><a href="#1-1-安装celery" class="headerlink" title="1.1 安装celery"></a>1.1 安装celery</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install celery==<span class="number">5.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="1-2-新建celery-main-py配置celery"><a href="#1-2-新建celery-main-py配置celery" class="headerlink" title="1.2 新建celery/main.py配置celery"></a>1.2 新建<code>celery/main.py</code>配置celery</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery_task/main.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义celery实例, 需要的参数, 1, 实例名, 2, 任务发布位置, 3, 结果保存位置</span></span><br><span class="line">app = Celery(<span class="string">&#x27;mycelery&#x27;</span>,</span><br><span class="line">             broker=<span class="string">&#x27;redis://127.0.0.1:6379/14&#x27;</span>,  <span class="comment"># 任务存放的地方 </span></span><br><span class="line">             backend=<span class="string">&#x27;redis://127.0.0.1:6379/15&#x27;</span>)  <span class="comment"># 结果存放的地方</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.task 指定将这个函数的执行交给celery异步执行</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><h1 id="2-测试celery"><a href="#2-测试celery" class="headerlink" title="2.测试celery"></a>2.测试celery</h1><h3 id="2-1-启动celery"><a href="#2-1-启动celery" class="headerlink" title="2.1 启动celery"></a>2.1 启动celery</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1.启动celery&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#1.1 单进程启动celery</span></span><br><span class="line">celery -A main worker -l INFO</span><br><span class="line"><span class="comment">#1.2 celery管理</span></span><br><span class="line">celery  multi start celery_test -A celery_test -l debug --autoscale=<span class="number">50</span>,<span class="number">5</span>        <span class="comment"># celery并发数：最多50个，最少5个</span></span><br><span class="line">ps auxww|grep <span class="string">&quot;celery worker&quot;</span>|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs kill -<span class="number">9</span>       <span class="comment"># 关闭所有celery进程</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-celery配置与基本使用&quot;&gt;&lt;a href=&quot;#1-celery配置与基本使用&quot; class=&quot;headerlink&quot; title=&quot;1.celery配置与基本使用&quot;&gt;&lt;/a&gt;1.celery配置与基本使用&lt;/h1&gt;&lt;h3 id=&quot;1-1-安装celery&quot;</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day04" scheme="https://tsblog.cn/categories/python/SYL/day04/"/>
    
    
  </entry>
  
  <entry>
    <title>05.检查用户名是否使用接口</title>
    <link href="https://tsblog.cn/pages/7bc556/"/>
    <id>https://tsblog.cn/pages/7bc556/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-django添加检查用户名和手机号数量接口"><a href="#1-django添加检查用户名和手机号数量接口" class="headerlink" title="1.django添加检查用户名和手机号数量接口"></a>1.django添加检查用户名和手机号数量接口</h1><h3 id="1-1-在user-urls-py中添加"><a href="#1-1-在user-urls-py中添加" class="headerlink" title="1.1 在user/urls.py中添加"></a>1.1 在<code>user/urls.py</code>中添加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;count/&#x27;</span>, views.RegCountView.as_view()),  <span class="comment"># 查询用户名手机号使用量的视图,  /user/count/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-在user-views-py中添加视图函数"><a href="#1-2-在user-views-py中添加视图函数" class="headerlink" title="1.2 在user/views.py中添加视图函数"></a>1.2 在<code>user/views.py</code>中添加视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询用户数量接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegCountView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 注册时需要验证的用户名和手机号是否使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 接收参数:  验证的内容type: username/phone,  data: &#x27;用户名&#x27; 或者 &#x27;手机号&#x27;,</span></span><br><span class="line">        datatype = request.data.get(<span class="string">&#x27;type&#x27;</span>)</span><br><span class="line">        data = request.data.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([data, datatype]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;参数不完整&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> datatype == <span class="string">&#x27;username&#x27;</span>:</span><br><span class="line">            count = User.objects.<span class="built_in">filter</span>(username=data).count()</span><br><span class="line">        <span class="keyword">if</span> datatype == <span class="string">&#x27;phone&#x27;</span>:</span><br><span class="line">            count = User.objects.<span class="built_in">filter</span>(phone=data).count()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;查询成功&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;type&#x27;</span>: datatype, <span class="string">&#x27;count&#x27;</span>: count&#125;&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2.测试接口"></a>2.测试接口</h1><ul><li>测试接口URL</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/count/</span></span><br></pre></td></tr></table></figure><ul><li>演示结果</li></ul><p><img src="./assets/image-20200922112242379.png" style="width: 600px; margin-left: 50px;"> </img></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-django添加检查用户名和手机号数量接口&quot;&gt;&lt;a href=&quot;#1-django添加检查用户名和手机号数量接口&quot; class=&quot;headerlink&quot; title=&quot;1.django添加检查用户名和手机号数量接口&quot;&gt;&lt;/a&gt;1.django添加检查用户名和手</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day04" scheme="https://tsblog.cn/categories/python/SYL/day04/"/>
    
    
  </entry>
  
  <entry>
    <title>07.后端注册接口完善</title>
    <link href="https://tsblog.cn/pages/ba07d2/"/>
    <id>https://tsblog.cn/pages/ba07d2/</id>
    <published>2021-03-10T03:25:49.000Z</published>
    <updated>2021-03-10T06:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-完善注册接口"><a href="#1-完善注册接口" class="headerlink" title="1.完善注册接口"></a>1.完善注册接口</h1><p><img src="./assets/image-20201104150103303.png" style="width: 700px; margin-left: 50px;"> </img></p><h3 id="1-1-修改user-views-py中完善视图函数"><a href="#1-1-修改user-views-py中完善视图函数" class="headerlink" title="1.1 修改user/views.py中完善视图函数"></a>1.1 修改<code>user/views.py</code>中完善视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户注册, 权限是: 匿名用户可访问</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        接收用户名,密码,手机号和验证码, 前端校验两遍一致性, 注册成功后返回成功, 然后用户自行登录获取token</span></span><br><span class="line"><span class="string">        1. 用户名</span></span><br><span class="line"><span class="string">        2. 密码</span></span><br><span class="line"><span class="string">        3. 手机号</span></span><br><span class="line"><span class="string">        4. 短信验证码</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return:  &#123;&#x27;code&#x27;:0,&#x27;msg&#x27;:&#x27;注册成功&#x27;&#125;</span></span><br><span class="line"><span class="string">        code: &quot;260361&quot;</span></span><br><span class="line"><span class="string">        password: &quot;123123&quot;</span></span><br><span class="line"><span class="string">        phone: &quot;13303479527&quot;</span></span><br><span class="line"><span class="string">        username: &quot;liangxuepeng&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 1.获取参数：&#123;username: &quot;fly&quot;, password: &quot;111111&quot;, phone: &quot;18538752522&quot;, code: &quot;615003&quot;&#125;</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        phone = request.data.get(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line">        code = request.data.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        passwrod = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.检查参数是否完整</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([username, passwrod, phone, code]):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;参数不全&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.验证手机验证码</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;verify_code&#x27;</span>)</span><br><span class="line">        code_redis = redis_client.get(phone)</span><br><span class="line">        <span class="keyword">if</span> code_redis:</span><br><span class="line">            code_redis = code_redis.decode()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> code == code_redis:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;手机验证码错误&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.创建用户</span></span><br><span class="line">        user = User(username=username, phone=phone)</span><br><span class="line">        user.set_password(passwrod)</span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;注册成功&#x27;</span>,<span class="string">&#x27;data&#x27;</span>:&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-完善注册接口&quot;&gt;&lt;a href=&quot;#1-完善注册接口&quot; class=&quot;headerlink&quot; title=&quot;1.完善注册接口&quot;&gt;&lt;/a&gt;1.完善注册接口&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;./assets/image-20201104150103303.png</summary>
      
    
    
    
    <category term="python" scheme="https://tsblog.cn/categories/python/"/>
    
    <category term="SYL" scheme="https://tsblog.cn/categories/python/SYL/"/>
    
    <category term="day04" scheme="https://tsblog.cn/categories/python/SYL/day04/"/>
    
    
  </entry>
  
</feed>
