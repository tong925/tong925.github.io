<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/05/hello-world/"/>
      <url>/2022/03/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tt</title>
      <link href="//pages/f77974/"/>
      <url>//pages/f77974/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/edf3d4/"/>
      <url>//pages/edf3d4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业"><a href="#1-作业" class="headerlink" title="1.作业"></a>1.作业</h1><ul><li>cookie与session的原理及区别</li><li>session与JWT比较</li><li>JWT原理</li><li>JWT安装与配置<ul><li>1.登录接口</li><li>2.刷新接口</li><li>3.自定义返回格式</li></ul></li><li>完成注册接口</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day02 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.初始化项目结构__回顾</title>
      <link href="//pages/07aec8/"/>
      <url>//pages/07aec8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初始化项目结构"><a href="#1-初始化项目结构" class="headerlink" title="1.初始化项目结构"></a>1.初始化项目结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">└─shiyanlou_project</span><br><span class="line">    │  .gitignore</span><br><span class="line">    │  README.en.md</span><br><span class="line">    │  README.md</span><br><span class="line">    │</span><br><span class="line">    ├─celery_task            <span class="comment"># 用来存放celery相关文件</span></span><br><span class="line">    │      __init__.py</span><br><span class="line">    │</span><br><span class="line">    ├─db                     <span class="comment"># 数据库相关：1.数据库初始化sql脚本； 2.数据库维护脚本，清理，备份脚本</span></span><br><span class="line">    ├─logs                   <span class="comment"># 存放日志</span></span><br><span class="line">    ├─packages               <span class="comment"># 外部包，原始的，未配置的：1.七牛云sdk；2.阿里云短信；</span></span><br><span class="line">    ├─scrips                 <span class="comment"># 脚本目录：1.定时任务脚本；2.页面静态化脚本；处理项目脚本</span></span><br><span class="line">    └─uwsgi_conf             <span class="comment"># uwsgi配置，日志，pid</span></span><br><span class="line">    │</span><br><span class="line">    │</span><br><span class="line">    └─syl</span><br><span class="line">        │  apps （python包）                   <span class="comment"># Django各种app模块 </span></span><br><span class="line">        │  libs （python包）                   <span class="comment"># 七牛云sdk+配置</span></span><br><span class="line">        │  utils （python包）                  <span class="comment"># 小工具，常用函数</span></span><br><span class="line">        │  static                 </span><br><span class="line">        │  templates</span><br><span class="line">        │  syl（项目配置）</span><br><span class="line">        │  manager.py</span><br></pre></td></tr></table></figure><h1 id="2-创建Django项目"><a href="#2-创建Django项目" class="headerlink" title="2.创建Django项目"></a>2.创建Django项目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@dev:shiyanlou_project<span class="comment"># workon syl</span></span><br><span class="line">(syl) root@dev:shiyanlou_project<span class="comment"># cd /aaa/shiyanlou_project/</span></span><br><span class="line">(syl) root@dev:shiyanlou_project<span class="comment"># django-admin startproject syl</span></span><br><span class="line"><span class="comment"># 注：创建三个python包， apps、utils、libs</span></span><br></pre></td></tr></table></figure><h1 id="3-创建user模型"><a href="#3-创建user模型" class="headerlink" title="3.创建user模型"></a>3.创建user模型</h1><h3 id="3-1-创建用户模型user"><a href="#3-1-创建用户模型user" class="headerlink" title="3.1 创建用户模型user"></a>3.1 创建用户模型user</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ../manage.py startapp user  <span class="comment"># 创建user模型</span></span><br></pre></td></tr></table></figure><h3 id="3-2-在setting-py中注册user模型（第一步）"><a href="#3-2-在setting-py中注册user模型（第一步）" class="headerlink" title="3.2 在setting.py中注册user模型（第一步）"></a>3.2 在setting.py中注册user模型（第一步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;user.apps.UserConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 注：pycharm无法联想，需要把apps文件夹设置为源根</span></span><br></pre></td></tr></table></figure><h3 id="3-3-syl-x2F-urls-py添加路由（第二步）"><a href="#3-3-syl-x2F-urls-py添加路由（第二步）" class="headerlink" title="3.3 syl&#x2F;urls.py添加路由（第二步）"></a>3.3 syl&#x2F;urls.py添加路由（第二步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;user/&#x27;</span>, include(<span class="string">&#x27;user.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-4-syl-x2F-settings-py中添加apps路径"><a href="#3-4-syl-x2F-settings-py中添加apps路径" class="headerlink" title="3.4 syl&#x2F;settings.py中添加apps路径"></a>3.4 syl&#x2F;settings.py中添加apps路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把apps目录插入，到系统包搜索路径第一个位置中</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR,<span class="string">&#x27;apps&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-5-创建-user-x2F-urls-py路由文件（第三步）"><a href="#3-5-创建-user-x2F-urls-py路由文件（第三步）" class="headerlink" title="3.5 创建 user&#x2F;urls.py路由文件（第三步）"></a>3.5 创建 user&#x2F;urls.py路由文件（第三步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="4-重写Django默认认证用户模型"><a href="#4-重写Django默认认证用户模型" class="headerlink" title="4.重写Django默认认证用户模型"></a>4.重写Django默认认证用户模型</h1><h3 id="4-1-user-x2F-models-py创建模型"><a href="#4-1-user-x2F-models-py创建模型" class="headerlink" title="4.1 user&#x2F;models.py创建模型"></a>4.1 user&#x2F;models.py创建模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.CharField(<span class="string">&#x27;手机号&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;user&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">    nick_name = models.CharField(<span class="string">&#x27;昵称&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;地址&#x27;</span>,max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_user&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-syl-x2F-settings-py中注册自己的用户模型类"><a href="#4-2-syl-x2F-settings-py中注册自己的用户模型类" class="headerlink" title="4.2 syl&#x2F;settings.py中注册自己的用户模型类"></a>4.2 syl&#x2F;settings.py中注册自己的用户模型类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册自己的用户模型类: 应用名.模型名</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;user.User&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-配置mysql"><a href="#4-3-配置mysql" class="headerlink" title="4.3 配置mysql"></a>4.3 配置mysql</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1.创建mysql数据库&#x27;&#x27;&#x27;</span></span><br><span class="line">mysql&gt; create database syldb charset utf8;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.在syl/settings.py中配置mysql&#x27;&#x27;&#x27;</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;syldb&#x27;</span>,              <span class="comment"># 指定数据库名称：MyCRM</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4生成表"><a href="#4-4生成表" class="headerlink" title="4.4生成表"></a>4.4生成表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manager.py makemigrations</span><br><span class="line">python manager.py migrate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day02 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.ModelViewSet+ModelSerializer使用__回顾</title>
      <link href="//pages/67c076/"/>
      <url>//pages/67c076/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DRF初始化"><a href="#1-DRF初始化" class="headerlink" title="1.DRF初始化"></a>1.DRF初始化</h1><h3 id="1-1-安装DjangoRestFramework"><a href="#1-1-安装DjangoRestFramework" class="headerlink" title="1.1 安装DjangoRestFramework"></a>1.1 安装DjangoRestFramework</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework==<span class="number">3.11</span><span class="number">.1</span></span><br><span class="line">pip install django-<span class="built_in">filter</span>==<span class="number">2.3</span><span class="number">.0</span>             <span class="comment"># 过滤器</span></span><br><span class="line">pip install markdown                         <span class="comment"># Markdown support for the browsable API.</span></span><br></pre></td></tr></table></figure><h3 id="1-2-在syl-x2F-settings-py中注册"><a href="#1-2-在syl-x2F-settings-py中注册" class="headerlink" title="1.2 在syl&#x2F;settings.py中注册"></a>1.2 在syl&#x2F;settings.py中注册</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django_filters&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-3-syl-x2F-settings-py配置DRF"><a href="#1-3-syl-x2F-settings-py配置DRF" class="headerlink" title="1.3 syl&#x2F;settings.py配置DRF"></a>1.3 syl&#x2F;settings.py配置DRF</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤器</span></span><br><span class="line"><span class="comment"># 1,安装 django-filter</span></span><br><span class="line"><span class="comment"># 2,注册应用</span></span><br><span class="line"><span class="comment"># 3,配置settings, 在view里配置可过滤的字段</span></span><br><span class="line"><span class="comment"># 4,使用 查询字符串携带过滤信息</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 文档报错： AttributeError: ‘AutoSchema’ object has no attribute ‘get_link’</span></span><br><span class="line">    <span class="comment"># 用下面的设置可以解决</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,</span><br><span class="line">    <span class="comment"># 默认设置是:</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_SCHEMA_CLASS&#x27;: &#x27;rest_framework.schemas.openapi.AutoSchema&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 异常处理器</span></span><br><span class="line">    <span class="comment"># &#x27;EXCEPTION_HANDLER&#x27;: &#x27;user.utils.exception_handler&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Base API policies</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.FormParser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.MultiPartParser&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 1.认证器</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,  <span class="comment"># 使用session时的认证器</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>     <span class="comment"># 提交表单时的认证器</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">#2.权限配置（全局）： 顺序靠上的严格</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAdminUser&#x27;,  # 管理员可以访问</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAuthenticated&#x27;,  # 认证用户可以访问</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAuthenticatedOrReadOnly&#x27;,  # 认证用户可以访问, 否则只能读取</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.AllowAny&#x27;,  # 所有用户都可以访问</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">#3.限流</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">#3.1限流策略</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;100/hour&#x27;</span>,    <span class="comment"># 认证用户每小时10次</span></span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;3/day&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;DEFAULT_CONTENT_NEGOTIATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.negotiation.DefaultContentNegotiation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_METADATA_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.metadata.SimpleMetadata&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSIONING_CLASS&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">#4.分页（全局）：全局分页器, 例如 省市区的数据自定义分页器, 不需要分页</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="comment"># 每页返回数量</span></span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">10</span>,  <span class="comment"># 默认 None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#5.过滤器后端</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;django_filters.rest_framework.backends.DjangoFilterBackend&#x27;, 包路径有变化</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">#5.1过滤排序（全局）：Filtering 过滤排序</span></span><br><span class="line">    <span class="string">&#x27;SEARCH_PARAM&#x27;</span>: <span class="string">&#x27;search&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ORDERING_PARAM&#x27;</span>: <span class="string">&#x27;ordering&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;NUM_PROXIES&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">#6.版本控制：Versioning  接口版本控制</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSION&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;ALLOWED_VERSIONS&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;VERSION_PARAM&#x27;</span>: <span class="string">&#x27;version&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Authentication  认证</span></span><br><span class="line">    <span class="comment"># 未认证用户使用的用户类型</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_USER&#x27;</span>: <span class="string">&#x27;django.contrib.auth.models.AnonymousUser&#x27;</span>,</span><br><span class="line">    <span class="comment"># 未认证用户使用的Token值</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># View configuration</span></span><br><span class="line">    <span class="string">&#x27;VIEW_NAME_FUNCTION&#x27;</span>: <span class="string">&#x27;rest_framework.views.get_view_name&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;VIEW_DESCRIPTION_FUNCTION&#x27;</span>: <span class="string">&#x27;rest_framework.views.get_view_description&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;NON_FIELD_ERRORS_KEY&#x27;</span>: <span class="string">&#x27;non_field_errors&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Testing</span></span><br><span class="line">    <span class="string">&#x27;TEST_REQUEST_RENDERER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.MultiPartRenderer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;TEST_REQUEST_DEFAULT_FORMAT&#x27;</span>: <span class="string">&#x27;multipart&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Hyperlink settings</span></span><br><span class="line">    <span class="string">&#x27;URL_FORMAT_OVERRIDE&#x27;</span>: <span class="string">&#x27;format&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;FORMAT_SUFFIX_KWARG&#x27;</span>: <span class="string">&#x27;format&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;URL_FIELD_NAME&#x27;</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Encoding</span></span><br><span class="line">    <span class="string">&#x27;UNICODE_JSON&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;COMPACT_JSON&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;STRICT_JSON&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;COERCE_DECIMAL_TO_STRING&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;UPLOADED_FILES_USE_URL&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Browseable API</span></span><br><span class="line">    <span class="string">&#x27;HTML_SELECT_CUTOFF&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">&#x27;HTML_SELECT_CUTOFF_TEXT&#x27;</span>: <span class="string">&quot;More than &#123;count&#125; items...&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Schemas</span></span><br><span class="line">    <span class="string">&#x27;SCHEMA_COERCE_PATH_PK&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;SCHEMA_COERCE_METHOD_NAMES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;retrieve&#x27;</span>: <span class="string">&#x27;read&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;destroy&#x27;</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-创建user-x2F-serializers-py写序列化器"><a href="#1-4-创建user-x2F-serializers-py写序列化器" class="headerlink" title="1.4 创建user&#x2F;serializers.py写序列化器"></a>1.4 创建user&#x2F;serializers.py写序列化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">address_validate</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 独立校验器</span></span><br><span class="line">    <span class="comment"># raise serializers.ValidationError(&#x27;请填写实际地址&#x27;)  # 有错就抛出异常</span></span><br><span class="line">    <span class="comment"># 没错就返回数据</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 1.独立校验器：重新设定字段, 替换掉模型中的设定, 重新设定地址的长度为5</span></span><br><span class="line">    address = serializers.CharField(max_length=<span class="number">255</span>, min_length=<span class="number">5</span>, validators=[address_validate])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.单一字段验证, 验证地址</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_address</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&#x27;测试&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;请填写实际地址&#x27;</span>)  <span class="comment"># 有错就抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> data  <span class="comment"># 没错就返回结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_phone</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># 不符合手机号格式</span></span><br><span class="line">        <span class="comment"># raise serializers.ValidationError(&#x27;手机号格式不正确&#x27;)</span></span><br><span class="line">        model = self.root.Meta.model</span><br><span class="line">        num = model.objects.<span class="built_in">filter</span>(phone=data).count()</span><br><span class="line">        <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;手机号已存在&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.所有属性验证器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="comment"># 所有属性验证器</span></span><br><span class="line">        <span class="comment"># self.context 中有request和view上下文</span></span><br><span class="line">        <span class="comment"># self.context[&#x27;view&#x27;].action 可以取到动作</span></span><br><span class="line">        <span class="comment"># attrs 是需要序列化的数据</span></span><br><span class="line">        <span class="comment"># raise serializers.ValidationError(&#x27;xxx错误&#x27;)  # 有问题报错</span></span><br><span class="line">        <span class="keyword">return</span> attrs  <span class="comment"># 没问题返回数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        <span class="comment"># fields = (&#x27;id&#x27;, ) # 临时添加字段也需要写在这里</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># 所有字段</span></span><br><span class="line">        <span class="comment"># exclude = [&#x27;id&#x27;]  # 排除 id 字段</span></span><br><span class="line">        read_only_fields = (<span class="string">&#x27;&#x27;</span>,)  <span class="comment"># 指定字段为 read_only,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 扩展address： extra_kwargs = &#123;&#125;  # 局部替换某些字段的设定, 或者新增设定</span></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;min_length&quot;</span>: <span class="number">5</span>,  <span class="comment"># 给地址增加 最小长度限制</span></span><br><span class="line">                <span class="string">&quot;default&quot;</span>: <span class="string">&#x27;默认测试地址&#x27;</span>,  <span class="comment"># 增加默认值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserUnActiveSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;is_active&#x27;</span>)  <span class="comment"># 临时添加字段也需要写在这里</span></span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;  # 所有字段</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-DRF-认证、权限、限流、分页、过滤、序列化"><a href="#2-DRF-认证、权限、限流、分页、过滤、序列化" class="headerlink" title="2. DRF 认证、权限、限流、分页、过滤、序列化"></a>2. DRF 认证、权限、限流、分页、过滤、序列化</h1><h3 id="2-1-user-x2F-urls-py"><a href="#2-1-user-x2F-urls-py" class="headerlink" title="2.1 user&#x2F;urls.py"></a>2.1 user&#x2F;urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter, DefaultRouter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动生成路由方法, 必须使用视图集</span></span><br><span class="line"><span class="comment"># router = SimpleRouter()  # 没有根路由  /user/ 无法识别</span></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 有根路由</span></span><br><span class="line">router.register(<span class="string">r&#x27;user&#x27;</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>))  <span class="comment"># 认证地址</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 模块地址</span></span><br></pre></td></tr></table></figure><h3 id="2-2-user-x2F-views-py"><a href="#2-2-user-x2F-views-py" class="headerlink" title="2.2 user&#x2F;views.py"></a>2.2 user&#x2F;views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BasicAuthentication, SessionAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny, IsAdminUser, IsAuthenticated, IsAuthenticatedOrReadOnly</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission, SAFE_METHODS</span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> user.serializers <span class="keyword">import</span> UserSerializer, UserUnActiveSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 需要认证才能访问的视图</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页（局部）：自定义分页器 局部</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageNum</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 查询字符串中代表每页返回数据数量的参数名, 默认值: None</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span></span><br><span class="line">    <span class="comment"># 查询字符串中代表页码的参数名, 有默认值: page</span></span><br><span class="line">    <span class="comment"># page_query_param = &#x27;page&#x27;</span></span><br><span class="line">    <span class="comment"># 一页中最多的结果条数</span></span><br><span class="line">    max_page_size = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义权限（局部）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPermission</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="built_in">print</span>(view.kwargs.get(<span class="string">&quot;pk&quot;</span>), request.user.<span class="built_in">id</span>)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断用户对模型有没有访问权&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 任何用户对使用此权限类的视图都有访问权限</span></span><br><span class="line">        <span class="built_in">print</span>(request)</span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="comment"># 管理员对用户模型有访问权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> view.kwargs.get(<span class="string">&#x27;pk&#x27;</span>) == <span class="built_in">str</span>(request.user.<span class="built_in">id</span>):</span><br><span class="line">            <span class="comment"># 携带的id和用户的id相同时有访问权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取单个数据时,判断用户对某个数据对象是否有访问权限&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> request.user.<span class="built_in">id</span> == obj.<span class="built_in">id</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    完成产品的增删改查</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer  <span class="comment"># 优先使用 get_serializer_class 返回的序列化器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 1.认证：自定义认证类, 自定义会覆盖全局配置</span></span><br><span class="line">    <span class="comment"># authentication_classes = (BasicAuthentication, SessionAuthentication)</span></span><br><span class="line">    <span class="comment"># # 2.权限：自定义权限类</span></span><br><span class="line">    <span class="comment"># permission_classes = (MyPermission,)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.分页：自定义分页器 覆盖全局配置</span></span><br><span class="line">    pagination_class = PageNum</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.限流：自定义限流类</span></span><br><span class="line">    throttle_classes = [UserRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.过滤：指定过滤方法类, 排序方法类, 一个或多个</span></span><br><span class="line">    filter_backends = (DjangoFilterBackend, OrderingFilter)  <span class="comment"># 同时支持过滤和排序</span></span><br><span class="line">    <span class="comment"># 5.1指定排序字段, 不设置, 排序功能不起效</span></span><br><span class="line">    ordering_fields = (<span class="string">&#x27;date_joined&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)              <span class="comment"># ?ordering=-id</span></span><br><span class="line">    <span class="comment"># 5.2指定过滤字段, 不设置, 过滤功能不起效</span></span><br><span class="line">    filter_fields = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;is_active&#x27;</span>)   <span class="comment"># ?username=tom&amp;phone=&amp;is_active=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据不同的请求, 获得不同的序列化器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">&#x27;unactived&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> UserUnActiveSerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unactived</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取查询集, 过滤出未激活的用户</span></span><br><span class="line">        qs = self.queryset.<span class="built_in">filter</span>(is_active=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 使用序列化器, 序列化查询集, 并且是</span></span><br><span class="line">        ser = self.get_serializer(qs, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure><h1 id="3-测试接口"><a href="#3-测试接口" class="headerlink" title="3.测试接口"></a>3.测试接口</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查询所有用户</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/</span><br><span class="line"><span class="comment">#2.查询id=1的用户</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/<span class="number">1</span>/</span><br><span class="line"><span class="comment">#3.查询 用户名（tom），激活的用户</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/?username=tom&amp;phone=&amp;is_active=true</span><br><span class="line"><span class="comment">#4.查询所有用户 用id 反向排序</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/?ordering=-<span class="built_in">id</span></span><br><span class="line"><span class="comment">#5.查询用户表中第一页，每页显示一条数据</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/user/user/?page=<span class="number">1</span>&amp;page_size=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200920220030900.png" style="width: 600px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;count&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;next&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/user/user/?is_active=&amp;page=3&amp;page_size=1&amp;page_size=1&amp;phone=&amp;username=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;previous&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/user/user/?is_active=&amp;page_size=1&amp;page_size=1&amp;phone=&amp;username=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;results&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: <span class="string">&quot;河南郑州市&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;chn@1099&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_login&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;is_superuser&quot;</span>: false,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            <span class="string">&quot;first_name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;is_staff&quot;</span>: false,</span><br><span class="line">            <span class="string">&quot;is_active&quot;</span>: true,</span><br><span class="line">            <span class="string">&quot;date_joined&quot;</span>: <span class="string">&quot;2020-09-20T13:41:58.528732Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;18538752511&quot;</span>,</span><br><span class="line">            <span class="string">&quot;img&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;nick_name&quot;</span>: <span class="string">&quot;吊炸天&quot;</span>,</span><br><span class="line">            <span class="string">&quot;groups&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;user_permissions&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day02 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.JWT原理</title>
      <link href="//pages/1d30c0/"/>
      <url>//pages/1d30c0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-COOKIE使用和优缺点"><a href="#1-COOKIE使用和优缺点" class="headerlink" title="1.COOKIE使用和优缺点"></a>1.COOKIE使用和优缺点</h1><p><a href="https://www.cnblogs.com/xiaonq/p/11094480.html">https://www.cnblogs.com/xiaonq/p/11094480.html</a></p><h3 id="1-1-cookie原理：用户名-密码"><a href="#1-1-cookie原理：用户名-密码" class="headerlink" title="1.1 cookie原理：用户名+密码"></a>1.1 cookie原理：<code>用户名+密码</code></h3><ul><li>cookie是保存在用户浏览器端，用户名和密码等明文信息</li></ul><p><img src="././assets/image-20201005135948317.png" style="width: 500px; margin-left: 50px;"> </img></p><h3 id="1-2-session使用原理"><a href="#1-2-session使用原理" class="headerlink" title="1.2 session使用原理"></a>1.2 session使用原理</h3><ul><li><code>session是存储在服务器端的一段字符串,相当于字典的key</code></li></ul><p><img src="./assets/image-20201005141004241.png" style="width: 700px; margin-left: 50px;"> </img></p><ul><li>1.用户向服务器发送用户名和密码。</li><li>2.验证服务器后，相关数据（如用户角色，登录时间等）将保存在当前会话中。</li><li>3.服务器向用户返回session_id，session信息都会写入到用户的Cookie。</li><li>4.用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。</li><li>5.服务器收到session_id并对比之前保存的数据，确认用户的身份。</li></ul><p><img src="./assets/image-20201005134822521.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="1-3-session使用缺点"><a href="#1-3-session使用缺点" class="headerlink" title="1.3 session使用缺点"></a>1.3 session使用缺点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU</span><br><span class="line">主板</span><br><span class="line">显卡</span><br><span class="line">内存条（把硬盘中的程序读取到内存中，就变成了进程）</span><br><span class="line">硬盘（1T， 500G）（可运行的代码存储在硬盘中，就是程序）</span><br><span class="line">IO操作（把硬盘中或者网络中的数据读取到内存中就是IO操作）</span><br></pre></td></tr></table></figure><ul><li><code>session默认存储在登录的那台服务器的内存中。</code></li><li>1.这种模式最大的问题是，没有分布式架构，无法支持横向扩展。</li><li>2.如果使用一个服务器，该模式完全没有问题。</li><li>3.但是，如果它是服务器群集或面向服务的跨域体系结构的话，则需要一个统一的session数据库库来保存会话数据实现共享，</li><li>4.这样负载均衡下的每个服务器才可以正确的验证用户身份。</li></ul><h3 id="1-4-常用解决session方法"><a href="#1-4-常用解决session方法" class="headerlink" title="1.4 常用解决session方法"></a>1.4 常用解决session方法</h3><ul><li>1.一种解决方案是通过持久化session数据，写入数据库或文件持久层等。</li><li>2.收到请求后，验证服务从持久层请求数据。</li><li>3.依赖于持久层的数据库或者问题系统，会有单点风险，如果持久层失败，整个认证体系都会挂掉。</li></ul><p><img src="./assets/image-20201005135211140.png" style="width: 600px; margin-left: 50px;"> </img></p><ul><li>第一种：没有session持久化<ul><li>没有分布式架构，无法支持横向扩展</li><li>session默认存储在内存中，如果把代码部署在多台机器上，session保存到了其中某一台机器的内存中</li><li>用户如果在A机器上登录，只有A机器的内存中存了这个session的key，如果请求nginx路由到B机器，B机器内存中没有这个session数据，就需要从新登录</li></ul></li><li>第二种：写入数据库或文件持久层（<code>session+redis</code>）<ul><li>解决了横向扩展问题</li><li>数据库持久层出现问题，所有集群都没办法登录，<code>单点故障</code></li><li>如果数据放到mysql中，用户量过大，查询很慢，效率很低</li></ul></li></ul><h1 id="2-JWT介绍"><a href="#2-JWT介绍" class="headerlink" title="2. JWT介绍"></a>2. JWT介绍</h1><h3 id="2-1-jwt原理"><a href="#2-1-jwt原理" class="headerlink" title="2.1 jwt原理"></a>2.1 jwt原理</h3><ul><li>最简单理解：jwt本质就是，<code>把用户信息通过加密后生成的一个字符串</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;UserName&quot;</span>: <span class="string">&quot;Chongchong&quot;</span>,</span><br><span class="line"><span class="string">&quot;Role&quot;</span>: <span class="string">&quot;Admin&quot;</span>,</span><br><span class="line"><span class="string">&quot;Expire&quot;</span>: <span class="string">&quot;2018-08-08 20:15:56&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">之后，当用户与服务器通信时，客户在请求中发回JSON对象，服务器仅依赖于这个JSON对象来标识用户。</span><br><span class="line">为了防止用户篡改数据，服务器将在生成对象时添加签名（有关详细信息，请参阅下文）。</span><br><span class="line">服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展</span><br></pre></td></tr></table></figure><h3 id="2-2-JWT的数据结构"><a href="#2-2-JWT的数据结构" class="headerlink" title="2.2 JWT的数据结构"></a>2.2 JWT的数据结构</h3><ul><li>1）jwt头：JWT头部分是一个描述JWT元数据的JSON对象</li><li>2）有效载荷：七个默认字段+自定义私有字段（用户信息）</li><li>3）签名&#x3D;HMACSHA256(<code>base64UrlEncode(header)</code> + “.” + <code>base64UrlEncode(payload)</code>,secret)</li></ul><p><img src="./assets/image-20201005145547397.png" style="width: 600px; margin-left: 50px;"> </img></p><blockquote><p>第一部分：<code>JWT头</code></p></blockquote><ul><li><code>base64UrlEncode(header)</code>—&gt;字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line"><span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 1）alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；</span></span><br><span class="line"><span class="comment"># 2）typ属性表示令牌的类型，JWT令牌统一写为JWT。</span></span><br><span class="line"><span class="comment"># 3）最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</span></span><br></pre></td></tr></table></figure><blockquote><p>第二部分：<code>有效载荷</code>   没有敏感数据的用户信息</p></blockquote><ul><li><code>base64UrlEncode(payload)</code>—&gt;字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">iss：发行人</span></span><br><span class="line"><span class="string">exp：到期时间</span></span><br><span class="line"><span class="string">sub：主题</span></span><br><span class="line"><span class="string">aud：用户</span></span><br><span class="line"><span class="string">nbf：在此之前不可用</span></span><br><span class="line"><span class="string">iat：发布时间</span></span><br><span class="line"><span class="string">jti：JWT ID用于标识该JWT</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、除以上默认字段外，我们还可以自定义私有字段，如下例：</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;chongchong&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>: true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、注意</span></span><br><span class="line">默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</span><br><span class="line">JSON对象也使用Base64 URL算法转换为字符串保存。</span><br></pre></td></tr></table></figure><blockquote><p>第三部分：<code>签名哈希</code></p></blockquote><ul><li>签名&#x3D;HMACSHA256(<code>base64UrlEncode(header)</code> + “.” + <code>base64UrlEncode(payload)</code>,secret)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</span></span><br><span class="line"><span class="comment"># 2.首先，需要指定一个密码（secret），该密码仅仅为保存在服务器中，并且不能向用户公开。</span></span><br><span class="line"><span class="comment"># 3.然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。</span></span><br><span class="line"><span class="comment"># 4.HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret)</span></span><br><span class="line"><span class="comment"># 5.在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用&quot;.&quot;分隔，就构成整个JWT对象。</span></span><br></pre></td></tr></table></figure><h3 id="2-3-jwt核心"><a href="#2-3-jwt核心" class="headerlink" title="2.3 jwt核心"></a>2.3 jwt核心</h3><ul><li>1）给用户颁发的token值相当于一把锁，服务器端的秘钥相当于一把钥匙</li><li>2）每次客户端请求都会携带这把锁，服务器端用秘钥去开这把锁，若果无法打开就证明是伪造的</li></ul><h3 id="2-4-jwt特点分析"><a href="#2-4-jwt特点分析" class="headerlink" title="2.4 jwt特点分析"></a>2.4 jwt特点分析</h3><ul><li>1、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限，一旦JWT签发，在有效期内将会一直有效。</li><li>2、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。</li><li>3、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</li><li>4、JWT不仅可用于认证，还可用于信息交换，善用JWT有助于减少服务器请求数据库的次数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day02 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.JWT安装配置</title>
      <link href="//pages/a71095/"/>
      <url>//pages/a71095/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.登录接口</span><br><span class="line">2.刷新接口</span><br><span class="line">3.自定义返回格式</span><br></pre></td></tr></table></figure><ul><li>可用地方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;第一：提供三个视图函数&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># obtain_jwt_token = ObtainJSONWebToken.as_view()      # 获取token</span></span><br><span class="line"><span class="comment"># refresh_jwt_token = RefreshJSONWebToken.as_view()    # 刷新token</span></span><br><span class="line"><span class="comment"># verify_jwt_token = VerifyJSONWebToken.as_view()      # 修改token</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;第二：jwt_response_payload_handler可以重写返回&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="1-JWT安装配置"><a href="#1-JWT安装配置" class="headerlink" title="1.JWT安装配置"></a>1.JWT安装配置</h1><h3 id="1-1-安装JWT"><a href="#1-1-安装JWT" class="headerlink" title="1.1 安装JWT"></a>1.1 安装JWT</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt==1.11.0</span><br></pre></td></tr></table></figure><h3 id="1-2-syl-settings-py配置jwt载荷中的有效期设置"><a href="#1-2-syl-settings-py配置jwt载荷中的有效期设置" class="headerlink" title="1.2 syl/settings.py配置jwt载荷中的有效期设置"></a>1.2 <code>syl/settings.py</code>配置jwt载荷中的有效期设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># jwt载荷中的有效期设置</span></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="comment"># 1.token前缀：headers中 Authorization 值的前缀</span></span><br><span class="line">    <span class="string">&#x27;JWT_AUTH_HEADER_PREFIX&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">    <span class="comment"># 2.token有效期：一天有效</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="comment"># 3.刷新token：允许使用旧的token换新token，接口对接需要设置为true</span></span><br><span class="line">    <span class="string">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 4.token有效期：token在24小时内过期, 可续期token</span></span><br><span class="line">    <span class="string">&#x27;JWT_REFRESH_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(hours=<span class="number">24</span>),</span><br><span class="line">    <span class="comment"># 5.自定义JWT载荷信息：自定义返回格式，需要手工创建</span></span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class="string">&#x27;user.utils.jwt_response_payload_handler&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-syl-settings-pyJWT结合DRF进行认证权限配置"><a href="#1-3-syl-settings-pyJWT结合DRF进行认证权限配置" class="headerlink" title="1.3 syl/settings.pyJWT结合DRF进行认证权限配置"></a>1.3 <code>syl/settings.py</code>JWT结合DRF进行认证权限配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在DRF配置文件中开启认证和权限</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 用户登陆认证方式</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,    <span class="comment"># 在DRF中配置JWT认证</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # 使用session时的认证器</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.BasicAuthentication&#x27;     # 提交表单时的认证器</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 权限配置, 顺序靠上的严格</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAdminUser&#x27;,                # 管理员可以访问</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,              <span class="comment"># 全局配置只有认证用户可以访问接口</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAuthenticatedOrReadOnly&#x27;,  # 认证用户可以访问, 否则只能读取</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.AllowAny&#x27;,                   # 所有用户都可以访问</span></span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-user-urls-py增加获取token接口和刷新token接口"><a href="#1-4-user-urls-py增加获取token接口和刷新token接口" class="headerlink" title="1.4 user/urls.py增加获取token接口和刷新token接口"></a>1.4 <code>user/urls.py</code>增加获取token接口和刷新token接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.views <span class="keyword">import</span> obtain_auth_token</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter, DefaultRouter</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token, refresh_jwt_token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动生成路由方法, 必须使用视图集</span></span><br><span class="line"><span class="comment"># router = SimpleRouter()  # 没有根路由  /user/ 无法识别</span></span><br><span class="line">router = DefaultRouter()   <span class="comment"># 有根路由</span></span><br><span class="line">router.register(<span class="string">r&#x27;user&#x27;</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),          <span class="comment"># 函数视图</span></span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),     <span class="comment"># 获取token，登录视图</span></span><br><span class="line">    path(<span class="string">&#x27;refresh/&#x27;</span>, refresh_jwt_token),  <span class="comment"># 刷新token</span></span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>)),  <span class="comment"># 认证地址</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 模块地址</span></span><br><span class="line"><span class="comment"># print(router.urls)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># obtain_jwt_token = ObtainJSONWebToken.as_view()      # 获取token</span></span><br><span class="line"><span class="comment"># refresh_jwt_token = RefreshJSONWebToken.as_view()    # 刷新token</span></span><br><span class="line"><span class="comment"># verify_jwt_token = VerifyJSONWebToken.as_view()      # 修改token</span></span><br></pre></td></tr></table></figure><h3 id="1-5-在user-x2F-utils-py中从写jwt-response-payload-handler"><a href="#1-5-在user-x2F-utils-py中从写jwt-response-payload-handler" class="headerlink" title="1.5 在user&#x2F;utils.py中从写jwt_response_payload_handler"></a>1.5 在user&#x2F;utils.py中从写jwt_response_payload_handler</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jwt_response_payload_handler</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span>, role=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义jwt认证成功返回数据</span></span><br><span class="line"><span class="string">    :token  返回的jwt</span></span><br><span class="line"><span class="string">    :user   当前登录的用户信息[对象]</span></span><br><span class="line"><span class="string">    :request 当前本次客户端提交过来的数据</span></span><br><span class="line"><span class="string">    :role 角色</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> user.first_name:</span><br><span class="line">        name = user.first_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name = user.username</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;authenticated&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: role,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user.username,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: user.email,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="2-postman测试接口"><a href="#2-postman测试接口" class="headerlink" title="2.postman测试接口"></a>2.postman测试接口</h1><h3 id="2-1-测试登录接口，获取token"><a href="#2-1-测试登录接口，获取token" class="headerlink" title="2.1 测试登录接口，获取token"></a>2.1 测试登录接口，获取token</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/login/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921112356369.png" style="width: 1000px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;自定义认证和权限优先级更高，可以覆盖settings.py中的 &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 自定义权限类</span></span><br><span class="line">permission_classes = (MyPermission,)</span><br><span class="line"><span class="comment"># 自定义认证类, 自定义会覆盖全局配置</span></span><br><span class="line">authentication_classes = (JSONWebTokenAuthentication,)</span><br></pre></td></tr></table></figure><h3 id="2-2-使用获得的token获取所有用户信息"><a href="#2-2-使用获得的token获取所有用户信息" class="headerlink" title="2.2 使用获得的token获取所有用户信息"></a>2.2 使用获得的token获取所有用户信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/user/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921115316697.png" style="width: 1000px; margin-left: 50px;"> </img></p><h1 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3.源码分析"></a>3.源码分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JSONWebTokenAPIView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base API View that various JWT interactions inherit from.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    permission_classes = ()</span><br><span class="line">    authentication_classes = ()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_context</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Extra context provided to the serializer class.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;request&#x27;</span>: self.request,</span><br><span class="line">            <span class="string">&#x27;view&#x27;</span>: self,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return the class to use for the serializer.</span></span><br><span class="line"><span class="string">        Defaults to using `self.serializer_class`.</span></span><br><span class="line"><span class="string">        You may want to override this if you need to provide different</span></span><br><span class="line"><span class="string">        serializations depending on the incoming request.</span></span><br><span class="line"><span class="string">        (Eg. admins get full serialization, others get basic serialization)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.serializer_class <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">            <span class="string">&quot;&#x27;%s&#x27; should either include a `serializer_class` attribute, &quot;</span></span><br><span class="line">            <span class="string">&quot;or override the `get_serializer_class()` method.&quot;</span></span><br><span class="line">            % self.__class__.__name__)</span><br><span class="line">        <span class="keyword">return</span> self.serializer_class</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return the serializer instance that should be used for validating and</span></span><br><span class="line"><span class="string">        deserializing input, and for serializing output.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        serializer_class = self.get_serializer_class()</span><br><span class="line">        kwargs[<span class="string">&#x27;context&#x27;</span>] = self.get_serializer_context()</span><br><span class="line">        <span class="keyword">return</span> serializer_class(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            user = serializer.<span class="built_in">object</span>.get(<span class="string">&#x27;user&#x27;</span>) <span class="keyword">or</span> request.user   <span class="comment"># User表对象</span></span><br><span class="line">            token = serializer.<span class="built_in">object</span>.get(<span class="string">&#x27;token&#x27;</span>)                 <span class="comment"># 获取到生成的token</span></span><br><span class="line">            response_data = jwt_response_payload_handler(token, user, request)</span><br><span class="line">            response = Response(response_data)</span><br><span class="line">            <span class="keyword">if</span> api_settings.JWT_AUTH_COOKIE:</span><br><span class="line">                expiration = (datetime.utcnow() +</span><br><span class="line">                              api_settings.JWT_EXPIRATION_DELTA)</span><br><span class="line">                response.set_cookie(api_settings.JWT_AUTH_COOKIE,</span><br><span class="line">                                    token,</span><br><span class="line">                                    expires=expiration,</span><br><span class="line">                                    httponly=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day02 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.配置django跨域</title>
      <link href="//pages/a4121f/"/>
      <url>//pages/a4121f/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置django跨域"><a href="#1-配置django跨域" class="headerlink" title="1.配置django跨域"></a>1.配置django跨域</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 安装包</span><br><span class="line">pip install django-cors-headers </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 注册应用</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,   <span class="comment"># 添加 django-cors-headers 使其可以进行 cors 跨域</span></span><br><span class="line">]</span><br><span class="line"><span class="number">3.</span> 添加中间件</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># 放在中间件第一个</span></span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"><span class="number">4.</span> 设置</span><br><span class="line"><span class="comment"># CORS跨域请求白名单设置</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 允许携带cookie</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day02 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.短信验证接口</title>
      <link href="//pages/a7e911/"/>
      <url>//pages/a7e911/</url>
      
        <content type="html"><![CDATA[<h1 id="1-注册容联云账号"><a href="#1-注册容联云账号" class="headerlink" title="1.注册容联云账号"></a>1.注册容联云账号</h1><h3 id="1-1-注册账号"><a href="#1-1-注册账号" class="headerlink" title="1.1  注册账号"></a>1.1  注册账号</h3><p><a href="https://www.yuntongxun.com/user/login">https://www.yuntongxun.com/user/login</a> </p><p><img src="./assets/image-20200921202404527.png" style="width: 700px; margin-left: 50px;"> </img></p><h3 id="1-2-登录即可看到开发者账号信息"><a href="#1-2-登录即可看到开发者账号信息" class="headerlink" title="1.2 登录即可看到开发者账号信息"></a>1.2 登录即可看到开发者账号信息</h3><p><img src="./assets/image-20200921202725860.png" style="width: 700px; margin-left: 50px;"> </img></p><h3 id="1-3-添加测试账号"><a href="#1-3-添加测试账号" class="headerlink" title="1.3 添加测试账号"></a>1.3 添加测试账号</h3><p><img src="./assets/image-20200921202948549.png" style="width: 1000px; margin-left: 50px;"> </img></p><h1 id="2-使用容联云发送代码测试"><a href="#2-使用容联云发送代码测试" class="headerlink" title="2.使用容联云发送代码测试"></a>2.使用容联云发送代码测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1. 安装容联云sdk&#x27;&#x27;&#x27;</span></span><br><span class="line">pip install ronglian_sms_sdk</span><br><span class="line"><span class="comment"># 免费测试文档地址:https://doc.yuntongxun.com/p/5a531a353b8496dd00dcdfe2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2. 短信发送代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># libs/rl_sms.py</span></span><br><span class="line"><span class="keyword">from</span> ronglian_sms_sdk <span class="keyword">import</span> SmsSDK</span><br><span class="line"></span><br><span class="line">accId = <span class="string">&#x27;8a216da8747ac98201749c0de38723b7&#x27;</span></span><br><span class="line">accToken = <span class="string">&#x27;86072b540b4648229b27400414150ef2&#x27;</span></span><br><span class="line">appId = <span class="string">&#x27;8a216da8747ac98201749c0de45123be&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">phone, datas</span>):</span><br><span class="line">    sdk = SmsSDK(accId, accToken, appId)</span><br><span class="line">    tid = <span class="string">&#x27;1&#x27;</span>  <span class="comment"># 测试模板id为: 1. 内容为: 【云通讯】您的验证码是&#123;1&#125;，请于&#123;2&#125;分钟内正确输入。</span></span><br><span class="line">    <span class="comment"># mobile = &#x27;13303479527&#x27;</span></span><br><span class="line">    <span class="comment"># datas = (&#x27;666777&#x27;, &#x27;5&#x27;)  # 模板中的参数按照位置传递</span></span><br><span class="line">    resp = sdk.sendMessage(tid, phone, datas)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h1 id="3-在视图函数中使用"><a href="#3-在视图函数中使用" class="headerlink" title="3.在视图函数中使用"></a>3.在视图函数中使用</h1><h3 id="3-1-在verifications-x2F-urls-py中添加路由"><a href="#3-1-在verifications-x2F-urls-py中添加路由" class="headerlink" title="3.1 在verifications&#x2F;urls.py中添加路由"></a>3.1 在verifications&#x2F;urls.py中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;sms_codes/&#x27;</span>, views.SmsCodeView.as_view()), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-2-写试图函数"><a href="#3-2-写试图函数" class="headerlink" title="3.2 写试图函数"></a>3.2 写试图函数</h3><p><img src="./assets/image-20201008091131678.png" style="width: 700px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># verifications/views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> utils.rl_sms <span class="keyword">import</span> send_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmsCodeView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 1. 所有人可以访问</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1. 获取参数</span></span><br><span class="line">        phone = request.data.get(<span class="string">&#x27;phone&#x27;</span>) </span><br><span class="line">        image_code = request.data.get(<span class="string">&#x27;image_code&#x27;</span>)    <span class="comment"># 字符串验证码</span></span><br><span class="line">        image_code_uuid = request.data.get(<span class="string">&#x27;image_code_uuid&#x27;</span>)   <span class="comment"># 前端生成的uuid，是redis中图片验证码的key</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 检查参数是否完整</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([phone, image_code, image_code_uuid]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;参数不全&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^1[3456789]\d&#123;9&#125;$&#x27;</span>, phone):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;手机号码不正确&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 检查是否已经发送过</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;img_code&#x27;</span>)  <span class="comment"># 连接redis</span></span><br><span class="line">        phone_exists = redis_client.get(phone)</span><br><span class="line">        <span class="keyword">if</span> phone_exists:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;频繁发送, 请稍后再试&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.检查图片验证码是否合法</span></span><br><span class="line">        redis_image_code = redis_client.get(image_code_uuid)  <span class="comment"># 字符串验证码</span></span><br><span class="line">        <span class="keyword">if</span> redis_image_code:</span><br><span class="line">            <span class="comment"># bytes 转成 string</span></span><br><span class="line">            redis_image_code = redis_image_code.decode()</span><br><span class="line">        <span class="comment"># 比较用户提供的图片内容是否和redis中保存的一致</span></span><br><span class="line">        <span class="keyword">if</span> image_code.upper() != redis_image_code:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;图片验证码不正确&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 发送</span></span><br><span class="line">        code = <span class="string">&#x27;%06d&#x27;</span> % random.randint(<span class="number">0</span>, <span class="number">999999</span>)  <span class="comment"># 随机6位验证码</span></span><br><span class="line">        send_resp = send_message(phone, (code, <span class="string">&quot;5&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5.1 保存code 到 redis中</span></span><br><span class="line">        <span class="comment"># redis_client.setex(phone, 60 * 5, code)  # phone:code, 5分钟有效期</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5.2 从redis中删除这个图片验证码, 以防再次被使用</span></span><br><span class="line">        <span class="comment"># redis_client.delete(image_code_uuid)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6.存储这个已经出发发送的手机号，防止频繁发送 （使用 pipeline 批量操作）</span></span><br><span class="line">        pl = redis_client.pipeline()      <span class="comment"># 实例化一个pipeline对象</span></span><br><span class="line">        pl.setex(phone, <span class="number">60</span> * <span class="number">5</span>, code)</span><br><span class="line">        pl.delete(image_code_uuid)</span><br><span class="line">        pl.execute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">0</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;短信发送成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day03 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/e4a5bb/"/>
      <url>//pages/e4a5bb/</url>
      
        <content type="html"><![CDATA[<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><ul><li>图片验证码接口（项目代码+记录到博客中）</li><li>vue联调，图片验证码（项目代码+记录到博客中）</li><li>短信验证接口（项目代码+记录到博客中）</li><li>redis的pipeline（记录到博客中）</li><li>画图<ul><li>图片验证码原理（画图）<ul><li><img src="./assets/image-20201008103409256.png" style="width: 400px; margin-left: 50px;"> </img></li></ul></li><li>短信验证码原理（画图）<ul><li><img src="./assets/image-20201008103458943.png" style="width: 600px; margin-left: 50px;"> </img></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day03 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.vue图片验证码</title>
      <link href="//pages/83164a/"/>
      <url>//pages/83164a/</url>
      
        <content type="html"><![CDATA[<h1 id="1-生成图片验证码"><a href="#1-生成图片验证码" class="headerlink" title="1.生成图片验证码"></a>1.生成图片验证码</h1><h3 id="1-1-修改components-common-lab-header-vue添加图片验证码"><a href="#1-1-修改components-common-lab-header-vue添加图片验证码" class="headerlink" title="1.1 修改components\common\lab_header.vue添加图片验证码"></a>1.1 修改<code>components\common\lab_header.vue</code>添加图片验证码</h3><ul><li>只需要把原始的url路径修改成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getImgUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> uuid = <span class="variable language_">this</span>.<span class="title function_">getUuid</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uuid</span> = uuid</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;http://192.168.56.100:8888/verify/image_codes/?uuid=&#x27;</span> + uuid</span><br><span class="line">  <span class="comment">// let url = &#x27;http://192.168.56.100:8888/verify/image_codes/?uuid=66ea64aa-fbe6-11ea-a3d3-005056c00008&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">imgUrl</span> = url</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="2-前端学习方法"><a href="#2-前端学习方法" class="headerlink" title="2.前端学习方法"></a>2.前端学习方法</h1><ul><li><p>1.找路由：src\router\index.js，根据路由找到xxx.vue文件</p></li><li><p>2.分析xxx.vue</p><ul><li>1.点击按钮的html位置</li><li>2.点击后触发什么一个js函数<ul><li>js函数从后端获取了什么数据</li><li>获取到数据以后做了什么修改</li></ul></li></ul></li><li><p>3.发送请求（axios封装）</p><ul><li>components\axios_api\apis.js</li><li>components\axios_api\http.js</li><li>导入并使用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day03 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.图片验证码接口</title>
      <link href="//pages/73dabe/"/>
      <url>//pages/73dabe/</url>
      
        <content type="html"><![CDATA[<h1 id="1-django-缓存设置"><a href="#1-django-缓存设置" class="headerlink" title="1.django 缓存设置"></a>1.django 缓存设置</h1><p><code>django的六种缓存（mysql+redis）</code>：<a href="https://www.cnblogs.com/xiaonq/p/7978402.html#i6">https://www.cnblogs.com/xiaonq/p/7978402.html#i6</a></p><p><code>redis使用：</code><a href="https://www.cnblogs.com/xiaonq/category/1544586.html">https://www.cnblogs.com/xiaonq/category/1544586.html</a></p><h3 id="1-1-安装Django缓存模块"><a href="#1-1-安装Django缓存模块" class="headerlink" title="1.1 安装Django缓存模块"></a>1.1 安装Django缓存模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-redis==<span class="number">4.12</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="1-2-syl-settings-py中配置缓存"><a href="#1-2-syl-settings-py中配置缓存" class="headerlink" title="1.2 syl/settings.py中配置缓存"></a>1.2 <code>syl/settings.py</code>中配置缓存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="comment"># django存缓默认位置,redis 0号库</span></span><br><span class="line">    <span class="comment"># default: 连接名称</span></span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># django session存 reidis 1 号库（现在基本不需要使用）</span></span><br><span class="line">    <span class="string">&quot;session&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 图形验证码，存redis 2号库</span></span><br><span class="line">    <span class="string">&quot;img_code&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置session使用redis存储</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.cache&quot;</span></span><br><span class="line"><span class="comment"># 配置session存储的位置: 使用cache中的 session配置</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&quot;session&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-新建应用verifications"><a href="#2-新建应用verifications" class="headerlink" title="2.新建应用verifications"></a>2.新建应用verifications</h1><ul><li>图形验证码</li><li>短信验证码</li><li>邮件验证</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;2.1 在apps文件夹下新建应用： verifications&#x27;&#x27;&#x27;</span></span><br><span class="line">python ../manage.py startapp verifications   <span class="comment"># 切换到apps文件夹下执行创建命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.2 在syl/settings.py中添加应用&#x27;&#x27;&#x27;</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;verifications.apps.VerificationsConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.3 在syl/urls.py主路由中添加&#x27;&#x27;&#x27;</span></span><br><span class="line">path(<span class="string">&#x27;verify/&#x27;</span>, include(<span class="string">&#x27;verifications.urls&#x27;</span>)),</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.4 添加子路由： verifications/urls.py&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&#x27;image_codes/&#x27;, views.ImageCodeView.as_view())</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="3-图形验证码captcha使用"><a href="#3-图形验证码captcha使用" class="headerlink" title="3.图形验证码captcha使用"></a>3.图形验证码captcha使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>下载captcha压缩包captcha.<span class="built_in">zip</span>，放到项目packages文件夹下</span><br><span class="line"><span class="number">2.</span>解压captcha.<span class="built_in">zip</span>放到syl/libs文件夹下</span><br><span class="line"><span class="number">3.</span>解压文件中的syl/libs/captcha/captcha.py 右键运行即可生成图片验证码</span><br><span class="line">unzip xxx.<span class="built_in">zip</span></span><br></pre></td></tr></table></figure><h1 id="4-在verifications-x2F-views-py中使用"><a href="#4-在verifications-x2F-views-py中使用" class="headerlink" title="4.在verifications&#x2F;views.py中使用"></a>4.在verifications&#x2F;views.py中使用</h1><p><img src="./assets/image-20201008084403574.png" style="width: 600px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseForbidden</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="keyword">from</span> libs.captcha.captcha <span class="keyword">import</span> captcha</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageCodeView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1.接收数据(uuid)</span></span><br><span class="line">        uuid = request.GET.get(<span class="string">&#x27;uuid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.校验数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uuid:</span><br><span class="line">            <span class="keyword">return</span> HttpResponseForbidden(<span class="string">&#x27;uuid无效&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.处理业务</span></span><br><span class="line">        <span class="comment"># 获取图片文本内容和图片二进制代码</span></span><br><span class="line">        text, image = captcha.generate_captcha()   <span class="comment"># text=GPMZ; image=图片</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.把uuid和图片文本存入redis</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;img_code&#x27;</span>)  <span class="comment"># 获取redis客户端</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5.写入redis(是字符串)</span></span><br><span class="line">        redis_client.setex(uuid, <span class="number">60</span> * <span class="number">5</span>, text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6.返回响应图片</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(image, content_type=<span class="string">&#x27;image/jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="5-测试验证码接口"><a href="#5-测试验证码接口" class="headerlink" title="5.测试验证码接口"></a>5.测试验证码接口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/verify/image_codes/?uuid=66ea64aa-fbe6-11ea-a3d3-005056c00008</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921164353098.png" style="width: 1000px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;<span class="comment">#  select 2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt;<span class="comment">#  keys *</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;66ea64aa-fbe6-11ea-a3d3-005056c00008&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt;<span class="comment">#  get 66ea64aa-fbe6-11ea-a3d3-005056c00008</span></span><br><span class="line"><span class="string">&quot;JEZ6&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day03 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.编写注册接口</title>
      <link href="//pages/8f565f/"/>
      <url>//pages/8f565f/</url>
      
        <content type="html"><![CDATA[<h1 id="1-编写注册接口"><a href="#1-编写注册接口" class="headerlink" title="1.编写注册接口"></a>1.编写注册接口</h1><h3 id="1-1-user-urls-py中添加路由"><a href="#1-1-user-urls-py中添加路由" class="headerlink" title="1.1 user/urls.py中添加路由"></a>1.1 <code>user/urls.py</code>中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;register/&#x27;</span>, views.RegisterView.as_view()),  <span class="comment"># 注册视图,  /user/register/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-user-views-py中写注册视图函数"><a href="#1-2-user-views-py中写注册视图函数" class="headerlink" title="1.2 user/views.py中写注册视图函数"></a>1.2 <code>user/views.py</code>中写注册视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户注册, 权限是: 匿名用户可访问</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        接收邮箱和密码, 前端校验两遍一致性, 注册成功后返回成功, 然后用户自行登录获取token</span></span><br><span class="line"><span class="string">        1. 随机用户名</span></span><br><span class="line"><span class="string">        2. 生成用户</span></span><br><span class="line"><span class="string">        3. 设置用户密码</span></span><br><span class="line"><span class="string">        4. 保存用户</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return:  &#123;&#x27;code&#x27;:0,&#x27;msg&#x27;:&#x27;注册成功&#x27;&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        email = request.data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        passwrod = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([email, passwrod]):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">9999</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;参数不全&#x27;</span>&#125;)</span><br><span class="line">        user = User(username=username, email=email)</span><br><span class="line">        user.set_password(passwrod)                   <span class="comment"># 密码加密</span></span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;注册成功&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-重写django认证"><a href="#2-重写django认证" class="headerlink" title="2.重写django认证"></a>2.重写django认证</h1><h3 id="2-1-syl-settings-py中指定自定义后端认证函数位置"><a href="#2-1-syl-settings-py中指定自定义后端认证函数位置" class="headerlink" title="2.1 syl/settings.py中指定自定义后端认证函数位置"></a>2.1 <code>syl/settings.py</code>中指定自定义后端认证函数位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义验证后端，使用我们自己写的认证类来验证用户登录身份</span></span><br><span class="line">AUTHENTICATION_BACKENDS = [<span class="string">&#x27;user.utils.EmailAuthBackend&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-2-user-utils-py中重写认证函数（django多账号登录）"><a href="#2-2-user-utils-py中重写认证函数（django多账号登录）" class="headerlink" title="2.2 user/utils.py中重写认证函数（django多账号登录）"></a>2.2 <code>user/utils.py</code>中重写认证函数（django多账号登录）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以前使用username进行用户验证，现在修改成email进行验证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailAuthBackend</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        request: request请求对象</span></span><br><span class="line"><span class="string">        username:  用户名&amp;邮箱&amp;手机号</span></span><br><span class="line"><span class="string">        password: 密码</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 通过用户名获取</span></span><br><span class="line">            user = User.objects.get(username=username)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            user = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user = User.objects.get(email=username)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                user = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.check_password(password):</span><br><span class="line">            <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">self, user_id</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> User.objects.get(pk=user_id)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h1 id="3-注册用户-amp-测试登录"><a href="#3-注册用户-amp-测试登录" class="headerlink" title="3.注册用户 &amp; 测试登录"></a>3.注册用户 &amp; 测试登录</h1><h3 id="3-1-注册接口测试"><a href="#3-1-注册接口测试" class="headerlink" title="3.1 注册接口测试"></a>3.1 注册接口测试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/register/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921145153815.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="3-2-登录接口测试"><a href="#3-2-登录接口测试" class="headerlink" title="3.2 登录接口测试"></a>3.2 登录接口测试</h3><p>注：<code>认证时只能识别username，所以必须要在请求中携带username字段</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/login/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921145629191.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="3-3-获取用户列表接口测试"><a href="#3-3-获取用户列表接口测试" class="headerlink" title="3.3 获取用户列表接口测试"></a>3.3 获取用户列表接口测试</h3><ul><li>访问接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/user/5/</span></span><br></pre></td></tr></table></figure><ul><li><code>测试自定义权限</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义权限类</span></span><br><span class="line">permission_classes = (MyPermission,)</span><br><span class="line"><span class="comment"># 自定义认证类, 自定义会覆盖全局配置</span></span><br><span class="line">authentication_classes = (JSONWebTokenAuthentication,)</span><br></pre></td></tr></table></figure><p><img src="./assets/image-20200921150903996.png" style="width: 1000px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day02 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.redis的pipline使用</title>
      <link href="//pages/9cbc46/"/>
      <url>//pages/9cbc46/</url>
      
        <content type="html"><![CDATA[<h1 id="1-pipeline原理"><a href="#1-pipeline原理" class="headerlink" title="1.pipeline原理"></a>1.pipeline原理</h1><p>redis基本语法：<a href="https://www.cnblogs.com/xiaonq/p/7919111.html">https://www.cnblogs.com/xiaonq/p/7919111.html</a></p><p>redis四篇：<a href="https://www.cnblogs.com/xiaonq/category/1544586.html">https://www.cnblogs.com/xiaonq/category/1544586.html</a></p><h3 id="1-1-redis发送数据原理"><a href="#1-1-redis发送数据原理" class="headerlink" title="1.1 redis发送数据原理"></a>1.1 redis发送数据原理</h3><ul><li><p>Redis是建立在TCP协议基础上的CS架构，客户端client对redis server采取请求响应的方式交互。</p></li><li><p>一般来说客户端从提交请求到得到服务器相应，需要传送两个tcp报文。</p></li><li><p>设想这样的一个场景，你要批量的执行一系列redis命令，例如执行100次get key，这时你要向redis请求100次+获取响应100次。如果能一次性将100个请求提交给redis server，执行完成之后批量的获取相应，只需要向redis请求1次，然后批量执行完命令，一次性结果，性能是不是会好很多呢？</p></li></ul><h3 id="1-2-未使用pipeline执行N条命令"><a href="#1-2-未使用pipeline执行N条命令" class="headerlink" title="1.2 未使用pipeline执行N条命令"></a>1.2 未使用pipeline执行N条命令</h3><p><img src="./assets/image-20201005225859400.png" style="width: 600px; margin-left: 50px;"> </img></p><h3 id="1-3-使用了pipeline执行N条命令"><a href="#1-3-使用了pipeline执行N条命令" class="headerlink" title="1.3 使用了pipeline执行N条命令"></a>1.3 使用了pipeline执行N条命令</h3><p><img src="./assets/image-20201005230053553.png" style="width: 600px; margin-left: 50px;"> </img></p><h1 id="2-pipeline性能代码展示"><a href="#2-pipeline性能代码展示" class="headerlink" title="2.pipeline性能代码展示"></a>2.pipeline性能代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection       <span class="comment"># 导入get_redis_connection模块</span></span><br><span class="line">In [<span class="number">2</span>]: redis_client = get_redis_connection(<span class="string">&#x27;default&#x27;</span>)      <span class="comment"># 连接redis 0号库</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;方法1：使用普通方法执行&#x27;&#x27;&#x27;</span></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99999</span>):</span><br><span class="line">   ...:     redis_client.<span class="built_in">set</span>(i,i)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;方法2：使用pipeline执行&#x27;&#x27;&#x27;</span></span><br><span class="line">In [<span class="number">4</span>]: p1 = redis_client.pipeline()           <span class="comment"># 实例化一个pipeline对象             </span></span><br><span class="line">In [<span class="number">5</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99999</span>):</span><br><span class="line">   ...:     p1.<span class="built_in">set</span>(i,i)                        <span class="comment"># 把要执行的命令打包到pipeline</span></span><br><span class="line">In [<span class="number">6</span>]: p1.execute()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day03 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/48b841/"/>
      <url>//pages/48b841/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业"><a href="#1-作业" class="headerlink" title="1.作业"></a>1.作业</h1><ul><li><p>celery原理与组件（博客+画图）</p></li><li><p>celery配置博客（博客：以后使用能够快速完成）</p></li><li><p>celery发送短信的接口（博客+项目代码）</p></li><li><p>vue发送短信（博客）</p></li><li><p>检查用户名接口</p></li><li><p>后端注册接口</p></li><li><p>前端：</p><ul><li>检查用户名复杂性、手机号是否合法</li><li>检查密码复杂度</li></ul></li><li><p>熟悉接口文档规范，完成 上面四个接口文档</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.celery原理与组件</title>
      <link href="//pages/ac52c6/"/>
      <url>//pages/ac52c6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Celery介绍"><a href="#1-Celery介绍" class="headerlink" title="1.Celery介绍"></a>1.Celery介绍</h1><p><a href="https://www.cnblogs.com/xiaonq/p/11166235.html#i1">https://www.cnblogs.com/xiaonq/p/11166235.html#i1</a></p><h3 id="1-1-celery应用举例"><a href="#1-1-celery应用举例" class="headerlink" title="1.1 celery应用举例"></a>1.1 celery应用举例</h3><ul><li><p>Celery 是一个 基于python开发的<code>分布式异步消息任务队列</code>，通过它可以轻松的实现任务的异步处理，如果你的业务场景中需要用到异步任务，就可以考虑使用celery</p></li><li><p>你想对100台机器执行一条批量命令，可能会花很长时间 ，但你不想让你的程序等着结果返回，而是给你返回 一个任务ID,你过一段时间只需要拿着这个任务id就可以拿到任务执行结果， 在任务执行ing进行时，你可以继续做其它的事情</p></li><li><p>Celery 在执行任务时需要通过一个消息中间件来接收和发送任务消息，以及存储任务结果， 一般使用rabbitMQ or Redis</p></li></ul><h3 id="1-2-Celery有以下优点"><a href="#1-2-Celery有以下优点" class="headerlink" title="1.2 Celery有以下优点"></a>1.2 Celery有以下优点</h3><ul><li>简单：一单熟悉了celery的工作流程后，配置和使用还是比较简单的</li><li>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务</li><li>快速：一个单进程的celery每分钟可处理上百万个任务</li><li>灵活： 几乎celery的各个组件都可以被扩展及自定制</li></ul><h3 id="1-3-Celery-特性"><a href="#1-3-Celery-特性" class="headerlink" title="1.3 Celery 特性"></a>1.3 Celery 特性</h3><ul><li><p>方便查看定时任务的执行情况, 如 是否成功, 当前状态, 执行任务花费的时间等.</p></li><li><p>可选 多进程, Eventlet 和 Gevent 三种模型并发执行.</p></li><li><p><code>Celery 是语言无关的.它提供了python 等常见语言的接口支持.</code></p></li></ul><h1 id="2-celery-组件"><a href="#2-celery-组件" class="headerlink" title="2.celery 组件"></a>2.celery 组件</h1><p><a href="https://www.cnblogs.com/xiaonq/p/11166235.html#i2">https://www.cnblogs.com/xiaonq/p/11166235.html#i2</a></p><h3 id="2-1-Celery-扮演生产者和消费者的角色"><a href="#2-1-Celery-扮演生产者和消费者的角色" class="headerlink" title="2.1 Celery 扮演生产者和消费者的角色"></a>2.1 Celery 扮演生产者和消费者的角色</h3><ul><li><p><strong>Celery Beat :</strong> 任务调度器. Beat 进程会读取配置文件的内容, 周期性的将配置中到期需要执行的任务发送给任务队列.</p></li><li><p><strong>Celery Worker :</strong> 执行任务的消费者, 通常会在多台服务器运行多个消费者, 提高运行效率.</p></li><li><p><strong>Broker :</strong> 消息代理, 队列本身. 也称为消息中间件. 接受任务生产者发送过来的任务消息, 存进队列再按序分发给任务消费方(通常是消息队列或者数据库).</p></li><li><p><strong>Producer :</strong> 任务生产者. 调用 Celery API , 函数或者装饰器, 而产生任务并交给任务队列处理的都是任务生产者.</p></li><li><p><strong>Result Backend :</strong> 任务处理完成之后保存状态信息和结果, 以供查询.</p></li></ul><h3 id="2-2-celery架构图（生产者消费者模型）"><a href="#2-2-celery架构图（生产者消费者模型）" class="headerlink" title="2.2 celery架构图（生产者消费者模型）"></a>2.2 celery架构图（<code>生产者消费者模型</code>）</h3><p><img src="./assets/image-20201004180304271.png" style="width: 700px; margin-left: 50px;"> </img></p><p><img src="./assets/image-20201008101758234.png" style="width: 700px; margin-left: 50px;"> </img></p><p><img src="./assets/image-20201104091750479.png" style="width: 800px; margin-left: 50px;"> </img></p><h3 id="2-3-产生任务的方式"><a href="#2-3-产生任务的方式" class="headerlink" title="2.3 产生任务的方式"></a>2.3 产生任务的方式</h3><ul><li><p>发布者发布任务(WEB 应用)</p></li><li><p>任务调度按期发布任务(定时任务)</p></li></ul><h3 id="2-4-celery-依赖三个库-这三个库-都由-Celery-的开发者开发和维护"><a href="#2-4-celery-依赖三个库-这三个库-都由-Celery-的开发者开发和维护" class="headerlink" title="2.4 celery 依赖三个库: 这三个库, 都由 Celery 的开发者开发和维护."></a>2.4 celery 依赖三个库: 这三个库, 都由 Celery 的开发者开发和维护.</h3><ul><li><code>billiard :</code> 基于 Python2.7 的 multisuprocessing 而改进的库, 主要用来提高性能和稳定性.</li><li><code>librabbitmp : </code>C 语言实现的 Python 客户端</li><li><code>kombu :</code> Celery 自带的用来收发消息的库, 提供了符合 Python 语言习惯的, 使用 AMQP 协议的高级借口.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.celery发送短信接口</title>
      <link href="//pages/e04fba/"/>
      <url>//pages/e04fba/</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用celery异步发送短信"><a href="#1-使用celery异步发送短信" class="headerlink" title="1.使用celery异步发送短信"></a>1.使用celery异步发送短信</h1><h3 id="1-1-在celery-task-mian-py中添加发送短信函数"><a href="#1-1-在celery-task-mian-py中添加发送短信函数" class="headerlink" title="1.1 在celery_task/mian.py中添加发送短信函数"></a>1.1 在<code>celery_task/mian.py</code>中添加发送短信函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery项目中的所有导包地址, 都是以CELERY_BASE_DIR为基准设定.</span></span><br><span class="line"><span class="comment"># 执行celery命令时, 也需要进入CELERY_BASE_DIR目录执行.</span></span><br><span class="line">CELERY_BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_sms_code</span>(<span class="params">self, mobile, datas</span>):</span><br><span class="line">    sys.path.insert(<span class="number">0</span>, os.path.join(CELERY_BASE_DIR, <span class="string">&#x27;../syl&#x27;</span>))</span><br><span class="line">    <span class="comment"># 在方法中导包</span></span><br><span class="line">    <span class="keyword">from</span> utils.rl_sms <span class="keyword">import</span> send_message</span><br><span class="line">    <span class="comment"># time.sleep(5)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 用 res 接收发送结果, 成功是:０，　失败是：－１</span></span><br><span class="line">        res = send_message(mobile, datas)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        res = <span class="string">&#x27;-1&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&#x27;-1&#x27;</span>:</span><br><span class="line">        <span class="comment"># 如果发送结果是 -1  就重试.</span></span><br><span class="line">        self.retry(countdown=<span class="number">5</span>, max_retries=<span class="number">3</span>, exc=Exception(<span class="string">&#x27;短信发送失败&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="1-2-在verifications-views-py中添加celery发送短信试图函数"><a href="#1-2-在verifications-views-py中添加celery发送短信试图函数" class="headerlink" title="1.2 在verifications/views.py中添加celery发送短信试图函数"></a>1.2 在<code>verifications/views.py</code>中添加celery发送短信试图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SmsCodeView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用apiview的限流&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 所有人可以访问</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1. 获取参数</span></span><br><span class="line">        phone = request.data.get(<span class="string">&#x27;phone&#x27;</span>)  <span class="comment"># 手机号</span></span><br><span class="line">        image_code = request.data.get(<span class="string">&#x27;image_code&#x27;</span>)  <span class="comment"># 图片验证码</span></span><br><span class="line">        image_code_uuid = request.data.get(<span class="string">&#x27;image_code_uuid&#x27;</span>)  <span class="comment"># 前端生成的uuid</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 检查参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([phone, image_code, image_code_uuid]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;参数不全&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^1[3456789]\d&#123;9&#125;$&#x27;</span>, phone):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;手机号码不正确&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 检查是否发送</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;img_code&#x27;</span>)</span><br><span class="line">        phone_exists = redis_client.get(phone)</span><br><span class="line">        <span class="keyword">if</span> phone_exists:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">999</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;频繁发送, 请稍后再试&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.检查验证图形验证码</span></span><br><span class="line">        redis_image_code = redis_client.get(image_code_uuid)  <span class="comment"># bytes</span></span><br><span class="line">        <span class="keyword">if</span> redis_image_code:</span><br><span class="line">            <span class="comment"># bytes 转成 string</span></span><br><span class="line">            redis_image_code = redis_image_code.decode()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 比较用户提供的图片内容是否和redis中保存的一致</span></span><br><span class="line">        <span class="keyword">if</span> image_code.upper() != redis_image_code:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;图片验证码不正确&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 发送</span></span><br><span class="line">        code = <span class="string">&#x27;%06d&#x27;</span> % random.randint(<span class="number">0</span>, <span class="number">999999</span>)  <span class="comment"># 随机6位验证码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> syl.settings <span class="keyword">import</span> BASE_DIR</span><br><span class="line">        sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">&#x27;../celery_task&#x27;</span>))</span><br><span class="line">        <span class="keyword">from</span> main <span class="keyword">import</span> send_sms_code  <span class="comment"># 必须这么写, 从main中导包</span></span><br><span class="line"></span><br><span class="line">        send_sms_code.delay(phone, (code, <span class="string">&quot;5&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(code)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6.使用 pipeline 批量操作</span></span><br><span class="line">        pl = redis_client.pipeline()    <span class="comment"># 实例化pipeline对象</span></span><br><span class="line">        pl.setex(phone, <span class="number">60</span> * <span class="number">5</span>, code)   <span class="comment"># 存储phone:code, 5分钟有效期</span></span><br><span class="line">        pl.delete(image_code_uuid)      <span class="comment"># 从redis中删除这个图片验证码, 以防再次被使用</span></span><br><span class="line">        pl.execute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 7. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">0</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;短信发送成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-添加路由"><a href="#1-3-添加路由" class="headerlink" title="1.3 添加路由"></a>1.3 添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;sms_codes/&#x27;</span>, views.SmsCodeView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2.测试接口"></a>2.测试接口</h1><ul><li>接口URL</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.100:8888/user/sms_codes/</span><br></pre></td></tr></table></figure><ul><li>请求携带参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;phone&quot;</span>: <span class="number">18538752511</span>,</span><br><span class="line">    <span class="string">&quot;image_code&quot;</span>:<span class="string">&quot;aed3&quot;</span>,                                         <span class="comment"># 前端生成的 图形验证码</span></span><br><span class="line">    <span class="string">&quot;image_code_uuid&quot;</span>:<span class="string">&quot;de8edce2-fc9f-11ea-9325-005056c00008&quot;</span>     <span class="comment"># 前端生成的uuid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.celery配置与基本使用</title>
      <link href="//pages/ee62e4/"/>
      <url>//pages/ee62e4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-celery配置与基本使用"><a href="#1-celery配置与基本使用" class="headerlink" title="1.celery配置与基本使用"></a>1.celery配置与基本使用</h1><h3 id="1-1-安装celery"><a href="#1-1-安装celery" class="headerlink" title="1.1 安装celery"></a>1.1 安装celery</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install celery==<span class="number">5.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="1-2-新建celery-main-py配置celery"><a href="#1-2-新建celery-main-py配置celery" class="headerlink" title="1.2 新建celery/main.py配置celery"></a>1.2 新建<code>celery/main.py</code>配置celery</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery_task/main.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义celery实例, 需要的参数, 1, 实例名, 2, 任务发布位置, 3, 结果保存位置</span></span><br><span class="line">app = Celery(<span class="string">&#x27;mycelery&#x27;</span>,</span><br><span class="line">             broker=<span class="string">&#x27;redis://127.0.0.1:6379/14&#x27;</span>,  <span class="comment"># 任务存放的地方 </span></span><br><span class="line">             backend=<span class="string">&#x27;redis://127.0.0.1:6379/15&#x27;</span>)  <span class="comment"># 结果存放的地方</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.task 指定将这个函数的执行交给celery异步执行</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><h1 id="2-测试celery"><a href="#2-测试celery" class="headerlink" title="2.测试celery"></a>2.测试celery</h1><h3 id="2-1-启动celery"><a href="#2-1-启动celery" class="headerlink" title="2.1 启动celery"></a>2.1 启动celery</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1.启动celery&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#1.1 单进程启动celery</span></span><br><span class="line">celery -A main worker -l INFO</span><br><span class="line"><span class="comment">#1.2 celery管理</span></span><br><span class="line">celery  multi start celery_test -A celery_test -l debug --autoscale=<span class="number">50</span>,<span class="number">5</span>        <span class="comment"># celery并发数：最多50个，最少5个</span></span><br><span class="line">ps auxww|grep <span class="string">&quot;celery worker&quot;</span>|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs kill -<span class="number">9</span>       <span class="comment"># 关闭所有celery进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.检查用户名是否使用接口</title>
      <link href="//pages/7bc556/"/>
      <url>//pages/7bc556/</url>
      
        <content type="html"><![CDATA[<h1 id="1-django添加检查用户名和手机号数量接口"><a href="#1-django添加检查用户名和手机号数量接口" class="headerlink" title="1.django添加检查用户名和手机号数量接口"></a>1.django添加检查用户名和手机号数量接口</h1><h3 id="1-1-在user-urls-py中添加"><a href="#1-1-在user-urls-py中添加" class="headerlink" title="1.1 在user/urls.py中添加"></a>1.1 在<code>user/urls.py</code>中添加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;count/&#x27;</span>, views.RegCountView.as_view()),  <span class="comment"># 查询用户名手机号使用量的视图,  /user/count/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-在user-views-py中添加视图函数"><a href="#1-2-在user-views-py中添加视图函数" class="headerlink" title="1.2 在user/views.py中添加视图函数"></a>1.2 在<code>user/views.py</code>中添加视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询用户数量接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegCountView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 注册时需要验证的用户名和手机号是否使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 接收参数:  验证的内容type: username/phone,  data: &#x27;用户名&#x27; 或者 &#x27;手机号&#x27;,</span></span><br><span class="line">        datatype = request.data.get(<span class="string">&#x27;type&#x27;</span>)</span><br><span class="line">        data = request.data.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([data, datatype]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;参数不完整&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> datatype == <span class="string">&#x27;username&#x27;</span>:</span><br><span class="line">            count = User.objects.<span class="built_in">filter</span>(username=data).count()</span><br><span class="line">        <span class="keyword">if</span> datatype == <span class="string">&#x27;phone&#x27;</span>:</span><br><span class="line">            count = User.objects.<span class="built_in">filter</span>(phone=data).count()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;查询成功&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;type&#x27;</span>: datatype, <span class="string">&#x27;count&#x27;</span>: count&#125;&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2.测试接口"></a>2.测试接口</h1><ul><li>测试接口URL</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/user/count/</span></span><br></pre></td></tr></table></figure><ul><li>演示结果</li></ul><p><img src="./assets/image-20200922112242379.png" style="width: 600px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07.后端注册接口完善</title>
      <link href="//pages/ba07d2/"/>
      <url>//pages/ba07d2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-完善注册接口"><a href="#1-完善注册接口" class="headerlink" title="1.完善注册接口"></a>1.完善注册接口</h1><p><img src="./assets/image-20201104150103303.png" style="width: 700px; margin-left: 50px;"> </img></p><h3 id="1-1-修改user-views-py中完善视图函数"><a href="#1-1-修改user-views-py中完善视图函数" class="headerlink" title="1.1 修改user/views.py中完善视图函数"></a>1.1 修改<code>user/views.py</code>中完善视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户注册, 权限是: 匿名用户可访问</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        接收用户名,密码,手机号和验证码, 前端校验两遍一致性, 注册成功后返回成功, 然后用户自行登录获取token</span></span><br><span class="line"><span class="string">        1. 用户名</span></span><br><span class="line"><span class="string">        2. 密码</span></span><br><span class="line"><span class="string">        3. 手机号</span></span><br><span class="line"><span class="string">        4. 短信验证码</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return:  &#123;&#x27;code&#x27;:0,&#x27;msg&#x27;:&#x27;注册成功&#x27;&#125;</span></span><br><span class="line"><span class="string">        code: &quot;260361&quot;</span></span><br><span class="line"><span class="string">        password: &quot;123123&quot;</span></span><br><span class="line"><span class="string">        phone: &quot;13303479527&quot;</span></span><br><span class="line"><span class="string">        username: &quot;liangxuepeng&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 1.获取参数：&#123;username: &quot;fly&quot;, password: &quot;111111&quot;, phone: &quot;18538752522&quot;, code: &quot;615003&quot;&#125;</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        phone = request.data.get(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line">        code = request.data.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        passwrod = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.检查参数是否完整</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([username, passwrod, phone, code]):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;参数不全&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.验证手机验证码</span></span><br><span class="line">        redis_client = get_redis_connection(<span class="string">&#x27;verify_code&#x27;</span>)</span><br><span class="line">        code_redis = redis_client.get(phone)</span><br><span class="line">        <span class="keyword">if</span> code_redis:</span><br><span class="line">            code_redis = code_redis.decode()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> code == code_redis:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;手机验证码错误&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.创建用户</span></span><br><span class="line">        user = User(username=username, phone=phone)</span><br><span class="line">        user.set_password(passwrod)</span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;注册成功&#x27;</span>,<span class="string">&#x27;data&#x27;</span>:&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.vue检查用户名是否使用</title>
      <link href="//pages/f4d6a1/"/>
      <url>//pages/f4d6a1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue检查用户名是否重复"><a href="#1-vue检查用户名是否重复" class="headerlink" title="1.vue检查用户名是否重复"></a>1.vue检查用户名是否重复</h1><ul><li><p>前端函数如下,js方法代码无需更改，前端代码逻辑在<code>components\common\lab_header.vue</code></p></li><li><p>只需要修改<code>components\axios_api\http.js</code>中调用的后端地址</p><ul><li>&#96;&#96;&#96;javascript<br>&#x2F;&#x2F; axios.defaults.baseURL &#x3D; “<a href="http://127.0.0.1:8000/&quot;">http://127.0.0.1:8000/&quot;</a><br>axios.defaults.baseURL &#x3D; “<a href="http://192.168.56.100:8888/&quot;">http://192.168.56.100:8888/&quot;</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">    // 检查用户名 是否使用</span><br><span class="line">    check_username() &#123;</span><br><span class="line">      // return true  // 注释检查用户名功能</span><br><span class="line"></span><br><span class="line">      // console.log(&#x27;判断用户名&#x27;)</span><br><span class="line">      // console.log(this.username == &#x27;&#x27;)</span><br><span class="line">      var reg = new RegExp(/^[a-zA-Z0-9_-]&#123;3,16&#125;$/); //字符串正则表达式 4到14位（字母，数字，下划线，减号）</span><br><span class="line">      // 1.判断用户名是否为空</span><br><span class="line">      if (this.username == &#x27;&#x27;) &#123;</span><br><span class="line">        this.username_message = &#x27;用户名不能为空&#x27;</span><br><span class="line">        this.username_error = true</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      // 2.判断用户名 4到14位（字母，数字，下划线，减号）</span><br><span class="line">      if (!reg.test(this.username)) &#123;</span><br><span class="line">        this.username_message = &#x27;用户名格式不正确&#x27;</span><br><span class="line">        this.username_error = true</span><br><span class="line">        return false</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 去后端检查用户名使用数量</span><br><span class="line">        user_count(&#123; type: &#x27;username&#x27;, data: this.username &#125;).then((res) =&gt; &#123;</span><br><span class="line">          console.log(res)</span><br><span class="line">          if (res.data.count &gt; 0) &#123;</span><br><span class="line">            this.username_message = &#x27;用户名已存在&#x27;</span><br><span class="line">            this.username_error = true</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.username_message = &#x27;&#x27;</span><br><span class="line">            this.username_error = false</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2-vue检查手机号是否重复"><a href="#2-vue检查手机号是否重复" class="headerlink" title="2.vue检查手机号是否重复"></a>2.vue检查手机号是否重复</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查手机号是否使用</span></span><br><span class="line"><span class="title function_">check_phone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;检查手机号&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^[1]([3-9])[0-9]&#123;9&#125;$/</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">phone</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">phone_message</span> = <span class="string">&#x27;手机号不能为空&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">phone_error</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">phone</span>)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">phone_message</span> = <span class="string">&#x27;手机号格式不正确&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">phone_error</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 去后端查用户数量</span></span><br><span class="line">    <span class="title function_">user_count</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;phone&#x27;</span>, <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">phone</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phone_message</span> = <span class="string">&#x27;手机号已存在&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phone_error</span> = <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phone_message</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phone_error</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/d25428/"/>
      <url>//pages/d25428/</url>
      
        <content type="html"><![CDATA[<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><ul><li>梳理清楚整体表结构（手绘表结构图）</li><li>表结构基类写法（博客）</li><li>课程模块5张表设计</li><li>开发标签接口</li><li>课程分类接口</li><li>前后端联调</li><li><code>序列化器：普通字段、一对多字段、多对多字段（正向序列化查询，反相序列化查询）（博客）</code></li><li>获取具体课程章节信息接口</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.课程模块表结构分析</title>
      <link href="//pages/b9ada0/"/>
      <url>//pages/b9ada0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-用户模块表结构"><a href="#1-用户模块表结构" class="headerlink" title="1.用户模块表结构"></a>1.用户模块表结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vip</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;vip名称&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    level = models.CharField(<span class="string">&#x27;vip等级&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;vip描述&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_vip&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s-%s&quot;</span> % (self.title, self.level)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.CharField(<span class="string">&#x27;手机号&#x27;</span>, max_length=<span class="number">11</span>)</span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;user&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    nick_name = models.CharField(<span class="string">&#x27;昵称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;地址&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    vip = models.ForeignKey(Vip, on_delete=models.SET_NULL, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line">    vip_expiration = models.DateField(<span class="string">&#x27;vip到期时间&#x27;</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_user&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OauthUser</span>(models.Model):</span><br><span class="line">    OAUTHTYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;weibo&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;weixin&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    uid = models.CharField(<span class="string">&#x27;三方用户id&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    oauth_type = models.CharField(<span class="string">&#x27;认证类型&#x27;</span>, max_length=<span class="number">10</span>, choices=OAUTHTYPE)</span><br></pre></td></tr></table></figure><h1 id="2-课程模块表关系"><a href="#2-课程模块表关系" class="headerlink" title="2.课程模块表关系"></a>2.课程模块表关系</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseType</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程类别&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    sequence = models.IntegerField(<span class="string">&#x27;展示顺序&#x27;</span>, default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_coursetype&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseTag</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程标签&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    sequence = models.IntegerField(<span class="string">&#x27;展示顺序&#x27;</span>, default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_coursetag&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    STATUS = (</span><br><span class="line">        (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;即将上线&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;已上线&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;已下线&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程名&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;课程描述&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;课程logo&#x27;</span>, upload_to=<span class="string">&#x27;course&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_type = models.ForeignKey(CourseType, verbose_name=<span class="string">&#x27;课程类型&#x27;</span>, on_delete=models.SET_NULL, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_tag = models.ManyToManyField(CourseTag, verbose_name=<span class="string">&#x27;课程标签&#x27;</span>)</span><br><span class="line">    status = models.CharField(<span class="string">&#x27;课程状态&#x27;</span>, choices=STATUS, max_length=<span class="number">8</span>, default=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    follower = models.IntegerField(<span class="string">&#x27;关注人数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    learner = models.IntegerField(<span class="string">&#x27;学习人数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_course&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chapters</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;章标题&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;章序号&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(Course, related_name=<span class="string">&#x27;chapters&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_chapters&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sections</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;节标题&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;节序号&#x27;</span>)</span><br><span class="line">    chapters = models.ForeignKey(Chapters, related_name=<span class="string">&#x27;sections&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line">    learn_time = models.IntegerField(<span class="string">&#x27;学习小时&#x27;</span>, default=<span class="number">1</span>)</span><br><span class="line">    video = models.FileField(<span class="string">&quot;上传视频&quot;</span>, upload_to=<span class="string">&quot;videos/%Y%m%d/&quot;</span>, blank=<span class="literal">True</span>, max_length=<span class="number">1024</span>)</span><br><span class="line">    seq_num = models.IntegerField(<span class="string">&quot;序号&quot;</span>, default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_sections&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Follow</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_follow&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Path</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;路径名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;路径图片&#x27;</span>, upload_to=<span class="string">&#x27;path&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;路径描述&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    user = models.ManyToManyField(<span class="string">&#x27;user.User&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">course_total</span>(<span class="params">self</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> jd <span class="keyword">in</span> self.jieduan.<span class="built_in">all</span>():</span><br><span class="line">            count = count + jd.courses.count()</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_path&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JieDuan</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;阶段名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;阶段序号&#x27;</span>)</span><br><span class="line">    path = models.ForeignKey(Path, related_name=<span class="string">&#x27;jieduan&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line">    courses = models.ManyToManyField(Course, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_jieduan&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s-第%s阶段-%s&quot;</span> % (self.path.title, self.serial_num, self.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCourse</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户购买的课程</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;paycourse&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(<span class="string">&#x27;course.Course&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;payuser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_usercourse&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户:%s, 课程:%s&quot;</span> % (self.user.username, self.course.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSections</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.PROTECT, related_name=<span class="string">&#x27;usersections&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.PROTECT, related_name=<span class="string">&#x27;usersections&#x27;</span>)</span><br><span class="line">    section = models.ForeignKey(Sections, on_delete=models.PROTECT, related_name=<span class="string">&#x27;usersections&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_usersections&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户:%s, 课程:%s, 小节: %s&quot;</span> % (self.user.username, self.course.title, self.sections.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name=<span class="string">&#x27;course_comment&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;user_comment&#x27;</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;tb_comment&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论</span></span><br><span class="line"><span class="comment">#   A: 123</span></span><br><span class="line"><span class="comment">#   B:A  234</span></span><br><span class="line"><span class="comment"># 评论的回复</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentReply</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    comment = models.ForeignKey(Comment, on_delete=models.CASCADE, related_name=<span class="string">&#x27;reply&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">    to_user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;comment_to&#x27;</span>)</span><br><span class="line">    <span class="comment"># replay_id = models.IntegerField(&#x27;评论回复的id&#x27;, default=None, null=True)</span></span><br><span class="line">    <span class="comment"># comment_reply = models.ForeignKey(&#x27;self&#x27;, on_delete=models.CASCADE, default=None, null=True,</span></span><br><span class="line">    <span class="comment">#                                   related_name=&#x27;commentreply&#x27;)</span></span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;tb_commentreply&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSelf</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name=<span class="string">&#x27;course_commentself&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;user_commentself&#x27;</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line">    father = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;children&#x27;</span>, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;tb_commentself&quot;</span></span><br></pre></td></tr></table></figure><h1 id="3-商品模块"><a href="#3-商品模块" class="headerlink" title="3.商品模块"></a>3.商品模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    GOODS_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Vip&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Course&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    CHANNEL_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;普通&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;促销&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    goods_type = models.CharField(<span class="string">&#x27;商品种类&#x27;</span>, choices=GOODS_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    product_id = models.CharField(<span class="string">&#x27;产品id&#x27;</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    price = models.DecimalField(<span class="string">&#x27;商品价格&#x27;</span>, max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    channel_type = models.CharField(<span class="string">&#x27;购买渠道&#x27;</span>, choices=CHANNEL_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line"></span><br><span class="line">    is_launched = models.BooleanField(<span class="string">&#x27;是否上架&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_goods&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsCourse</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    PAY_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;普通&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;促销&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    course = models.ForeignKey(<span class="string">&#x27;course.Course&#x27;</span>, on_delete=models.PROTECT)</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    pay_type = models.CharField(<span class="string">&#x27;购买渠道&#x27;</span>, choices=PAY_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    price = models.DecimalField(<span class="string">&#x27;商品价格&#x27;</span>, max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line">    is_launched = models.BooleanField(<span class="string">&#x27;是否上架&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_goodscourse&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orders</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    PAY_METHOD = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;支付宝&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    ORDER_STATUS = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;待支付&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;已支付&quot;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&quot;已取消&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.PROTECT, verbose_name=<span class="string">&quot;下单用户&quot;</span>)</span><br><span class="line">    goods = models.ForeignKey(Goods, on_delete=models.PROTECT)</span><br><span class="line">    order_id = models.CharField(<span class="string">&#x27;订单号&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    trade_no = models.CharField(<span class="string">&#x27;支付宝订单号&#x27;</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>)  <span class="comment"># 28位</span></span><br><span class="line">    pay_time = models.DateTimeField(<span class="string">&#x27;支付时间&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    pay_method = models.CharField(<span class="string">&#x27;支付方式&#x27;</span>, choices=PAY_METHOD, default=<span class="number">1</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    status = models.CharField(<span class="string">&#x27;支付状态&#x27;</span>, choices=ORDER_STATUS, default=<span class="number">1</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    total_amount = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;商品总金额&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 优惠券</span></span><br><span class="line">    <span class="comment"># 收货地址</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_orders&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.order_id</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.vue发送短信逻辑</title>
      <link href="//pages/01f2e1/"/>
      <url>//pages/01f2e1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue发送短信逻辑"><a href="#1-vue发送短信逻辑" class="headerlink" title="1.vue发送短信逻辑"></a>1.vue发送短信逻辑</h1><ul><li><p>前端函数如下,js方法代码无需更改，前端代码逻辑在<code>components\common\lab_header.vue</code></p></li><li><p>只需要修改<code>components\axios_api\http.js</code>中调用的后端地址</p><ul><li>&#96;&#96;&#96;javascript<br>&#x2F;&#x2F; axios.defaults.baseURL &#x3D; “<a href="http://127.0.0.1:8000/&quot;">http://127.0.0.1:8000/&quot;</a><br>axios.defaults.baseURL &#x3D; “<a href="http://192.168.56.100:8888/&quot;">http://192.168.56.100:8888/&quot;</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">    // 获取手机验证码</span><br><span class="line">    sendcode() &#123;</span><br><span class="line">      // 0. 判断是否发送中</span><br><span class="line">      if (this.is_send) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      //1.检查手机号和验证码是否合法</span><br><span class="line">      this.check_phone()</span><br><span class="line">      this.check_imgcode()</span><br><span class="line">      if (this.phone_error || this.imgCode_error) &#123;</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      // 2.短信发送</span><br><span class="line">      // imgCode: &#x27;&#x27;,</span><br><span class="line">      // uuid: &#x27;&#x27;,</span><br><span class="line">      var data = &#123; phone: this.phone, image_code_uuid: this.uuid, image_code: this.imgCode &#125;</span><br><span class="line">      this.is_send = true</span><br><span class="line">      send_phone_code_post(data).then((res) =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">        if (res.code != 0) &#123;</span><br><span class="line">          this.errorMsg = res.msg</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">        let t = 10</span><br><span class="line">        let si = setInterval(() =&gt; &#123;</span><br><span class="line">          this.msgButtonText = t</span><br><span class="line">          t = t - 1</span><br><span class="line">          if (t == 0) &#123;</span><br><span class="line">            this.is_send = false</span><br><span class="line">            this.msgButtonText = &#x27;获取手机验证码&#x27;</span><br><span class="line">            clearInterval(si)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 1000)</span><br><span class="line"></span><br><span class="line">        // if (res.data.code == 200) &#123;</span><br><span class="line">        //   console.log(&#x27;短信发送成功&#x27;)</span><br><span class="line">        //   alert(res.data.message)</span><br><span class="line">        // &#125; else &#123;</span><br><span class="line">        //   alert(res.data.message)</span><br><span class="line">        // &#125;</span><br><span class="line">      &#125;).catch((err) =&gt; &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day04 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.创建课程app</title>
      <link href="//pages/553a6d/"/>
      <url>//pages/553a6d/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建course模型"><a href="#1-创建course模型" class="headerlink" title="1.创建course模型"></a>1.创建course模型</h1><h3 id="1-1-创建用户模型course"><a href="#1-1-创建用户模型course" class="headerlink" title="1.1 创建用户模型course"></a>1.1 创建用户模型course</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ../manage.py startapp course  <span class="comment"># 创建course模型</span></span><br></pre></td></tr></table></figure><h3 id="1-2-在setting-py中注册course模型（第一步）"><a href="#1-2-在setting-py中注册course模型（第一步）" class="headerlink" title="1.2 在setting.py中注册course模型（第一步）"></a>1.2 在setting.py中注册course模型（第一步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;course.apps.CourseConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 注：pycharm无法联想，需要把apps文件夹设置为源根</span></span><br></pre></td></tr></table></figure><h3 id="1-3-syl-x2F-urls-py添加路由（第二步）"><a href="#1-3-syl-x2F-urls-py添加路由（第二步）" class="headerlink" title="1.3 syl&#x2F;urls.py添加路由（第二步）"></a>1.3 syl&#x2F;urls.py添加路由（第二步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;course/&#x27;</span>, include(<span class="string">&#x27;course.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-4-创建-course-x2F-urls-py路由文件（第三步）"><a href="#1-4-创建-course-x2F-urls-py路由文件（第三步）" class="headerlink" title="1.4 创建 course&#x2F;urls.py路由文件（第三步）"></a>1.4 创建 course&#x2F;urls.py路由文件（第三步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.增加抽象基类</title>
      <link href="//pages/60d53c/"/>
      <url>//pages/60d53c/</url>
      
        <content type="html"><![CDATA[<h1 id="1-syl-utils-MyBaseModel-py增加抽象基类"><a href="#1-syl-utils-MyBaseModel-py增加抽象基类" class="headerlink" title="1.syl/utils/MyBaseModel.py增加抽象基类"></a>1.<code>syl/utils/MyBaseModel.py</code>增加抽象基类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(models.Model):</span><br><span class="line">    create_time = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>, auto_now_add=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(<span class="string">&#x27;更新时间&#x27;</span>, auto_now=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        abstract = <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.课程相关5张表设计</title>
      <link href="//pages/1fedb4/"/>
      <url>//pages/1fedb4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-课程主页面3张表"><a href="#1-课程主页面3张表" class="headerlink" title="1.课程主页面3张表"></a>1.课程主页面3张表</h1><p><img src="./assets/image-20201010224808005.png" style="width: 800px; margin-left: 40px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseType</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程类别&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    sequence = models.IntegerField(<span class="string">&#x27;展示顺序&#x27;</span>, default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_coursetype&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseTag</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程标签&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    sequence = models.IntegerField(<span class="string">&#x27;展示顺序&#x27;</span>, default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_coursetag&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    STATUS = (</span><br><span class="line">        (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;即将上线&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;已上线&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;已下线&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程名&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;课程描述&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;课程logo&#x27;</span>, upload_to=<span class="string">&#x27;course&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_type = models.ForeignKey(CourseType, verbose_name=<span class="string">&#x27;课程类型&#x27;</span>, on_delete=models.SET_NULL, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_tag = models.ManyToManyField(CourseTag, verbose_name=<span class="string">&#x27;课程标签&#x27;</span>)</span><br><span class="line">    status = models.CharField(<span class="string">&#x27;课程状态&#x27;</span>, choices=STATUS, max_length=<span class="number">8</span>, default=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    attention = models.IntegerField(<span class="string">&#x27;关注人数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    learner = models.IntegerField(<span class="string">&#x27;学习人数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_course&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><h1 id="2-课程章节表2张表"><a href="#2-课程章节表2张表" class="headerlink" title="2.课程章节表2张表"></a>2.课程章节表2张表</h1><p><img src="./assets/image-20201010225114652.png" style="width: 800px; margin-left: 40px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chapters</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;章标题&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;章序号&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(Course, related_name=<span class="string">&#x27;chapters&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_chapters&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sections</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;节标题&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;节序号&#x27;</span>)</span><br><span class="line">    chapters = models.ForeignKey(Chapters, related_name=<span class="string">&#x27;sections&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line">    learn_time = models.IntegerField(<span class="string">&#x27;学习小时&#x27;</span>, default=<span class="number">1</span>)</span><br><span class="line">    video = models.FileField(<span class="string">&quot;上传视频&quot;</span>, upload_to=<span class="string">&quot;videos/%Y%m%d/&quot;</span>, blank=<span class="literal">True</span>, max_length=<span class="number">1024</span>)</span><br><span class="line">    seq_num = models.IntegerField(<span class="string">&quot;序号&quot;</span>, default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_sections&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><h1 id="3-course-admin-py注册后台管理"><a href="#3-course-admin-py注册后台管理" class="headerlink" title="3.course/admin.py注册后台管理"></a>3.<code>course/admin.py</code>注册后台管理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.CourseType)</span><br><span class="line">admin.site.register(models.CourseTag)</span><br><span class="line">admin.site.register(models.Course)</span><br><span class="line">admin.site.register(models.Sections)</span><br><span class="line">admin.site.register(models.Chapters)</span><br></pre></td></tr></table></figure><h1 id="4-迁移表"><a href="#4-迁移表" class="headerlink" title="4.迁移表"></a>4.迁移表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.课程主页面三个接口开发</title>
      <link href="//pages/0702e9/"/>
      <url>//pages/0702e9/</url>
      
        <content type="html"><![CDATA[<h1 id="0-课程主页面接口对应页面效果"><a href="#0-课程主页面接口对应页面效果" class="headerlink" title="0.课程主页面接口对应页面效果"></a>0.课程主页面接口对应页面效果</h1><p><img src="./assets/image-20201010224808005.png" style="width: 800px; margin-left: 40px;"> </img></p><p><img src="./assets/image-20201107092926519.png" style="width: 1000px; margin-left: 50px;"> </img></p><h1 id="1-课程类别接口开发"><a href="#1-课程类别接口开发" class="headerlink" title="1.课程类别接口开发"></a>1.课程类别接口开发</h1><h3 id="1-1-course-urls-py添加路由"><a href="#1-1-course-urls-py添加路由" class="headerlink" title="1.1 course/urls.py添加路由"></a>1.1 <code>course/urls.py</code>添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter    <span class="comment"># 导入DRF得DefaultRouter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 有根路由</span></span><br><span class="line">router.register(<span class="string">r&#x27;type&#x27;</span>, views.CourseTypeViewSet)   <span class="comment"># 写路由</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls                          <span class="comment"># 把两个路由列表相加</span></span><br></pre></td></tr></table></figure><h3 id="1-2-course-serializers-py写序列化器"><a href="#1-2-course-serializers-py写序列化器" class="headerlink" title="1.2 course/serializers.py写序列化器"></a>1.2 <code>course/serializers.py</code>写序列化器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line">from course.models import CourseType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseTypeSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = CourseType</span><br><span class="line">        fields = &#x27;__all__&#x27;</span><br></pre></td></tr></table></figure><h3 id="1-3course-views-py添加视图函数"><a href="#1-3course-views-py添加视图函数" class="headerlink" title="1.3course/views.py添加视图函数"></a>1.3<code>course/views.py</code>添加视图函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import viewsets</span><br><span class="line">from rest_framework.pagination import PageNumberPagination</span><br><span class="line"></span><br><span class="line">from course.models import *</span><br><span class="line">from course.serializers import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PageNum(PageNumberPagination):</span><br><span class="line">    page_size_query_param = &#x27;page_size&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseTypeViewSet(viewsets.ModelViewSet):</span><br><span class="line">    queryset = CourseType.objects.all()</span><br><span class="line">    serializer_class = CourseTypeSerializer</span><br></pre></td></tr></table></figure><h3 id="1-4-course-admin-py注册后台管理"><a href="#1-4-course-admin-py注册后台管理" class="headerlink" title="1.4 course/admin.py注册后台管理"></a>1.4 <code>course/admin.py</code>注册后台管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from . import models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.CourseType)</span><br></pre></td></tr></table></figure><h3 id="1-5-测试接口"><a href="#1-5-测试接口" class="headerlink" title="1.5 测试接口"></a>1.5 测试接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Http</span>:<span class="comment">//192.168.56.100:8888/course/type/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201010231241304.png" style="width: 700px; margin-left: 50px;"> </img></p><h1 id="2-标签接口开发"><a href="#2-标签接口开发" class="headerlink" title="2.标签接口开发"></a>2.标签接口开发</h1><h3 id="2-1-course-urls-py添加路由"><a href="#2-1-course-urls-py添加路由" class="headerlink" title="2.1 course/urls.py添加路由"></a>2.1 <code>course/urls.py</code>添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">r&#x27;tag&#x27;</span>, views.CourseTagViewSet)</span><br></pre></td></tr></table></figure><h3 id="2-2-course-serializers-py写序列化器"><a href="#2-2-course-serializers-py写序列化器" class="headerlink" title="2.2 course/serializers.py写序列化器"></a>2.2 <code>course/serializers.py</code>写序列化器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line">from course.models import CourseTag</span><br><span class="line"></span><br><span class="line">class CourseTagSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = CourseTag</span><br><span class="line">        fields = &#x27;__all__&#x27;</span><br></pre></td></tr></table></figure><h3 id="2-3course-views-py添加视图函数"><a href="#2-3course-views-py添加视图函数" class="headerlink" title="2.3course/views.py添加视图函数"></a>2.3<code>course/views.py</code>添加视图函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from course.models import *</span><br><span class="line">from course.serializers import *</span><br><span class="line"></span><br><span class="line">class CourseTagViewSet(viewsets.ModelViewSet):</span><br><span class="line">    queryset = CourseTag.objects.all()</span><br><span class="line">    serializer_class = CourseTagSerializer</span><br></pre></td></tr></table></figure><h3 id="1-4-course-admin-py注册后台管理-1"><a href="#1-4-course-admin-py注册后台管理-1" class="headerlink" title="1.4 course/admin.py注册后台管理"></a>1.4 <code>course/admin.py</code>注册后台管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from . import models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.CourseTag)</span><br></pre></td></tr></table></figure><h3 id="1-5-测试接口-1"><a href="#1-5-测试接口-1" class="headerlink" title="1.5 测试接口"></a>1.5 测试接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Http</span>:<span class="comment">//192.168.56.100:8888/course/tag/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201010231955504.png" style="width: 700px; margin-left: 50px;"> </img></p><h1 id="3-课程接口开发"><a href="#3-课程接口开发" class="headerlink" title="3.课程接口开发"></a>3.课程接口开发</h1><h3 id="3-1-course-urls-py添加路由"><a href="#3-1-course-urls-py添加路由" class="headerlink" title="3.1 course/urls.py添加路由"></a>3.1 <code>course/urls.py</code>添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">r&#x27;course&#x27;</span>, views.CourseViewSet)</span><br></pre></td></tr></table></figure><h3 id="3-2-course-serializers-py写序列化器"><a href="#3-2-course-serializers-py写序列化器" class="headerlink" title="3.2 course/serializers.py写序列化器"></a>3.2 <code>course/serializers.py</code>写序列化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Course</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># 所有字段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SectionsSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Sections</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChaptersSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    sections = SectionsSerializer(many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Chapters</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseDeepSerializer</span>(<span class="title class_ inherited__">CourseSerializer</span>):</span><br><span class="line">    <span class="comment"># 字段名名, 必须是模型可以 . 引用到的变量</span></span><br><span class="line">    <span class="comment"># Course().   &quot;chapters&quot;  才能作为字段名,  如果是集合, 需要加many=True,</span></span><br><span class="line">    chapters = ChaptersSerializer(many=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="3-3course-views-py添加视图函数"><a href="#3-3course-views-py添加视图函数" class="headerlink" title="3.3course/views.py添加视图函数"></a>3.3<code>course/views.py</code>添加视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> course.serializers <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    queryset = Course.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CourseDeepSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定过滤方法类, 排序方法类, 一个或多个</span></span><br><span class="line">    filter_backends = (DjangoFilterBackend, OrderingFilter)  <span class="comment"># 同时支持过滤和排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定排序字段, 不设置, 排序功能不起效</span></span><br><span class="line">    ordering_fields = (<span class="string">&#x27;attention&#x27;</span>, <span class="string">&#x27;learner&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定过滤字段, 不设置, 过滤功能不起效</span></span><br><span class="line">    filter_fields = (<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;course_type&#x27;</span>, <span class="string">&#x27;course_tag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义分页器 覆盖全局配置</span></span><br><span class="line">    pagination_class = PageNum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> CourseSerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CourseDeepSerializer</span><br></pre></td></tr></table></figure><h3 id="3-4-course-admin-py注册后台管理"><a href="#3-4-course-admin-py注册后台管理" class="headerlink" title="3.4 course/admin.py注册后台管理"></a>3.4 <code>course/admin.py</code>注册后台管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from . import models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.Course)</span><br></pre></td></tr></table></figure><h3 id="3-5-测试接口"><a href="#3-5-测试接口" class="headerlink" title="3.5 测试接口"></a>3.5 测试接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Http</span>:<span class="comment">//192.168.56.100:8888/course/course/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201010233036430.png" style="width: 700px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.增加media文件配置</title>
      <link href="//pages/d5ca88/"/>
      <url>//pages/d5ca88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-增加media文件配置"><a href="#1-增加media文件配置" class="headerlink" title="1.增加media文件配置"></a>1.增加media文件配置</h1><h3 id="1-1-syl-settings-py"><a href="#1-1-syl-settings-py" class="headerlink" title="1.1 syl/settings.py"></a>1.1 <code>syl/settings.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>)   <span class="comment"># /teach/shiyanlou_project/syl/media</span></span><br></pre></td></tr></table></figure><h3 id="1-2-syl-urls-py"><a href="#1-2-syl-urls-py" class="headerlink" title="1.2 syl/urls.py"></a>1.2 <code>syl/urls.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> syl <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h3 id="1-3-测试静态文件访问"><a href="#1-3-测试静态文件访问" class="headerlink" title="1.3 测试静态文件访问"></a>1.3 测试静态文件访问</h3><ul><li>放一个测试图片到<code> syl/media/linux.jpg</code>中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/media/linux.jpg</span></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="./assets/image-20201010223629742.png" style="width: 600px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09.视频播放页面接口开发</title>
      <link href="//pages/5430a2/"/>
      <url>//pages/5430a2/</url>
      
        <content type="html"><![CDATA[<h1 id="0-播放页面"><a href="#0-播放页面" class="headerlink" title="0.播放页面"></a>0.播放页面</h1><p><img src="./assets/image-20201011112226403.png" style="width: 700px; margin-left: 50px;"> </img></p><h1 id="1-视频播放页面接口开发"><a href="#1-视频播放页面接口开发" class="headerlink" title="1.视频播放页面接口开发"></a>1.视频播放页面接口开发</h1><h3 id="1-1-course-urls-py添加路由"><a href="#1-1-course-urls-py添加路由" class="headerlink" title="1.1 course/urls.py添加路由"></a>1.1 <code>course/urls.py</code>添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">r&#x27;sections&#x27;</span>, views.SectionsViewSet)</span><br></pre></td></tr></table></figure><h3 id="1-2-course-serializers-py写序列化器"><a href="#1-2-course-serializers-py写序列化器" class="headerlink" title="1.2 course/serializers.py写序列化器"></a>1.2 <code>course/serializers.py</code>写序列化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> Sections</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SectionsSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Sections</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-3course-views-py添加视图函数"><a href="#1-3course-views-py添加视图函数" class="headerlink" title="1.3course/views.py添加视图函数"></a>1.3<code>course/views.py</code>添加视图函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import viewsets</span><br><span class="line">from course.models import *</span><br><span class="line">from course.serializers import *</span><br><span class="line"></span><br><span class="line">class SectionsViewSet(viewsets.ModelViewSet):</span><br><span class="line">    queryset = Sections.objects.all()</span><br><span class="line">    serializer_class = SectionsSerializer</span><br></pre></td></tr></table></figure><h3 id="1-4-course-admin-py注册后台管理"><a href="#1-4-course-admin-py注册后台管理" class="headerlink" title="1.4 course/admin.py注册后台管理"></a>1.4 <code>course/admin.py</code>注册后台管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from . import models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.Sections)</span><br></pre></td></tr></table></figure><h3 id="1-5-测试接口"><a href="#1-5-测试接口" class="headerlink" title="1.5 测试接口"></a>1.5 测试接口</h3><ul><li>测试接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Http</span>:<span class="comment">//192.168.56.100:8888/course/sections/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201011111239339.png" style="width: 900px; margin-left: 50px;"> </img></p><ul><li>返回事例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T01:57:03.431870Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T02:03:47.543988Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux基本概念介绍&quot;</span>,</span><br><span class="line">    <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;learn_time&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;video&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/videos/20201011/07.检查用户名是否使用接口.mp4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;seq_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;chapters&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.课程添加关注接口</title>
      <link href="//pages/b94d70/"/>
      <url>//pages/b94d70/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08.章节页面接口开发</title>
      <link href="//pages/2803f8/"/>
      <url>//pages/2803f8/</url>
      
        <content type="html"><![CDATA[<h1 id="0-具体课程章节页面"><a href="#0-具体课程章节页面" class="headerlink" title="0.具体课程章节页面"></a>0.具体课程章节页面</h1><p><img src="./assets/image-20201011111646024.png" style="width: 800px; margin-left: 50px;"> </img></p><h1 id="1-获取具体课程章节信息"><a href="#1-获取具体课程章节信息" class="headerlink" title="1.获取具体课程章节信息"></a>1.获取具体课程<code>章节</code>信息</h1><h3 id="1-1-路由地址"><a href="#1-1-路由地址" class="headerlink" title="1.1 路由地址"></a>1.1 路由地址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/course/course/2/</span></span><br></pre></td></tr></table></figure><h3 id="1-2-测试结果"><a href="#1-2-测试结果" class="headerlink" title="1.2 测试结果"></a>1.2 测试结果</h3><p><img src="./assets/image-20201011104800116.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li>返回结果展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;chapters&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;sections&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T01:57:03.431870Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T02:03:47.543988Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux基本概念介绍&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;learn_time&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;video&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/videos/20201011/07.%E6%A3%80%E6%9F%A5%E7%94%A8%E6%88%B7%E5%90%8D%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3.mp4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;seq_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;chapters&quot;</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T01:53:59.821333Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T01:53:59.821395Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux 系统简介&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T01:46:26.000141Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T02:23:03.753819Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux基础入门&quot;</span>,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/course/linux.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attention&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;learner&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">&quot;course_type&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;course_tag&quot;</span>: [</span><br><span class="line">        <span class="number">4</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day06 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.通过课程查询商品信息</title>
      <link href="//pages/543f8f/"/>
      <url>//pages/543f8f/</url>
      
        <content type="html"><![CDATA[<h1 id="1-只需要修改-course-course-1-返回的数据即可"><a href="#1-只需要修改-course-course-1-返回的数据即可" class="headerlink" title="1.只需要修改/course/course/1/返回的数据即可"></a>1.只需要修改<code>/course/course/1/</code>返回的数据即可</h1><h3 id="1-1-course-serializers-py添加商品信息序列化"><a href="#1-1-course-serializers-py添加商品信息序列化" class="headerlink" title="1.1  course/serializers.py添加商品信息序列化"></a>1.1 <code> course/serializers.py</code>添加商品信息序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加显示商品字段</span></span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseDeepSerializer</span>(<span class="title class_ inherited__">CourseSerializer</span>):</span><br><span class="line">    goods_set = GoodsSerializer(many=<span class="literal">True</span>)</span><br><span class="line">    chapters = ChaptersSerializer(many=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-在-goods-serializers-py中添加序列化函数"><a href="#1-2-在-goods-serializers-py中添加序列化函数" class="headerlink" title="1.2 在 goods/serializers.py中添加序列化函数"></a>1.2 在 <code>goods/serializers.py</code>中添加序列化函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Goods</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># 所有字段</span></span><br></pre></td></tr></table></figure><h1 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Http://192.168.56.100:8888/course/course/1/</span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201013200707870.png" style="width: 800px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;goods_set&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-13T03:42:53.449302Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-13T03:42:53.449842Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;goods_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;product_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux课程体系&quot;</span>,</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: <span class="string">&quot;55.00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;channel_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;period&quot;</span>: <span class="number">365</span>,</span><br><span class="line">            <span class="string">&quot;is_launched&quot;</span>: true,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;chapters&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;sections&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:57:14.151331Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T14:57:14.151364Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux 系统简介&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;learn_time&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;video&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/videos/20201011/07.%E6%A3%80%E6%9F%A5%E7%94%A8%E6%88%B7%E5%90%8D%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3.mp4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;seq_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;chapters&quot;</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:56:34.585658Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T14:56:34.585689Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux 系统简介&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:44:31.252836Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-12T12:32:20.045791Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux入门课程&quot;</span>,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/course/linux.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attention&quot;</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="string">&quot;learner&quot;</span>: <span class="number">222</span>,</span><br><span class="line">    <span class="string">&quot;course_type&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;course_tag&quot;</span>: [</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day08 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.商品模块表结构分析</title>
      <link href="//pages/e299a0/"/>
      <url>//pages/e299a0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-表结构分析"><a href="#1-表结构分析" class="headerlink" title="1.表结构分析"></a>1.表结构分析</h1><h3 id="1-1-商品模块表结构分析"><a href="#1-1-商品模块表结构分析" class="headerlink" title="1.1 商品模块表结构分析"></a>1.1 商品模块表结构分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    GOODS_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Vip&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Course&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    CHANNEL_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;普通&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;促销&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    course = models.ForeignKey(<span class="string">&#x27;course.Course&#x27;</span>, on_delete=models.PROTECT)</span><br><span class="line">    goods_type = models.CharField(<span class="string">&#x27;商品种类&#x27;</span>, choices=GOODS_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    product_id = models.CharField(<span class="string">&#x27;产品id&#x27;</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    price = models.DecimalField(<span class="string">&#x27;商品价格&#x27;</span>, max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    channel_type = models.CharField(<span class="string">&#x27;购买渠道&#x27;</span>, choices=CHANNEL_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line">    is_launched = models.BooleanField(<span class="string">&#x27;是否上架&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_goods&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orders</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    PAY_METHOD = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;支付宝&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    ORDER_STATUS = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;待支付&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;已支付&quot;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&quot;已取消&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.PROTECT, verbose_name=<span class="string">&quot;下单用户&quot;</span>)</span><br><span class="line">    goods = models.ForeignKey(Goods, on_delete=models.PROTECT)</span><br><span class="line">    order_id = models.CharField(<span class="string">&#x27;订单号&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    trade_no = models.CharField(<span class="string">&#x27;支付宝订单号&#x27;</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>)  <span class="comment"># 28位</span></span><br><span class="line">    pay_time = models.DateTimeField(<span class="string">&#x27;支付时间&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    pay_method = models.CharField(<span class="string">&#x27;支付方式&#x27;</span>, choices=PAY_METHOD, default=<span class="number">1</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    status = models.CharField(<span class="string">&#x27;支付状态&#x27;</span>, choices=ORDER_STATUS, default=<span class="number">1</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    total_amount = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;商品总金额&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_orders&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.order_id</span><br></pre></td></tr></table></figure><h3 id="1-2-course-models-py中添加用户购买课程"><a href="#1-2-course-models-py中添加用户购买课程" class="headerlink" title="1.2 course/models.py中添加用户购买课程"></a>1.2 <code>course/models.py</code>中添加用户购买课程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserCourse</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户购买的课程</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;paycourse&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(<span class="string">&#x27;course.Course&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;payuser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_usercourse&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户:%s, 课程:%s&quot;</span> % (self.user.username, self.course.title)</span><br></pre></td></tr></table></figure><h3 id="1-3-user-models-py添加VIP表并添加用户关联"><a href="#1-3-user-models-py添加VIP表并添加用户关联" class="headerlink" title="1.3 user/models.py添加VIP表并添加用户关联"></a>1.3 <code>user/models.py</code>添加VIP表并添加用户关联</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Vip表，并和用户进行关联</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vip</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    vip_choise = (</span><br><span class="line">        (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;普通会员&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;高级会员&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;vip名称&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    vip_type = models.CharField(<span class="string">&#x27;Vip种类&#x27;</span>,choices=vip_choise ,max_length=<span class="number">4</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;vip描述&#x27;</span>,max_length=<span class="number">255</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_vip&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.CharField(<span class="string">&#x27;手机号&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;user&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line">    nick_name = models.CharField(<span class="string">&#x27;昵称&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;地址&#x27;</span>,max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    vip = models.ForeignKey(Vip, on_delete=models.SET_NULL, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line">    vip_expiration = models.DateField(<span class="string">&#x27;vip到期时间&#x27;</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_user&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="2-admin-py中注册"><a href="#2-admin-py中注册" class="headerlink" title="2.admin.py中注册"></a>2.admin.py中注册</h1><h3 id="2-1-goods-x2F-admin-py中注册"><a href="#2-1-goods-x2F-admin-py中注册" class="headerlink" title="2.1 goods&#x2F;admin.py中注册"></a>2.1 goods&#x2F;admin.py中注册</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(models.Goods)</span><br><span class="line">admin.site.register(models.GoodsCourse)</span><br><span class="line">admin.site.register(models.Orders)</span><br></pre></td></tr></table></figure><h3 id="2-2-user-x2F-admin-py中注册"><a href="#2-2-user-x2F-admin-py中注册" class="headerlink" title="2.2 user&#x2F;admin.py中注册"></a>2.2 user&#x2F;admin.py中注册</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.User)</span><br><span class="line">admin.site.register(models.Vip)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day08 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/71c3ce/"/>
      <url>//pages/71c3ce/</url>
      
        <content type="html"><![CDATA[<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><ul><li>1.手绘支付宝支付原理图</li><li>2.订单+支付的代码，博客（代码看着写）</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day08 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.创建商品APP</title>
      <link href="//pages/8df5cd/"/>
      <url>//pages/8df5cd/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建goods模型"><a href="#1-创建goods模型" class="headerlink" title="1.创建goods模型"></a>1.创建goods模型</h1><h3 id="3-1-创建用户模型course"><a href="#3-1-创建用户模型course" class="headerlink" title="3.1 创建用户模型course"></a>3.1 创建用户模型course</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ../manage.py startapp goods  <span class="comment"># 创建goods模型</span></span><br></pre></td></tr></table></figure><h3 id="3-2-在setting-py中注册goods模型（第一步）"><a href="#3-2-在setting-py中注册goods模型（第一步）" class="headerlink" title="3.2 在setting.py中注册goods模型（第一步）"></a>3.2 在setting.py中注册goods模型（第一步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;goods.apps.GoodsConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 注：pycharm无法联想，需要把apps文件夹设置为源根</span></span><br></pre></td></tr></table></figure><h3 id="3-3-syl-x2F-urls-py添加路由（第二步）"><a href="#3-3-syl-x2F-urls-py添加路由（第二步）" class="headerlink" title="3.3 syl&#x2F;urls.py添加路由（第二步）"></a>3.3 syl&#x2F;urls.py添加路由（第二步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, include(<span class="string">&#x27;goods.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-4-创建-goods-x2F-urls-py路由文件（第三步）"><a href="#3-4-创建-goods-x2F-urls-py路由文件（第三步）" class="headerlink" title="3.4 创建 goods&#x2F;urls.py路由文件（第三步）"></a>3.4 创建 goods&#x2F;urls.py路由文件（第三步）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day08 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.支付宝支付原理</title>
      <link href="//pages/a26266/"/>
      <url>//pages/a26266/</url>
      
        <content type="html"><![CDATA[<h1 id="1-支付宝支付流程"><a href="#1-支付宝支付流程" class="headerlink" title="1.支付宝支付流程"></a>1.支付宝支付流程</h1><p><a href="https://www.lanqiao.cn/vip">https://www.lanqiao.cn/vip</a></p><p><img src="./assets/image-20201014154214278.png" style="width: 800px; margin-left: 50px;"> </img></p><p><img src="./assets/image-20201012224011582.png" style="width: 800px; margin-left: 50px;"> </img></p><h1 id="2-新建支付宝应用"><a href="#2-新建支付宝应用" class="headerlink" title="2.新建支付宝应用"></a>2.新建支付宝应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问&quot;支付宝开发平台&quot;登录，可以访问开发者中心</span></span><br><span class="line">https://<span class="built_in">open</span>.alipay.com/platform/home.htm</span><br><span class="line"><span class="comment"># 可以参考&quot;电脑网站支付&quot; 熟悉电脑支付整体流程</span></span><br><span class="line">https://docs.<span class="built_in">open</span>.alipay.com/<span class="number">270</span>/<span class="number">105899</span>/</span><br></pre></td></tr></table></figure><h3 id="2-1-第一步：创建应用（这里使用沙箱环境测试）"><a href="#2-1-第一步：创建应用（这里使用沙箱环境测试）" class="headerlink" title="2.1 第一步：创建应用（这里使用沙箱环境测试）"></a>2.1 第一步：创建应用（这里使用沙箱环境测试）</h3><ul><li>沙箱环境说明<ul><li>线上环境需要创建应用，因为我们不是企业，没有资质，所以只能申请沙箱环境</li><li>简单来讲沙箱环境就是给开发者使用的测试环境</li><li><code>沙箱环境地址：</code><a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></li></ul></li></ul><p><img src="./assets/image-20201012220846793.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li><code>公钥加密、私钥解密</code></li></ul><p><img src="./assets/image-20201015091404959.png" style="width: 700px; margin-left: 50px;"> </img></p><h3 id="2-2-按照官方要求生成秘钥"><a href="#2-2-按照官方要求生成秘钥" class="headerlink" title="2.2 按照官方要求生成秘钥"></a>2.2 按照官方要求生成秘钥</h3><p><code>生成秘钥参考官网：</code><a href="https://docs.open.alipay.com/291/105971">https://docs.open.alipay.com/291/105971</a>　</p><ul><li>一定要存储两个东西<ul><li>支付宝公钥：我发送信息给支付宝，使用支付宝公钥进行加密</li><li>app私钥（我自己生成的）：支付宝给我发送的信息是用我刚刚上传的app公钥加密，只有我自己的私钥可以解密</li></ul></li></ul><p><img src="./assets/image-20201012221745829.png" style="width: 800px; margin-left: 50px;"> </img></p><h3 id="2-3-把生成的app公钥粘贴到沙箱环境的app中"><a href="#2-3-把生成的app公钥粘贴到沙箱环境的app中" class="headerlink" title="2.3 把生成的app公钥粘贴到沙箱环境的app中"></a>2.3 把生成的app公钥粘贴到沙箱环境的app中</h3><p><code>沙箱环境地址：</code><a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p><img src="./assets/image-20201012222054188.png" style="width: 800px; margin-left: 50px;"> </img></p><h3 id="2-4-查看沙箱环境账号和密码"><a href="#2-4-查看沙箱环境账号和密码" class="headerlink" title="2.4 查看沙箱环境账号和密码"></a>2.4 查看沙箱环境账号和密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 买家信息</span></span><br><span class="line">买家账号foqhub3270@sandbox.com</span><br><span class="line">登录密码<span class="number">111111</span></span><br><span class="line">支付密码<span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 商家账号uqqgmd6602@sandbox.com</span></span><br><span class="line">商户UID2088102180143385</span><br><span class="line">登录密码<span class="number">111111</span></span><br></pre></td></tr></table></figure><h1 id="3-测试支付宝获取支付宝扫码链接"><a href="#3-测试支付宝获取支付宝扫码链接" class="headerlink" title="3.测试支付宝获取支付宝扫码链接"></a>3.测试支付宝获取支付宝扫码链接</h1><h3 id="3-1-支付宝开发网址"><a href="#3-1-支付宝开发网址" class="headerlink" title="3.1 支付宝开发网址"></a>3.1 支付宝开发网址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">支付宝开放平台： <span class="attr">https</span>:<span class="comment">//open.alipay.com/platform/home.htm</span></span><br><span class="line">支付宝沙箱环境： <span class="attr">https</span>:<span class="comment">//openhome.alipay.com/platform/appDaily.htm?tab=info</span></span><br><span class="line">支付宝开发者文档：<span class="attr">https</span>:<span class="comment">//openhome.alipay.com/developmentDocument.htm</span></span><br><span class="line">电脑网站支付流程：<span class="attr">https</span>:<span class="comment">//docs.open.alipay.com/270</span></span><br><span class="line">生成签名：<span class="attr">https</span>:<span class="comment">//docs.open.alipay.com/291/106103/</span></span><br><span class="line">python-alipay-adk : <span class="attr">https</span>:<span class="comment">//github.com/fzlee/alipay/blob/master/README.zh-hans.md</span></span><br></pre></td></tr></table></figure><h3 id="3-2-说明"><a href="#3-2-说明" class="headerlink" title="3.2 说明"></a>3.2 说明</h3><ul><li><p>阿里官方没有提供python对接支付的sdk，但是python库中有非官方的sdk包可以使用</p></li><li><p>python-alipay-adk : <a href="https://github.com/fzlee/alipay/blob/master/README.zh-hans.md">https://github.com/fzlee/alipay/blob/master/README.zh-hans.md</a></p></li><li><p>使用起来非常简单，只要传入几个必要的参数就可以完成</p></li><li><p>由于支付对安全要求很高，所以要理解对接支付宝安全的流程：**<code>公钥加密、私钥解密</code>** 这八个字</p></li></ul><h3 id="3-3-app-private-key-pem-app私钥"><a href="#3-3-app-private-key-pem-app私钥" class="headerlink" title="3.3 app_private_key.pem app私钥"></a>3.3 <code>app_private_key.pem</code> app私钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpAIBAAKCAQEAxXRdL+ALzW4AW6ndW5/ZD44ppPsfm9If/oc3pc1gmqjT7z73swlUhotEPZnLsk8hqdEoR9fg/+0XijuJQqnU+CU3pptdXgkIcyq/fyvpRgkX2OA9G7CHEveZ97leaOG2RI1i2JvgUiM+O2LiDAAbTWtk8Chx+j2Z+R5s22zgI/y+45bcMht/YDxAbmgDFkBq32PyHlu3gTjoB7SqBZ8ecU8AKBxSjUPB3t5ls4T2P3Xy/ER2/PFcnh0vZGQsZRbHQ6wS1Jsql/3Wu1+tvHvIiKKXPGUcZe7czfqfwcIwVPrntEdPYC2JUSzC94vFwcMNAlai/aiWDCc4jDt1W7oetwIDAQABAoIBAQDBNBESjUk/I0laZ6Vex9PeMp5w/f95umrv5GMA6yqBanyldplsJ877Lz4AgIId4Ovxe+TMF2HjSZxk98hg4Eiw3cnMTe1X28LW3Zcu2kqQ6sjYvuFMPLiOSJPxHwJP4bs07Jsxk6Q0+qMj/KduUpRkdpb3nruXvbrxVWHyel//FM6jqCvxxFWBhCikDjNPZEgPJa+at1viN/u1eOoEO5/SBkVYePF6O3Nx8rR20nG2KfvvLkfWfBvVnIWdmkUmqMX2EIXF+af66FlcgWTszvkxpIS3KnHGK5rHe2+uTuJp57MY0WnJq5v6vKwhOADvNiwLg2dwLDSq9SRJzWnsm+RBAoGBAP0wA92l9IlaggLD8WCFeVICiNWGlA2jSYfindMXX9rf6xo8hSr/YWfyxu6guBqvo7b/onG7DwyrDOvlq7X/kQNbtxkis/oYBeWssF6ab10CtFuF1wUP5jXoaAMUIy2xrXcmO5bJsvTE6O9VZophlSo0uvXxBJRSgqfEo0wEET6HAoGBAMel3KitQQArxiD8SHDE6q1hb5elIDTyYiJI65EagWO41xcBMduu0tjZyoTbL6MWKHCxxXuOsWpQjtuF8FVesDMBBpC9VLO4IvnQDZb7lKXWgEnMc4gckL+KNzgkIzYNs1jW6IYfcY82iP22AoH3xbnaYI56sH2lARUZcUNe/3pRAoGBAPWvYSD1SEz8yco7L4A1JRwCn5tsA0EUoWa97d6IARkYTkBgV+z4ciH3gTjQNraWl2wdthlcpmbpmRlT/gMWozY6CnvWpATcyOQtZdv3SndcB34EazlbS04mXsAWC2js0GIddJeG1CQW695K5b0EokWZc47yuTngsy5vbvJ1w/IDAoGAW5jpaCo1DFMJD9Evmy19ThbKEBUedaxPAdPa4DP88Te410EhEt1et0cU92dor7ZWz32AUXPiShizslv9K+3JgV0TGg0Dc4Ej6uFdmsvKI1wKd9FpoCUa9AYB16wcy4v1oOjYvdBnVYF70ItVEzQOb3qVmkkH+F1f5cJKiNJo/EECgYA1OZn4LqvFsK/WG23FFcW6wvGOKjHgAfwENILiHBjHNESYBtwnRaV0Vgikz3tfC5qehmuJT+N+bjsqsqaM3ZR50/xqWx6qGenA5KbGyMkWMu4LFAuqGKz1ocH2kjM+jc0eNRzABj7A9ATx+1nfiKD0ehc6lrXIp71rItEuKxyO8w==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><h3 id="3-4-alipay-public-key-pem-支付宝公钥"><a href="#3-4-alipay-public-key-pem-支付宝公钥" class="headerlink" title="3.4 alipay_public_key.pem 支付宝公钥"></a>3.4 <code>alipay_public_key.pem</code> 支付宝公钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDIgHnOn7LLILlKETd6BFRJ0GqgS2Y3mn1wMQmyh9zEyWlz5p1zrahRahbXAfCfSqshSNfqOmAQzSHRVjCqjsAw1jyqrXaPdKBmr90DIpIxmIyKXv4GGAkPyJ/6FTFY99uhpiq0qadD/uSzQsefWo0aTvP/65zi3eof7TcZ32oWpwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><h3 id="3-5-测试生成支付链接"><a href="#3-5-测试生成支付链接" class="headerlink" title="3.5 测试生成支付链接"></a>3.5 测试生成支付链接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沙箱环境中 app 私钥</span></span><br><span class="line">app_private_key_string = <span class="built_in">open</span>(<span class="string">&#x27;app_private_key.pem&#x27;</span>).read()</span><br><span class="line"><span class="comment"># 支付宝公钥</span></span><br><span class="line">alipay_public_key_string = <span class="built_in">open</span>( <span class="string">&#x27;alipay_public_key.pem&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_alipay_url</span>():</span><br><span class="line">    <span class="comment"># 实例化一个alipay对象</span></span><br><span class="line">    alipay = AliPay(</span><br><span class="line">        appid=<span class="string">&quot;2016101800716047&quot;</span>,  <span class="comment"># 沙箱appid</span></span><br><span class="line">        app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">        app_private_key_string=app_private_key_string,</span><br><span class="line">        <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">        alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">        sign_type=<span class="string">&quot;RSA&quot;</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">        debug=<span class="literal">True</span>,  <span class="comment"># 默认False,我们是沙箱，所以改成True(让访问沙箱环境支付宝地址)</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 调用支付接口，生成支付链接</span></span><br><span class="line">    <span class="comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span></span><br><span class="line">    order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">        out_trade_no=<span class="string">&quot;201612226&quot;</span>,  <span class="comment"># 订单id，应该从前端获取</span></span><br><span class="line">        total_amount=<span class="built_in">str</span>(<span class="number">0.01</span>),  <span class="comment"># 订单总金额</span></span><br><span class="line">        subject=<span class="string">&quot;测试阿里云付款&quot;</span>,  <span class="comment"># 付款标题信息</span></span><br><span class="line">        return_url=<span class="literal">None</span>,  <span class="comment"># 付款成功回调地址(可以为空)</span></span><br><span class="line">        notify_url=<span class="literal">None</span>  <span class="comment"># 付款成功后异步通知地址（可以为空）</span></span><br><span class="line">    )</span><br><span class="line">    pay_url = <span class="string">&quot;https://openapi.alipaydev.com/gateway.do?&quot;</span> + order_string</span><br><span class="line">    <span class="built_in">print</span>(pay_url)  <span class="comment"># 将这个url复制到浏览器，就会打开支付宝支付页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_pay</span>():</span><br><span class="line">    alipay = AliPay(</span><br><span class="line">        appid=<span class="string">&quot;2016101800716047&quot;</span>,  <span class="comment"># 沙箱appid</span></span><br><span class="line">        app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">        app_private_key_string=app_private_key_string,</span><br><span class="line">        <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥</span></span><br><span class="line">        alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">        sign_type=<span class="string">&quot;RSA&quot;</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">        debug=<span class="literal">True</span>,  <span class="comment"># 默认False,我们是沙箱，所以改成True(让访问沙箱环境支付宝地址)</span></span><br><span class="line">    )</span><br><span class="line">    trade_query = alipay.api_alipay_trade_query(</span><br><span class="line">        out_trade_no=<span class="number">20161112</span>,  <span class="comment"># 上面生成支付码页面时传入的商品订单号</span></span><br><span class="line">        trade_no=<span class="literal">None</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(trade_query)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_alipay_url()</span><br><span class="line">    query_pay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">trade_query 查询用户付款信息</span></span><br><span class="line"><span class="string">返回信息详情请看官方：https://docs.open.alipay.com/api_1/alipay.trade.query</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;code&quot;: &quot;10000&quot;,    # code=10000代表支付成功</span></span><br><span class="line"><span class="string">    &quot;msg&quot;: &quot;Success&quot;,</span></span><br><span class="line"><span class="string">    &quot;buyer_logon_id&quot;: &quot;foq***@sandbox.com&quot;,</span></span><br><span class="line"><span class="string">    &quot;buyer_pay_amount&quot;: &quot;0.00&quot;,</span></span><br><span class="line"><span class="string">    &quot;buyer_user_id&quot;: &quot;2088102180228981&quot;,</span></span><br><span class="line"><span class="string">    &quot;buyer_user_type&quot;: &quot;PRIVATE&quot;,</span></span><br><span class="line"><span class="string">    &quot;invoice_amount&quot;: &quot;0.00&quot;,</span></span><br><span class="line"><span class="string">    &quot;out_trade_no&quot;: &quot;20161112&quot;,</span></span><br><span class="line"><span class="string">    &quot;point_amount&quot;: &quot;0.00&quot;,</span></span><br><span class="line"><span class="string">    &quot;receipt_amount&quot;: &quot;0.00&quot;,</span></span><br><span class="line"><span class="string">    &quot;send_pay_date&quot;: &quot;2020-02-20 21:20:48&quot;,</span></span><br><span class="line"><span class="string">    &quot;total_amount&quot;: &quot;0.01&quot;,</span></span><br><span class="line"><span class="string">    &quot;trade_no&quot;: &quot;2020022022001428981000087565&quot;,</span></span><br><span class="line"><span class="string">    &quot;trade_status&quot;: &quot;TRADE_SUCCESS&quot;  </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>生成链接地址如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://excashier.alipaydev.com/standard/auth.htm?payOrderId=79d3a024f4904f58af434843b945132f.00</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day08 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.订单支付回调接口</title>
      <link href="//pages/ca1c83/"/>
      <url>//pages/ca1c83/</url>
      
        <content type="html"><![CDATA[<h1 id="1-订单支付回调接口"><a href="#1-订单支付回调接口" class="headerlink" title="1.订单支付回调接口"></a>1.订单支付回调接口</h1><h3 id="1-1-goods-urls-py中添加路由"><a href="#1-1-goods-urls-py中添加路由" class="headerlink" title="1.1 goods/urls.py中添加路由"></a>1.1 <code>goods/urls.py</code>中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;peyment/&#x27;</span>, views.PayMentView.as_view()),  <span class="comment"># /goods/peyment/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>1.2 <code>goods/views.py</code>中写视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> Vip</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> UserCourse</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayMentView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1. 获取了支付宝返回的数据</span></span><br><span class="line">        data = request.data</span><br><span class="line">        <span class="comment"># 2.修改订单信息为已支付状态</span></span><br><span class="line">        sign = data.pop(<span class="string">&#x27;sign&#x27;</span>)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &quot;sign&quot;: &quot;Sv......kEoobbA==&quot;, </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        order = Orders.objects.get(order_id=data[<span class="string">&#x27;out_trade_no&#x27;</span>])</span><br><span class="line">        order.trade_no = data[<span class="string">&#x27;trade_no&#x27;</span>]</span><br><span class="line">        order.pay_time = data[<span class="string">&#x27;timestamp&#x27;</span>]</span><br><span class="line">        order.status = <span class="number">2</span></span><br><span class="line">        order.save()</span><br><span class="line">        <span class="comment"># 3. 处理用户购买课程流程</span></span><br><span class="line">        <span class="comment"># 3.1 给 UserCourse 表增加 购买课程</span></span><br><span class="line">        <span class="comment"># goods = order.goods</span></span><br><span class="line">        user = order.user</span><br><span class="line">        course = order.goods.course</span><br><span class="line">        UserCourse.objects.create(user=user,course=course)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">0</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;购买成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/payment/callback/?</span><br><span class="line">charset=utf-8&amp;</span><br><span class="line">out_trade_no=SYL2020110906171516885&amp;</span><br><span class="line">method=alipay.trade.page.pay.return&amp;</span><br><span class="line">total_amount=44.00&amp;</span><br><span class="line">sign=TzUZHR7Txk%2FjA9b%2BP5qASqoYpUB2QcZPYleTdFJu%2FBMlZvmh%2FwGg6sSHE02S2unNeYH77I8ojnqfatty47crle9ApjiuRNc8Gcr8vadvQbN693tu1stS1ouuw3UuqNYB4adJWCIPTNSFq%2Fq%2B3wO0Mq0G4aULjTNT2OcZNeQP2PgCUGGRdmeBnsVylvjxsIdGeJVA8JEK3ZYHdGCfBDuXiqE5CAKiVWy%2FLyWXPde6QpsO9vUkmyV3L5iByUbL3%2B11Yoz7PNzaYpVT0wxwfX9bYcVYjE4frbSLgLoEccNcKRC3Pro%2BhgAjP7TJGBe1MdrEMZ17pReC2GVhfYUrf7XT3A%3D%3D&amp;</span><br><span class="line">trade_no=2020110922001428980501074538&amp;</span><br><span class="line">auth_app_id=2016101800716047&amp;version=1.0&amp;</span><br><span class="line">app_id=2016101800716047&amp;</span><br><span class="line">sign_type=RSA2&amp;</span><br><span class="line">seller_id=2088102180143385&amp;</span><br><span class="line">timestamp=2020-11-09%2014%3A17%3A39</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day08 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.创建订单并生成支付链接接口</title>
      <link href="//pages/2a6438/"/>
      <url>//pages/2a6438/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建订单并生成支付链接接口"><a href="#1-创建订单并生成支付链接接口" class="headerlink" title="1.创建订单并生成支付链接接口"></a>1.创建订单并生成支付链接接口</h1><h3 id="1-1-goods-x2F-urls-py中注册路由"><a href="#1-1-goods-x2F-urls-py中注册路由" class="headerlink" title="1.1 goods&#x2F;urls.py中注册路由"></a>1.1 goods&#x2F;urls.py中注册路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;getpayurl/&#x27;</span>, views.PayUrlView.as_view()),  <span class="comment"># /goods/getpayurl/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-goods-x2F-views-py-中写视图函数"><a href="#1-2-goods-x2F-views-py-中写视图函数" class="headerlink" title="1.2 goods&#x2F;views.py 中写视图函数"></a>1.2 goods&#x2F;views.py 中写视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny, IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods,Orders,GoodsCourse</span><br><span class="line"><span class="keyword">from</span> goods.utils <span class="keyword">import</span> get_order_id, get_pay_url, alipay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayUrlView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 1. 获取课程id,获取购买途径(普通购买, 促销购买) 获取用户</span></span><br><span class="line">        goods_id = request.data.get(<span class="string">&#x27;goods_id&#x27;</span>)</span><br><span class="line">        goods = Goods.objects.get(<span class="built_in">id</span>=goods_id)</span><br><span class="line">        user = request.user</span><br><span class="line">        <span class="comment"># 2. 下定单</span></span><br><span class="line">        order_id = get_order_id()</span><br><span class="line">        <span class="keyword">if</span> user.vip.vip_type == <span class="string">&#x27;1&#x27;</span>:  <span class="comment"># 普通会员</span></span><br><span class="line">            goods_price = goods.price * Decimal(<span class="string">&#x27;0.80&#x27;</span>).quantize(Decimal(<span class="string">&#x27;0.00&#x27;</span>))</span><br><span class="line">        <span class="keyword">elif</span> user.vip.vip_type == <span class="string">&#x27;2&#x27;</span>:  <span class="comment"># 高级会员</span></span><br><span class="line">            goods_price = goods.price * Decimal(<span class="string">&#x27;0.60&#x27;</span>).quantize(Decimal(<span class="string">&#x27;0.00&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 普通用户</span></span><br><span class="line">            goods_price = goods.price</span><br><span class="line">        goods_price = Decimal(goods_price).quantize(Decimal(<span class="string">&#x27;0.00&#x27;</span>))</span><br><span class="line">        order = Orders(user=user, goods=goods, order_id=order_id, pay_method=<span class="number">1</span>, status=<span class="number">1</span>,</span><br><span class="line">                       total_amount=goods_price)</span><br><span class="line">        order.save()</span><br><span class="line">        <span class="built_in">print</span>(order.total_amount,<span class="built_in">type</span>(order.total_amount))</span><br><span class="line">        <span class="comment"># 3. 根据订单 生成支付链接</span></span><br><span class="line">        subject = <span class="string">&quot;实验楼订单:%s, 价格:%s&quot;</span> % (order.order_id, order.total_amount)</span><br><span class="line">        pay_url = get_pay_url(order.order_id, order.total_amount, subject)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 返回链接</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">0</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;下单成功&quot;</span>, <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;pay_url&quot;</span>: pay_url&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-goods-x2F-utils-py中生成随机订单函数和生成支付URL函数"><a href="#1-3-goods-x2F-utils-py中生成随机订单函数和生成支付URL函数" class="headerlink" title="1.3 goods&#x2F;utils.py中生成随机订单函数和生成支付URL函数"></a>1.3 goods&#x2F;utils.py中生成随机订单函数和生成支付URL函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="keyword">from</span> syl <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件路径</span></span><br><span class="line">app_private_key_path = os.path.join(settings.BASE_DIR, <span class="string">&quot;apps/goods/keys/app_private_key.pem&quot;</span>)</span><br><span class="line">alipay_public_key_path = os.path.join(settings.BASE_DIR, <span class="string">&quot;apps/goods/keys/alipay_public_key.pem&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(app_private_key_path) <span class="keyword">as</span> f:</span><br><span class="line">    app_private_key_string = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(alipay_public_key_path) <span class="keyword">as</span> f:</span><br><span class="line">    alipay_public_key_string = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建支付宝支付对象</span></span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid=settings.ALIPAY_APPID,</span><br><span class="line">    app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">    app_private_key_string=app_private_key_string,</span><br><span class="line">    alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">    <span class="comment"># app_private_key_path=app_private_key_path,</span></span><br><span class="line">    <span class="comment"># alipay_public_key_path=alipay_public_key_path,</span></span><br><span class="line">    sign_type=<span class="string">&quot;RSA2&quot;</span>,</span><br><span class="line">    debug=settings.ALIPAY_DEBUG</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pay_url</span>(<span class="params">out_trade_no, total_amount, subject</span>):</span><br><span class="line">    <span class="comment"># 生成登录支付宝连接</span></span><br><span class="line">    order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">        out_trade_no=out_trade_no,</span><br><span class="line">        total_amount=<span class="built_in">str</span>(total_amount),</span><br><span class="line">        subject=subject,</span><br><span class="line">        return_url=settings.ALIPAY_RETURN_URL,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 响应登录支付宝连接</span></span><br><span class="line">    <span class="comment"># 真实环境电脑网站支付网关：https://openapi.alipay.com/gateway.do? + order_string</span></span><br><span class="line">    <span class="comment"># 沙箱环境电脑网站支付网关：https://openapi.alipaydev.com/gateway.do? + order_string</span></span><br><span class="line">    alipay_url = settings.ALIPAY_URL + <span class="string">&quot;?&quot;</span> + order_string</span><br><span class="line">    <span class="keyword">return</span> alipay_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_order_id</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    SYL202008241212121200005/24</span></span><br><span class="line"><span class="string">    生成订单号: 格式: SYL + 年月日时分秒 + 5位随机数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    d = datetime.datetime.now()</span><br><span class="line">    base = <span class="string">&#x27;SYL&#x27;</span></span><br><span class="line">    time_str = <span class="string">&#x27;%04d%02d%02d%02d%02d%02d&#x27;</span> % (d.year, d.month, d.day, d.hour, d.minute, d.second)</span><br><span class="line">    rand_num = <span class="built_in">str</span>(random.randint(<span class="number">10000</span>, <span class="number">99999</span>))</span><br><span class="line">    <span class="keyword">return</span> base + time_str + rand_num</span><br></pre></td></tr></table></figure><h3 id="1-4-syl-x2F-setings-py中配置支付相关参数"><a href="#1-4-syl-x2F-setings-py中配置支付相关参数" class="headerlink" title="1.4 syl&#x2F;setings.py中配置支付相关参数"></a>1.4 syl&#x2F;setings.py中配置支付相关参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支付宝配置</span></span><br><span class="line">ALIPAY_APPID = <span class="string">&#x27;2016101800716047&#x27;</span>   <span class="comment"># 沙箱环境中alipay应用ID</span></span><br><span class="line">ALIPAY_DEBUG = <span class="literal">True</span></span><br><span class="line">ALIPAY_URL = <span class="string">&#x27;https://openapi.alipaydev.com/gateway.do&#x27;</span>             <span class="comment"># alipay沙箱环境支付宝网管</span></span><br><span class="line">ALIPAY_RETURN_URL = <span class="string">&#x27;http://127.0.0.1:8888/payment/callback/&#x27;</span>       <span class="comment"># 支付完成后支付宝回调我们应用的地址</span></span><br></pre></td></tr></table></figure><h1 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h1><ul><li>请求地址</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/goods/getpayurl/</span></span><br></pre></td></tr></table></figure><ul><li>携带参数</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;goods_id&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>返回数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;下单成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pay_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://openapi.alipaydev.com/gateway.do?app_id=2016101800716047&amp;biz_content=%7B%22subject%22%3A%22%5Cu5b9e%5Cu9a8c%5Cu697c%5Cu8ba2%5Cu5355%3ASYL2020101216322149584%2C+%5Cu4ef7%5Cu683c%3A99.00%22%2C%22out_trade_no%22%3A%22SYL2020101216322149584%22%2C%22total_amount%22%3A%2299.00%22%2C%22product_code%22%3A%22FAST_INSTANT_TRADE_PAY%22%7D&amp;charset=utf-8&amp;method=alipay.trade.page.pay&amp;return_url=http%3A%2F%2F127.0.0.1%3A8888%2Fpayment%2Fcallback%2F&amp;sign_type=RSA2×tamp=2020-10-12+16%3A32%3A21&amp;version=1.0&amp;sign=qIM7yrjYgvqOn2DCYK4rBgtwqDnZ%2BTwf89axXQPMzk67FOOHH18YtnoROi4ml5i5w%2Fd%2FtD2RsYyxU5Jeatxw9Skz%2B9HQCAYfmQriYDo5fz2hOrC6Ydx92z5%2BB5o%2BUIh29EAE8JS5MhUOOO8T3r9NtzmQTOs0kSWpnaXjX4S7l9Z83li76MG83H18jBodpWofgzcTTDdPsBnaHmeeJjGg9LKgSDS37ZKP9GE79asVn8S9w49qVmTPzZGdKIZxyLf2K44EllnGxhlDLFRlGLYJOlE%2Bxo1hr3IKH40WoYh3fkmv2%2FEDnl0OtNXHt5HRUH4uZ2k38BNf1ebrODRqWRg1eQ%3D%3D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>支付宝回调接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/payment/callback/?</span><br><span class="line">charset=utf-8&amp;</span><br><span class="line">out_trade_no=SYL2020101506280949732&amp;</span><br><span class="line">method=alipay.trade.page.pay.return&amp;</span><br><span class="line">total_amount=44.00&amp;</span><br><span class="line">sign=bzLju9A5Ax4jjWTKrmCs1Z4J%2BWhbayaYDAdWONWbKFeWmyRWk%2Fxd3QwsfaHqnwPEo8mtCR4n3OCGHI410aD10LdwAZ%2FRmWfh3t4ATL7UOiTqrMH0x0gOpAGll2HSN4Nq2sVdiPbiK1RAaY%2B83F5%2FgTUNa7i20cJ8kXcXhQRDE5t5f4WNBtscgF661mvjQjgCw4pqK3MiivAnOGCeJ4PKO0qHDOPfXLrZEfvtHqLexTEsgSko%2Bb9W%2BQukvcmaxp%2BOnB%2F6XbDL7aH0swVtUQvvF%2F6jOMXr23AHg6QnzAYbZhJhvaLBP6BFjVwK%2B1xgNYOEvQa0Ukxwp%2FWLXwSPsamK%2Bg%3D%3D&amp;</span><br><span class="line">trade_no=2020101522001428980501059961&amp;</span><br><span class="line">auth_app_id=2016101800716047&amp;</span><br><span class="line">version=1.0&amp;</span><br><span class="line">app_id=2016101800716047&amp;</span><br><span class="line">sign_type=RSA2&amp;</span><br><span class="line">seller_id=2088102180143385&amp;</span><br><span class="line">timestamp=2020-10-15%2014%3A28%3A49</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day08 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/be0167/"/>
      <url>//pages/be0167/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业"><a href="#1-作业" class="headerlink" title="1.作业"></a>1.作业</h1><ul><li>学习看官方SDK文档（七牛云）</li><li>熟悉七牛云上传整体流程（前端上传六步）</li><li>使用django配置七牛云上传</li><li>评论模块表结构</li><li>评论接口<ul><li>发布评论接口</li><li>获取所有评论接口</li></ul></li><li>其他内容<ul><li>面试题</li><li>把代码熟悉好</li></ul></li><li>升实训（30 30 40）<ul><li>面试题（30）</li><li>项目问答题（30）</li><li>机试题（40）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.使用七牛云进行视频点播原理</title>
      <link href="//pages/11442f/"/>
      <url>//pages/11442f/</url>
      
        <content type="html"><![CDATA[<h1 id="1-七牛云存储介绍"><a href="#1-七牛云存储介绍" class="headerlink" title="1.七牛云存储介绍"></a>1.七牛云存储介绍</h1><h3 id="1-1-七牛云存储使用参考文档"><a href="#1-1-七牛云存储使用参考文档" class="headerlink" title="1.1 七牛云存储使用参考文档"></a>1.1 七牛云存储使用参考文档</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 七牛云管理后台地址</span></span><br><span class="line">https://portal.qiniu.com/kodo/bucket</span><br><span class="line"><span class="comment"># 七牛云使用</span></span><br><span class="line">https://developer.qiniu.com/kodo/manual/<span class="number">1233</span>/console-quickstart</span><br><span class="line"></span><br><span class="line"><span class="comment"># pythonSDK</span></span><br><span class="line">https://developer.qiniu.com/kodo/sdk/<span class="number">1242</span>/python</span><br><span class="line"><span class="comment"># Node.js SDK V6</span></span><br><span class="line">https://developer.qiniu.com/kodo/sdk/<span class="number">3828</span>/node-js-v6</span><br><span class="line"><span class="comment"># JavaScript SDK历史文档1.x</span></span><br><span class="line">https://developer.qiniu.com/kodo/sdk/<span class="number">4244</span>/the-javascript-sdk-historical-documents-<span class="number">1</span>-x</span><br></pre></td></tr></table></figure><h3 id="1-2-七牛云介绍"><a href="#1-2-七牛云介绍" class="headerlink" title="1.2 七牛云介绍"></a>1.2 七牛云介绍</h3><ul><li>以前看见过<code>FastDfs+FFmpeg</code>进行视频存储等操作，但是这种方式稳定性会低一些，而且成本也没有降低。</li><li>市面上关于云存储的第三方服务比比皆是，最著名的无疑就是七牛云存储，本次我们将演示用django+Vue+七牛云进行视频存储与播放。</li></ul><h3 id="1-3-七牛云上传逻辑"><a href="#1-3-七牛云上传逻辑" class="headerlink" title="1.3 七牛云上传逻辑"></a>1.3 七牛云上传逻辑</h3><ul><li>1.在做七牛云的文件上传时，很多人有一个误区，就是以为是前端先上传到后台服务器，然后后台服务器再将文件上传到七牛云。</li><li>2.这个逻辑本身没有问题，但是会遇到一个问题，如果文件大会导致上传很慢</li><li>3.正确逻辑应该是前端直接上传七牛，而后台只承担生成token和存储七牛云返回的hash的任务。</li></ul><p><img src="./assets/image-20201014093501716.png" style="width: 800px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.七牛云注册于基本使用</title>
      <link href="//pages/c20842/"/>
      <url>//pages/c20842/</url>
      
        <content type="html"><![CDATA[<h1 id="1-注册七牛云账号"><a href="#1-注册七牛云账号" class="headerlink" title="1.注册七牛云账号"></a>1.注册七牛云账号</h1><h3 id="1-1-注册七牛云"><a href="#1-1-注册七牛云" class="headerlink" title="1.1 注册七牛云"></a>1.1 注册七牛云</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//sso.qiniu.com/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201011152514667.png" style="width: 500px; margin-left: 50px;"> </img></p><h3 id="1-2-注册完成登录即可跳转到七牛云管理界面"><a href="#1-2-注册完成登录即可跳转到七牛云管理界面" class="headerlink" title="1.2 注册完成登录即可跳转到七牛云管理界面"></a>1.2 注册完成登录即可跳转到七牛云管理界面</h3><p><img src="./assets/image-20201011152647021.png" style="width: 500px; margin-left: 50px;"> </img></p><h1 id="2-七牛云快速入门"><a href="#2-七牛云快速入门" class="headerlink" title="2.七牛云快速入门"></a>2.七牛云快速入门</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参考官方地址：<span class="attr">https</span>:<span class="comment">//developer.qiniu.com/kodo/manual/1233/console-quickstart</span></span><br></pre></td></tr></table></figure><h2 id="2-1-创建空间"><a href="#2-1-创建空间" class="headerlink" title="2.1 创建空间"></a>2.1 创建空间</h2><ul><li>1.登录 <a href="https://portal.qiniu.com/signin?ref=developer.qiniu.com">七牛开发者平台</a></li><li>2.存储空间 <a href="https://portal.qiniu.com/bucket">管理界面</a></li></ul><p><img src="./assets/image-20201011153102904.png" style="width: 500px; margin-left: 50px;"> </img></p><ul><li>3.<a href="https://portal.qiniu.com/kodo/bucket?shouldCreateBucket=true">新建存储空间</a></li></ul><p><img src="./assets/image-20201011153523017.png" style="width: 600px; margin-left: 50px;"> </img></p><ul><li>4.创建成功后页面</li></ul><p><img src="./assets/image-20201011154527281.png" style="width: 800px; margin-left: 50px;"> </img></p><h2 id="2-2-上传文件"><a href="#2-2-上传文件" class="headerlink" title="2.2 上传文件"></a>2.2 上传文件</h2><ul><li>1.空间管理—》文件</li></ul><p><img src="./assets/image-20201011154527281.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li>2.上传文件</li></ul><p><img src="./assets/image-20201011155411219.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li>3.上传后就可以看到这个文件，复制外链 即可在浏览器中打开</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://qi11dgv17.hn-bkt.clouddn.com/07.检查用户名是否使用接口.mp4</span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201011155630169.png" style="width: 1000px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.七牛云上传js实现方法</title>
      <link href="//pages/a95077/"/>
      <url>//pages/a95077/</url>
      
        <content type="html"><![CDATA[<h1 id="1-七牛云上传前台页面"><a href="#1-七牛云上传前台页面" class="headerlink" title="1.七牛云上传前台页面"></a>1.七牛云上传前台页面</h1><p><a href="https://www.cnblogs.com/xiaonq/p/12290151.html">https://www.cnblogs.com/xiaonq/p/12290151.html</a></p><h3 id="1-1-安装相关包"><a href="#1-1-安装相关包" class="headerlink" title="1.1 安装相关包"></a>1.1 安装相关包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  --save  jquery@1.12.1     # 安装jquery</span><br></pre></td></tr></table></figure><h3 id="1-2index-html引入qiniu-min-js"><a href="#1-2index-html引入qiniu-min-js" class="headerlink" title="1.2index.html引入qiniu.min.js"></a>1.2<code>index.html</code>引入qiniu.min.js</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>qiniu_vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./static/qiniu.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-新建components-QnUpload-vue上传视频页面"><a href="#1-3-新建components-QnUpload-vue上传视频页面" class="headerlink" title="1.3 新建components\QnUpload.vue上传视频页面"></a>1.3 新建<code>components\QnUpload.vue</code>上传视频页面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 1.上传时的点击框  --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;uploadImage&quot;</span>&gt;</span>选择文件&#123;&#123;uptoken&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 2.测试上传成功后播放功能  --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;qn_url&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">muted</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">        您的浏览器不支持 video 标签。</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; qn_token_get &#125; <span class="keyword">from</span> <span class="string">&#x27;./axios_api/api&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">uptoken</span>: <span class="string">&#x27;&#x27;</span>,                                     <span class="comment">// 从django后端获取的七牛云认证token</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">qn_url</span>: <span class="string">&#x27;http://qi11dgv17.hn-bkt.clouddn.com/&#x27;</span>,  <span class="comment">// 七牛云给的空间测试域名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1.获取七牛云认证token</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">getQiniuToken</span>: <span class="keyword">function</span> (<span class="params">callback</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">qn_token_get</span>(&#123; &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// debugger</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">uptoken</span> = resp.<span class="property">data</span>.<span class="property">uptoken</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">callback</span>()  <span class="comment">// callback 出入的是回调函数 initQiniu() 用来初始化Qiniu.uploader()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">err</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err,<span class="string">&#x27;err&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 2.初始化七牛云对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">initQiniu</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ths = <span class="variable language_">this</span>   <span class="comment">// 避免七牛云对象覆盖vue的this对象，在这里提前赋值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> uploader = <span class="title class_">Qiniu</span>.<span class="title function_">uploader</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">disable_statistics_report</span>: <span class="literal">false</span>,                                   <span class="comment">// 禁止自动发送上传统计信息到七牛，默认允许发送</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">runtimes</span>: <span class="string">&#x27;html5,flash,html4&#x27;</span>,                                      <span class="comment">// 上传模式，依次退化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">browse_button</span>: <span class="string">&#x27;uploadImage&#x27;</span>,                                       <span class="comment">// 上传选择的点选按钮，必需</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">container</span>: <span class="string">&#x27;container&#x27;</span>,                                             <span class="comment">// 上传区域DOM ID，默认是browser_button的父元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">max_file_size</span>: <span class="string">&#x27;500mb&#x27;</span>,                                             <span class="comment">// 最大文件体积限制</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">flash_swf_url</span>: <span class="string">&#x27;Moxie.swf&#x27;</span>,                                         <span class="comment">// 引入flash，相对路径</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">dragdrop</span>: <span class="literal">false</span>,                                                    <span class="comment">// 关闭可拖曳上传</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">chunk_size</span>: <span class="string">&#x27;4mb&#x27;</span>,                                                  <span class="comment">// 分块上传时，每块的体积</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">multi_selection</span>: !(moxie.<span class="property">core</span>.<span class="property">utils</span>.<span class="property">Env</span>.<span class="property">OS</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;ios&quot;</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">uptoken</span>: <span class="variable language_">this</span>.<span class="property">uptoken</span>,     <span class="comment">// 在初始化时，uptoken，uptoken_url，uptoken_func三个参数中必须有一个被设置,uptoken是上传凭证，由其他程序生成;uptoken_url是提供了获取上传凭证的地址，如果需要定制获取uptoken的过程则可以设置uptoken_func;其优先级为uptoken &gt; uptoken_url &gt; uptoken_func</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// uptoken_url: &#x27;http://127.0.0.1:8000/uptoken&#x27;,                                                 // 在初始化时，uptoken，uptoken_url，uptoken_func三个参数中必须有一个被设置,uptoken是上传凭证，由其他程序生成;uptoken_url是提供了获取上传凭证的地址，如果需要定制获取uptoken的过程则可以设置uptoken_func;其优先级为uptoken &gt; uptoken_url &gt; uptoken_func</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// uptoken:&#x27;q06bq54Ps5JLfZyP8Ax-qvByMBdu8AoIVJpMco2m:kyTiuN6GBUpfNt1nJIA7C8CCStY=:eyJzY29wZSI6IjEzMTIzMTIzMTIzIiwiZGVhZGxpbmUiOjE1NzY0MTM3MTB9&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">domain</span>: <span class="string">&#x27;redinnovation.s3-cn-north-1.qiniucs.com&#x27;</span>,               <span class="comment">// bucket域名，下载资源时用到，必需</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">get_new_uptoken</span>: <span class="literal">false</span>,                                              <span class="comment">// 设置上传文件的时候是否每次都重新获取新的uptoken</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">auto_start</span>: <span class="literal">true</span>,                                                   <span class="comment">// 选择文件后自动上传，若关闭需要自己绑定事件触发上传</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">max_retries</span>: <span class="number">3</span>,                                                     <span class="comment">// 上传失败最大重试次数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">save_key</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">resize</span>: &#123;                                                           <span class="comment">// 想限制上传图片尺寸，直接用resize这个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">width</span>: <span class="number">300</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">height</span>: <span class="number">300</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">init</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;FilesAdded&#x27;</span>: <span class="keyword">function</span>(<span class="params">up, files</span>) &#123;                             <span class="comment">// 文件添加进队列后，处理相关的事情</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              plupload.<span class="title function_">each</span>(files, <span class="keyword">function</span>(<span class="params">file</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;BeforeUpload&#x27;</span>: <span class="keyword">function</span>(<span class="params">up, file</span>) &#123;                            <span class="comment">// 每个文件上传前，处理相关的事情</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始上传之前&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              $(<span class="string">&quot;.upload-progress&quot;</span>).<span class="title function_">show</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;UploadProgress&#x27;</span>: <span class="keyword">function</span>(<span class="params">up, file</span>) &#123;                          <span class="comment">// 每个文件上传时，处理相关的事情</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上传中&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              $(<span class="string">&quot;.upload-progress&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;上传进度:&quot;</span>+file.<span class="property">percent</span> + <span class="string">&quot;%&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;FileUploaded&#x27;</span>: <span class="keyword">function</span>(<span class="params">up, file, info</span>) &#123;                       <span class="comment">// 每个文件上传成功后，处理相关的事情</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上传成功&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(info,<span class="number">4567890</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              $(<span class="string">&quot;.upload-progress&quot;</span>).<span class="title function_">hide</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();                                      <span class="comment">//创建一个Image对象，实现图片的预下载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">var</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>( info.<span class="property">response</span> )</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// debugger</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(ths.<span class="property">qn_url</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              ths.<span class="property">qn_url</span> = ths.<span class="property">qn_url</span> + res.<span class="property">key</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;Error&#x27;</span>: <span class="keyword">function</span>(<span class="params">up, err, errTip</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上传出错&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;UploadComplete&#x27;</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">//队列文件处理完毕后，处理相关的事情</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">getQiniuToken</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">initQiniu</span>()  <span class="comment">// 将initQiniu()当做callback回调函数传入给getQiniuToken函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-id">#container</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>:<span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>:<span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#9d9d9d</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>:<span class="number">50px</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.upload-progress</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>:<span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>:<span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>:<span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">left</span>:<span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>:<span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-id">#uploadImage</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>:<span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>:<span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>:<span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">left</span>:<span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-id">#container</span> <span class="selector-tag">img</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>:<span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>:<span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">left</span>:<span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="1-4-router-index-js-引入路由"><a href="#1-4-router-index-js-引入路由" class="headerlink" title="1.4 router\index.js 引入路由"></a>1.4 <code>router\index.js</code> 引入路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qn_upload <span class="keyword">from</span> <span class="string">&#x27;@/components/QnUpload&#x27;</span></span><br><span class="line"><span class="keyword">var</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/qn_upload/&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;qn_upload&#x27;</span>, <span class="attr">component</span>: qn_upload,&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-5-axios-api-api-js中引入后端路由"><a href="#1-5-axios-api-api-js中引入后端路由" class="headerlink" title="1.5 axios_api\api.js中引入后端路由"></a>1.5 <code>axios_api\api.js</code>中引入后端路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">qn_token_get</span> = p =&gt; <span class="title function_">axios_get</span>(<span class="string">&quot;/oauth/qntoken/&quot;</span>, p) <span class="comment">// 获取七牛云token</span></span><br></pre></td></tr></table></figure><h1 id="2-测试页面结果"><a href="#2-测试页面结果" class="headerlink" title="2.测试页面结果"></a>2.测试页面结果</h1><p><img src="./assets/image-20201011212400514.png" style="width: 400px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.七牛云上传后端接口</title>
      <link href="//pages/9ee64b/"/>
      <url>//pages/9ee64b/</url>
      
        <content type="html"><![CDATA[<h1 id="1-生成七牛云上传token"><a href="#1-生成七牛云上传token" class="headerlink" title="1.生成七牛云上传token"></a>1.生成七牛云上传token</h1><h3 id="1-1-参考七牛云SDK"><a href="#1-1-参考七牛云SDK" class="headerlink" title="1.1 参考七牛云SDK"></a>1.1 参考七牛云SDK</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pythonSDK</span></span><br><span class="line">https://developer.qiniu.com/kodo/sdk/<span class="number">1242</span>/python</span><br></pre></td></tr></table></figure><h3 id="1-2-在oauth-urls-py中添加生成七牛云token的路由"><a href="#1-2-在oauth-urls-py中添加生成七牛云token的路由" class="headerlink" title="1.2 在oauth/urls.py中添加生成七牛云token的路由"></a>1.2 在<code>oauth/urls.py</code>中添加生成七牛云token的路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;qntoken/&#x27;</span>, views.QNYTokenView.as_view()),  <span class="comment"># /oauth/qntoken/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-3-在-oauth-views-py中添加视图函数"><a href="#1-3-在-oauth-views-py中添加视图函数" class="headerlink" title="1.3 在 oauth/views.py中添加视图函数"></a>1.3 在 <code>oauth/views.py</code>中添加视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;获取上传token&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QNYTokenView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">from</span> qiniu <span class="keyword">import</span> Auth, put_file, etag</span><br><span class="line">        <span class="keyword">import</span> qiniu.config</span><br><span class="line">        <span class="comment"># 需要填写你的 Access Key 和 Secret Key</span></span><br><span class="line">        access_key = <span class="string">&quot;PwyTqrclbus4ntRct1o8G2V-qkR1rI7hbd_5Gx29&quot;</span></span><br><span class="line">        secret_key = <span class="string">&quot;IuvSm1vJh2YUiYWFwV-kGmHAJF9R9iGuH2Q1ifea&quot;</span></span><br><span class="line">        <span class="comment"># 构建鉴权对象</span></span><br><span class="line">        q = Auth(access_key, secret_key)</span><br><span class="line">        <span class="comment"># 要上传的空间</span></span><br><span class="line">        bucket_name = <span class="string">&#x27;syl-images&#x27;</span></span><br><span class="line">        <span class="comment"># 生成上传 Token，可以指定过期时间等</span></span><br><span class="line">        token = q.upload_token(bucket_name, expires=<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;获取&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;uptoken&#x27;</span>: token&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-4-测试获取七牛云token接口"><a href="#1-4-测试获取七牛云token接口" class="headerlink" title="1.4 测试获取七牛云token接口"></a>1.4 测试获取七牛云token接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/oauth/qntoken/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201011203601392.png" style="width: 700px; margin-left: 50px;"> </img></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;uptoken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PwyTqrclbus4ntRct1o8G2V-qkR1rI7hbd_5Gx29:V9IaCM4--gFiyXhPdYTsWSIBLNA=:eyJzY29wZSI6InN5bC1pbWFnZXMiLCJkZWFkbGluZSI6MTYwMjY0MzY0OX0=&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07.视频防盗</title>
      <link href="//pages/05f9d6/"/>
      <url>//pages/05f9d6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09.获取对应课程评论接口</title>
      <link href="//pages/204274/"/>
      <url>//pages/204274/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查询指定课程评论接口"><a href="#1-查询指定课程评论接口" class="headerlink" title="1.查询指定课程评论接口"></a>1.查询指定课程评论接口</h1><h3 id="1-1-course-urls-py中还是查询课程的路由"><a href="#1-1-course-urls-py中还是查询课程的路由" class="headerlink" title="1.1 course/urls.py中还是查询课程的路由"></a>1.1 <code>course/urls.py</code>中还是查询课程的路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">register</span>(r<span class="string">&#x27;course&#x27;</span>, views.<span class="property">CourseViewSet</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-course-serializers-py中添加评论相关查询"><a href="#1-2-course-serializers-py中添加评论相关查询" class="headerlink" title="1.2 course/serializers.py中添加评论相关查询"></a>1.2 <code>course/serializers.py</code>中添加评论相关查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseDeepSerializer</span>(<span class="title class_ inherited__">CourseSerializer</span>):</span><br><span class="line">    comment = CommentSerializer(many=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    user = serializers.CharField(source=<span class="string">&#x27;user.username&#x27;</span>)</span><br><span class="line">    to_user = serializers.SerializerMethodField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Comment</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_to_user</span>(<span class="params">self,row</span>):</span><br><span class="line">        <span class="keyword">if</span> row.to_user:</span><br><span class="line">            <span class="keyword">return</span> row.to_user.username</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="2-测试获取评论接口"><a href="#2-测试获取评论接口" class="headerlink" title="2.测试获取评论接口"></a>2.测试获取评论接口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Http</span>:<span class="comment">//192.168.56.100:8888/course/course/1/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201104204018462.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li>接口结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;goods_set&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-13T03:42:53.449302Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-13T03:42:53.449842Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;goods_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;product_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux课程体系&quot;</span>,</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: <span class="string">&quot;55.00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;channel_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;period&quot;</span>: <span class="number">365</span>,</span><br><span class="line">            <span class="string">&quot;is_launched&quot;</span>: true,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;comment&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;user&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;to_user&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-11-04T10:41:25.656763Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-11-04T11:14:03.786135Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;tom第一次评论&quot;</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;fid&quot;</span>: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;user&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            <span class="string">&quot;to_user&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-11-04T11:15:49.188855Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-11-04T11:15:49.188898Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;zhangsan评论tom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;fid&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;user&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;to_user&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-11-04T12:25:15.105667Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-11-04T12:25:15.105946Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;&lt;p&gt;11111&lt;/p&gt;\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;fid&quot;</span>: null</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;chapters&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;sections&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:57:14.151331Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T14:57:14.151364Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux 系统简介&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;learn_time&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;video&quot;</span>: <span class="string">&quot;http://qi11dgv17.hn-bkt.clouddn.com/media/videos/20201011/07.%E6%A3%80%E6%9F%A5%E7%94%A8%E6%88%B7%E5%90%8D%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3.mp4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;seq_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;chapters&quot;</span>: <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-15T13:26:21.528687Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-15T14:20:33.813725Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;七牛测试上传图片&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;serial_num&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;learn_time&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;video&quot;</span>: <span class="string">&quot;http://qi11dgv17.hn-bkt.clouddn.com/media/videos/20201015/linux.jpg&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;seq_num&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;chapters&quot;</span>: <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-15T13:46:48.629237Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-15T13:46:48.629319Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;七牛视频上传&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;serial_num&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="string">&quot;learn_time&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;video&quot;</span>: <span class="string">&quot;http://qi11dgv17.hn-bkt.clouddn.com/media/videos/20201015/07.%E6%A3%80%E6%9F%A5%E7%94%A8%E6%88%B7%E5%90%8D%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3.mp4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;seq_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;chapters&quot;</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:56:34.585658Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T14:56:34.585689Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux 系统简介&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:44:31.252836Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-15T14:19:32.879262Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux入门课程&quot;</span>,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://qi11dgv17.hn-bkt.clouddn.com/media/course/linux.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attention&quot;</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="string">&quot;learner&quot;</span>: <span class="number">222</span>,</span><br><span class="line">    <span class="string">&quot;course_type&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;course_tag&quot;</span>: [</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-前端代码"><a href="#3-前端代码" class="headerlink" title="3.前端代码"></a>3.前端代码</h1><ul><li><p><code>src\components\course_show.vue</code></p></li><li><p><code>src\components\common\comment.vue</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.上传视频课程到七牛云后存储到django后端接口</title>
      <link href="//pages/400223/"/>
      <url>//pages/400223/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.把课程的ID从路由中取出来</span><br><span class="line">2.在vue钩子函数中触发请求，获取指定课程下的所有 章信息，在标题上显示课程信息</span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201014143904371.png" style="width: 700px; margin-left: 50px;"> </img></p><h1 id="1-获取指定课程下的所有章信息接口"><a href="#1-获取指定课程下的所有章信息接口" class="headerlink" title="1.获取指定课程下的所有章信息接口"></a>1.获取指定课程下的所有章信息接口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/course/course/1/</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;goods_set&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-13T03:42:53.449302Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-13T03:42:53.449842Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;goods_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;product_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux课程体系&quot;</span>,</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: <span class="string">&quot;55.00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;channel_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;period&quot;</span>: <span class="number">365</span>,</span><br><span class="line">            <span class="string">&quot;is_launched&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;chapters&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;sections&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:57:14.151331Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T14:57:14.151364Z&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux 系统简介&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;learn_time&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;video&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/videos/20201011/07.%E6%A3%80%E6%9F%A5%E7%94%A8%E6%88%B7%E5%90%8D%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3.mp4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;seq_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;chapters&quot;</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:56:34.585658Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-11T14:56:34.585689Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux 系统简介&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serial_num&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;course&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;create_time&quot;</span>: <span class="string">&quot;2020-10-11T14:44:31.252836Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;update_time&quot;</span>: <span class="string">&quot;2020-10-12T12:32:20.045791Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux入门课程&quot;</span>,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/course/linux.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attention&quot;</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="string">&quot;learner&quot;</span>: <span class="number">222</span>,</span><br><span class="line">    <span class="string">&quot;course_type&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;course_tag&quot;</span>: [</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-添加节视频课程的接口"><a href="#2-添加节视频课程的接口" class="headerlink" title="2.添加节视频课程的接口"></a>2.添加节视频课程的接口</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.100:8888/course/sections/</span><br></pre></td></tr></table></figure><ul><li>发送数据(post)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">form_data</span>:&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">serial_num</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">chapters</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">learn</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">seq_num</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">video</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08.评论模块表结构分析</title>
      <link href="//pages/3e11cf/"/>
      <url>//pages/3e11cf/</url>
      
        <content type="html"><![CDATA[<h1 id="1-评论模块表结构"><a href="#1-评论模块表结构" class="headerlink" title="1.评论模块表结构"></a>1.评论模块表结构</h1><p>ID</p><p>课程—》课程表</p><p>发布品论用户—》用户表</p><p>品论内容</p><p>评论时间</p><p>被回复的用户—–》用户表</p><p>对哪个品论进行回复的ID—–》当前这个品论表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>,on_delete=models.CASCADE, related_name=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(<span class="string">&#x27;course.Course&#x27;</span>,on_delete=models.CASCADE,related_name=<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">    to_user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>,on_delete=models.CASCADE,related_name=<span class="string">&#x27;to_user&#x27;</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    fid = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>,on_delete=models.CASCADE,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s--%s&#x27;</span>%(self.user.username,self.content)</span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201104161803674.png" style="width: 700px; margin-left: 50px;"> </img></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">comment_list<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fid&quot;</span><span class="punctuation">:</span>&#x27;&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;用户tom第一次评论&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_user&quot;</span><span class="punctuation">:</span><span class="string">&quot;tom&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fid&quot;</span><span class="punctuation">:</span>&#x27;<span class="number">1</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;用户张三回复tom的评论内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_user&quot;</span><span class="punctuation">:</span><span class="string">&quot;tom&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fid&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;用户tom又回复了zhangsan的评论&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_user&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.上传视频到七牛云django端实现</title>
      <link href="//pages/31e864/"/>
      <url>//pages/31e864/</url>
      
        <content type="html"><![CDATA[<h1 id="1-上传视频到七牛云django端实现"><a href="#1-上传视频到七牛云django端实现" class="headerlink" title="1.上传视频到七牛云django端实现"></a>1.上传视频到七牛云django端实现</h1><h3 id="1-1-获取七牛云秘钥"><a href="#1-1-获取七牛云秘钥" class="headerlink" title="1.1 获取七牛云秘钥"></a>1.1 获取七牛云秘钥</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//portal.qiniu.com/user/key</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201015213409693.png" style="width: 800px; margin-left: 50px;"> </img></p><h3 id="1-2-在syl-x2F-settings-py中配置七牛云上传"><a href="#1-2-在syl-x2F-settings-py中配置七牛云上传" class="headerlink" title="1.2 在syl&#x2F;settings.py中配置七牛云上传"></a>1.2 在syl&#x2F;settings.py中配置七牛云上传</h3><ul><li>参考官方</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//github.com/glasslion/django-qiniu-storage</span></span><br></pre></td></tr></table></figure><ul><li><code>syl/settings.py</code>中配置七牛云上传</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加配置settings.py</span></span><br><span class="line">QINIU_ACCESS_KEY = <span class="string">&quot;PwyTqrclbus4ntRct1o8G2V-qkR1rI7hbd_5Gx29&quot;</span>  <span class="comment"># 七牛</span></span><br><span class="line">QINIU_SECRET_KEY = <span class="string">&quot;IuvSm1vJh2YUiYWFwV-kGmHAJF9R9iGuH2Q1ifea&quot;</span>  <span class="comment"># 七牛</span></span><br><span class="line">QINIU_BUCKET_NAME = <span class="string">&quot;syl-images&quot;</span>                               <span class="comment"># 库名字</span></span><br><span class="line">QINIU_BUCKET_DOMAIN = <span class="string">&quot;qi11dgv17.hn-bkt.clouddn.com&quot;</span>           <span class="comment"># 外部访问链接</span></span><br><span class="line">QINIU_SECURE_URL = <span class="literal">False</span>                                       <span class="comment"># 使用http</span></span><br><span class="line">PREFIX_URL = <span class="string">&#x27;http://&#x27;</span></span><br><span class="line">MEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN + <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">&#x27;qiniustorage.backends.QiniuMediaStorage&#x27;</span>  <span class="comment"># 指定文件管理类</span></span><br><span class="line">MEDIA_ROOT = os.path.join(<span class="string">&#x27;&#x27;</span>, <span class="string">&quot;media&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MEDIA_URL = &#x27;/media/&#x27;</span></span><br><span class="line"><span class="comment"># MEDIA_ROOT = os.path.join(BASE_DIR, &#x27;media&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10.对课程发布评论接口</title>
      <link href="//pages/02f17e/"/>
      <url>//pages/02f17e/</url>
      
        <content type="html"><![CDATA[<h1 id="1-发布品论接口"><a href="#1-发布品论接口" class="headerlink" title="1.发布品论接口"></a>1.发布品论接口</h1><h3 id="1-1-course-urls-py-中添加路由"><a href="#1-1-course-urls-py-中添加路由" class="headerlink" title="1.1 course/urls.py 中添加路由"></a>1.1 <code>course/urls.py</code> 中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;comment/&#x27;</span>, views.CommentView.as_view()),  <span class="comment"># 查询用户名手机号使用量的视图,  /user/count/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-course-views-py添加评论视图函数"><a href="#1-2-course-views-py添加评论视图函数" class="headerlink" title="1.2 course/views.py添加评论视图函数"></a>1.2 <code>course/views.py</code>添加评论视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.utils <span class="keyword">import</span> jwt_decode_handler</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        1.token</span></span><br><span class="line"><span class="string">        2.course_id</span></span><br><span class="line"><span class="string">        3.content</span></span><br><span class="line"><span class="string">        4.fid</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 1.获取参数</span></span><br><span class="line">        token = request.data.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        course_id = request.data.get(<span class="string">&#x27;course_id&#x27;</span>)</span><br><span class="line">        content = request.data.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.验证是否为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([token, course_id,content]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">9999</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;参数不全&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.通过jwt token获取用户: &#123;&#x27;user_id&#x27;: 2, &#x27;username&#x27;: &#x27;lisi&#x27;, &#x27;exp&#x27;: 1561504444, &#x27;email&#x27;: &#x27;&#x27;&#125;</span></span><br><span class="line">        toke_user = jwt_decode_handler(token)</span><br><span class="line">        user_id = toke_user.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">        fid = request.data.get(<span class="string">&#x27;fid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.创建评论</span></span><br><span class="line">        <span class="comment"># 4.1 如果没有评论父ID证明是第一次评论，直接创建到评论表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fid:</span><br><span class="line">            Comment.objects.create(</span><br><span class="line">                user_id=user_id,</span><br><span class="line">                course_id = course_id,</span><br><span class="line">                content = content</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            to_user = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;发表品论成功&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2.测试接口"></a>2.测试接口</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Http://192.168.56.100:8888/course/comment/</span><br></pre></td></tr></table></figure><h1 id="3-JWT通过token获取用户信息"><a href="#3-JWT通过token获取用户信息" class="headerlink" title="3.JWT通过token获取用户信息"></a>3.JWT通过token获取用户信息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过用户token获取用户信息</span></span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.utils <span class="keyword">import</span> jwt_decode_handler</span><br><span class="line">toke_user = jwt_decode_handler(token)</span><br><span class="line"><span class="comment"># &#123;&#x27;user_id&#x27;: 2, &#x27;username&#x27;: &#x27;lisi&#x27;, &#x27;exp&#x27;: 1561504444, &#x27;email&#x27;: &#x27;&#x27;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day07 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.RBAC角色权限管理类</title>
      <link href="//pages/9dcecc/"/>
      <url>//pages/9dcecc/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基于-Django-的后台管理平台，采用-RBAC-权限管理机制"><a href="#1-基于-Django-的后台管理平台，采用-RBAC-权限管理机制" class="headerlink" title="1.基于 Django 的后台管理平台，采用 RBAC 权限管理机制"></a>1.基于 Django 的后台管理平台，采用 RBAC 权限管理机制</h3><ul><li>用户表、角色表、权限表、资源列表<ul><li><code>用户表</code>：账号、姓名、邮箱、添加时间、最后登录时间、账号是否禁止登录</li><li><code>角色表</code>：商品管理员、订单管理员、超级管理员</li><li><code>资源列表(路径正则)</code>：资源名称（项目模块名称），资源路径（后台路由）<ul><li>资源分类：商品模块、订单模块、营销模块、权限模块、内容模块、其他模块</li></ul></li><li><code>权限表</code>：对某一个路由的增删改查权限</li><li><img src="././assets/image-20200511090755364.png" style="width: 1000px; margin-left: 0px;"> </img></li></ul></li></ul><h3 id="1-RBAC角色权限管理机制实现思路"><a href="#1-RBAC角色权限管理机制实现思路" class="headerlink" title="1. RBAC角色权限管理机制实现思路"></a>1. RBAC角色权限管理机制实现思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 面向资源编程</span></span><br><span class="line">https://www.shiyanlou.com/v1/books/        <span class="comment"># 请求后端 books书籍表中数据</span></span><br><span class="line">get</span><br><span class="line">    post</span><br><span class="line"><span class="comment"># 用户表</span></span><br><span class="line"><span class="comment"># 角色表</span></span><br><span class="line"><span class="comment"># 权限表</span></span><br><span class="line">get/post/put/delete 对应关系</span><br></pre></td></tr></table></figure><ul><li>所有权限的本质是对数据库中表中数据增删改查的操作</li><li>而这些增删改查的操作是通过前端不同路由，通过get、post、put、delete方法操作数据库的</li><li>对权限的控制，最简单的方法就是判断当前用户是否可以对指定路由请求操作的权限</li><li>把角色和这个角色能够访问的 url 和 请求方式进行关联（因为正是的业务逻辑用户权限划分力度可能非常细致）</li><li>再简单的业务逻辑中这一张表就是权限表</li></ul><table><thead><tr><th>路由 资源(可能对应的是后端路由的 name名称，可以通过name名称解析出对应路由)</th><th>请求方式</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>get</td><td>判断用户是否可以查询books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>post</td><td>判断用户是否可以添加books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>put</td><td>判断用户是否可以更新books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>delete</td><td>判断用户是否可以删除books表中数据</td></tr></tbody></table><ul><li>后端如何判断用户权限<ul><li>用户发送求方法 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的url</li><li>后端首先查询时哪一个用户，然后查询当前用户的角色</li><li>最后判断这个角色是否可以访问 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的对应方法即可</li><li>如果这个角色有权限访问这个url就返回数据，不能访问就返回 401状态码</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day09 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.路径模板两张表设计</title>
      <link href="//pages/fb74de/"/>
      <url>//pages/fb74de/</url>
      
        <content type="html"><![CDATA[<h1 id="0-路径表关系梳理"><a href="#0-路径表关系梳理" class="headerlink" title="0.路径表关系梳理"></a>0.路径表关系梳理</h1><img src="././assets/image-20201011132049472.png" style="width: 800px; margin-left: 50px;"> <h1 id="1-路径表"><a href="#1-路径表" class="headerlink" title="1.路径表"></a>1.路径表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路径表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Path</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;路径名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;路径图片&#x27;</span>, upload_to=<span class="string">&#x27;path&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;路径描述&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    user = models.ManyToManyField(<span class="string">&#x27;user.User&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">course_total</span>(<span class="params">self</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> jd <span class="keyword">in</span> self.jieduan.<span class="built_in">all</span>():</span><br><span class="line">            count = count + jd.courses.count()</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_path&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p><img src="././assets/image-20201011125705862.png" style="width: 800px; margin-left: 50px;"> </img></p><h1 id="2-阶段表"><a href="#2-阶段表" class="headerlink" title="2.阶段表"></a>2.阶段表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JieDuan</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;阶段名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;阶段序号&#x27;</span>)</span><br><span class="line">    path = models.ForeignKey(Path, related_name=<span class="string">&#x27;jieduan&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line">    courses = models.ManyToManyField(Course, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_jieduan&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s-第%s阶段-%s&quot;</span> % (self.path.title, self.serial_num, self.title)</span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201011130250511.png" style="width: 800px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day09 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.课程播放接口权限限制2</title>
      <link href="//pages/063758/"/>
      <url>//pages/063758/</url>
      
        <content type="html"><![CDATA[<h1 id="1-重写django权限"><a href="#1-重写django权限" class="headerlink" title="1.重写django权限"></a>1.重写django权限</h1><h3 id="1-1syl-utils-authentication-py重写权限模块"><a href="#1-1syl-utils-authentication-py重写权限模块" class="headerlink" title="1.1syl/utils/authentication.py重写权限模块"></a>1.1<code>syl/utils/authentication.py</code>重写权限模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> UserCourse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义权限（局部）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPermission</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    <span class="comment"># has_permission 是用户对这个视图有没有 GET POST PUT PATCH DELETE 权限的分别判断</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;has_perm&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(view.kwargs.get(&quot;pk&quot;), request.user.id)</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断用户对模型有没有访问权&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 任何用户对使用此权限类的视图都有访问权限</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="comment"># 管理员对用户模型有访问权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> view.kwargs.get(<span class="string">&#x27;pk&#x27;</span>) == <span class="built_in">str</span>(request.user.<span class="built_in">id</span>):</span><br><span class="line">            <span class="comment"># 携带的id和用户的id相同时有访问权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># has_object_permission 是用户过了 has_permission 判断有权限以后，再判断这个用户有没有对一个具体的对象有没有操作权限</span></span><br><span class="line">    <span class="comment"># 这样设置以后，即使是django admin管理员也只能查询自己user标的信息，不能查询其他用户的单条信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># 判断当前用户是否有访问 /course/sections/1/ 接口权限</span></span><br><span class="line">        course_detail_url = re.match(<span class="string">&#x27;/course/sections/(\d+)/$&#x27;</span>, request.path_info)</span><br><span class="line">        <span class="keyword">if</span> course_detail_url:</span><br><span class="line">            user = request.user</span><br><span class="line">            course = obj.chapters.course</span><br><span class="line">            has_video_rights = self.video_rights(user,course)</span><br><span class="line">            <span class="keyword">return</span> has_video_rights</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对用户是否有课程播放权限进行验证</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">video_rights</span>(<span class="params">user,course</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        :param user: 当前登录用户</span></span><br><span class="line"><span class="string">        :param course: 用户要播放的课程对象</span></span><br><span class="line"><span class="string">        :return: 返回True有权限，否则出发异常</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 1.免费课程直接返回True</span></span><br><span class="line">        <span class="comment"># 2.会员免费课程，判断当前用户是否是会员，如果是会员返回True</span></span><br><span class="line">        <span class="comment"># 3.付费课程，判断当前用户在UserCourse表中有购买记录返回True</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            is_buy = UserCourse.objects.get(course=course, user=user)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.ParseError(<span class="string">&#x27;没卖课程播放个毛线！头给你打扁！&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="2-添加视频播放接口权限"><a href="#2-添加视频播放接口权限" class="headerlink" title="2.添加视频播放接口权限"></a>2.添加视频播放接口权限</h1><h3 id="2-1-course-urls-py中添加路由"><a href="#2-1-course-urls-py中添加路由" class="headerlink" title="2.1 course/urls.py中添加路由"></a>2.1 <code>course/urls.py</code>中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">r&#x27;sections&#x27;</span>, views.SectionsViewSet)</span><br></pre></td></tr></table></figure><h3 id="2-2-course-x2F-views-py中使用自定义权限"><a href="#2-2-course-x2F-views-py中使用自定义权限" class="headerlink" title="2.2 course&#x2F;views.py中使用自定义权限"></a>2.2 course&#x2F;views.py中使用自定义权限</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.authentication <span class="keyword">import</span> MyPermission</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SectionsViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    queryset = Sections.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SectionsSerializer</span><br><span class="line">    permission_classes = (MyPermission,)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day09 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.搜索引擎工作原理</title>
      <link href="//pages/69d132/"/>
      <url>//pages/69d132/</url>
      
        <content type="html"><![CDATA[<h1 id="1-搜索引擎工作原理"><a href="#1-搜索引擎工作原理" class="headerlink" title="1.搜索引擎工作原理"></a>1.搜索引擎工作原理</h1><h2 id="1-倒排索引"><a href="#1-倒排索引" class="headerlink" title="1.倒排索引"></a>1.倒排索引</h2><ul><li><p><code>搜索引擎中存储的是倒排索引，就是分好的词，和词语文章的关联</code></p></li><li><p>事先把文章使用分词打散，以词为依据，标记清楚对应的文章的编号</p></li><li><p>查询时</p><ul><li>把查询的语句也进行分词，然后根据分词，找到那些文章中包含了这些词</li></ul></li></ul><p><img src="./assets/image-20201013203919448.png" style="width: 800px; margin-left: 50px;"> </img></p><h1 id="2-django创建全文索引的过程"><a href="#2-django创建全文索引的过程" class="headerlink" title="2.django创建全文索引的过程"></a>2.django创建全文索引的过程</h1><ul><li>1.django中提供的是结构化数据（mysql中）</li><li>2.haystack（搜索框架）把结构化转非结构化</li><li>3.搜索引擎（ES，whoosh）把非结构化转分词</li></ul><p><img src="./assets/image-20201014204014035.png" style="width: 800px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day10 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.课程全文检索接口</title>
      <link href="//pages/2c9ca0/"/>
      <url>//pages/2c9ca0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h1><p>前后端不分离：<a href="https://www.cnblogs.com/xiaonq/p/12363589.html">https://www.cnblogs.com/xiaonq/p/12363589.html</a></p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install drf-haystack   <span class="comment"># django的开源 搜索框架（python语音写的，搜索框架可以使用其他语音的搜索引擎）</span></span><br><span class="line">pip install whoosh         <span class="comment"># 搜索引擎（python语音写的）</span></span><br><span class="line">pip install jieba          <span class="comment"># 中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好</span></span><br></pre></td></tr></table></figure><h3 id="1-2-什么是haystack？"><a href="#1-2-什么是haystack？" class="headerlink" title="1.2 什么是haystack？"></a>1.2 什么是haystack？</h3><ul><li><p>haystack是django的开源搜索框架，该框架支持<code>Solr,Elasticsearch,Whoosh, Xapian</code> 搜索引擎，不用更改代码，直接切换引擎，减少代码量。</p></li><li><p>搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小巧，配置比较简单，当然性能自然略低。</p></li><li><p>中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换whoosh的分词组件。</p></li></ul><h1 id="2-配置使用"><a href="#2-配置使用" class="headerlink" title="2.配置使用"></a>2.配置使用</h1><h3 id="2-1-syl-settings-py-全文检索配置"><a href="#2-1-syl-settings-py-全文检索配置" class="headerlink" title="2.1 syl/settings.py 全文检索配置"></a>2.1 <code>syl/settings.py</code> 全文检索配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1.注册app &#x27;&#x27;&#x27;</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;haystack&#x27;</span>,   <span class="comment"># haystack要放在应用的上面</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.模板路径 &#x27;&#x27;&#x27;</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;3.全文检索配置&#x27;&#x27;&#x27;</span></span><br><span class="line">HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class="number">15</span>      <span class="comment"># 搜索出多条数据时需要分页</span></span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># &#x27;ENGINE&#x27;: &#x27;haystack.backends.whoosh_backend.WhooshEngine&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;course.whoosh_cn_backend.MyWhooshEngine&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PATH&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;whoosh_index&#x27;</span>),             <span class="comment"># 指定倒排索引存放位置</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># # ES引擎</span></span><br><span class="line"><span class="comment"># HAYSTACK_CONNECTIONS = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;default&#x27;: &#123;</span></span><br><span class="line"><span class="comment">#         &#x27;ENGINE&#x27;: &#x27;haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine&#x27;,</span></span><br><span class="line"><span class="comment">#         &#x27;URL&#x27;: &#x27;http://10.211.55.15:9200/&#x27;,  # Elasticsearch服务器ip地址，端口号固定为9200</span></span><br><span class="line"><span class="comment">#         &#x27;INDEX_NAME&#x27;: &#x27;syl&#x27;,  # Elasticsearch建立的反向索引库的名称</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># 添加此项，当数据库改变时，会自动更新索引，非常方便</span></span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = <span class="string">&#x27;haystack.signals.RealtimeSignalProcessor&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-在子应用下创建索引文件"><a href="#2-2-在子应用下创建索引文件" class="headerlink" title="2.2 在子应用下创建索引文件"></a>2.2 在子应用下创建索引文件</h3><ul><li><code>apps/course/search_indexes.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apps/course/search_indexes.py   </span></span><br><span class="line"><span class="comment"># 文件名必须是 search_indexes.py</span></span><br><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Course</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改此处，类名为模型类的名称+Index，比如模型类为GoodsInfo,则这里类名为GoodsInfoIndex(其实可以随便写)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseIndex</span>(indexes.SearchIndex, indexes.Indexable):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Course索引类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># text为索引字段</span></span><br><span class="line">    <span class="comment"># document = True，这代表haystack和搜索引擎将使用此字段的内容作为索引进行检索</span></span><br><span class="line">    <span class="comment"># use_template=True 指定根据表中的那些字段建立索引文件的说明放在一个文件中</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对那张表进行查询</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_model</span>(<span class="params">self</span>):     <span class="comment"># 重载get_model方法，必须要有</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回建立索引的模型类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Course       <span class="comment"># 返回这个model</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 建立索引的数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index_queryset</span>(<span class="params">self, using=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回要建立索引的数据查询集&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 这个方法返回什么内容，最终就会对那些方法建立索引，这里是对所有字段建立索引</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><h3 id="2-3-指定索引模板文件"><a href="#2-3-指定索引模板文件" class="headerlink" title="2.3 指定索引模板文件"></a>2.3 指定索引模板文件</h3><ul><li><p><code>templates/search/indexes/course/course_text.txt</code></p></li><li><p>&#96;&#96;&#96;python</p><h1 id="创建文件路径命名必须这个规范：templates-x2F-search-x2F-indexes-x2F-应用名称-x2F-模型类名称-text-txt"><a href="#创建文件路径命名必须这个规范：templates-x2F-search-x2F-indexes-x2F-应用名称-x2F-模型类名称-text-txt" class="headerlink" title="创建文件路径命名必须这个规范：templates&#x2F;search&#x2F;indexes&#x2F;应用名称&#x2F;模型类名称_text.txt"></a>创建文件路径命名必须这个规范：templates&#x2F;search&#x2F;indexes&#x2F;应用名称&#x2F;模型类名称_text.txt</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.4 修改为jieba分词中的中文分析器</span><br><span class="line"></span><br><span class="line">- `apps/course/whoosh_cn_backend.py`</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 更换 text 字段的 分析方式, 变为jieba分词中的中文分析器</span><br><span class="line">from haystack.backends.whoosh_backend import WhooshEngine, WhooshSearchBackend</span><br><span class="line">from whoosh.fields import TEXT</span><br><span class="line">from jieba.analyse import ChineseAnalyzer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyWhooshSearchBackend(WhooshSearchBackend):</span><br><span class="line">    def build_schema(self, fields):</span><br><span class="line">        (content_field_name, schema) = super().build_schema(fields)</span><br><span class="line">        # 指定whoosh使用jieba进行分词</span><br><span class="line">        schema._fields[&#x27;text&#x27;] = TEXT(stored=True,</span><br><span class="line">                                      analyzer=ChineseAnalyzer(),</span><br><span class="line">                                      field_boost=fields.get(&#x27;text&#x27;).boost,</span><br><span class="line">                                      sortable=True)</span><br><span class="line">        return (content_field_name, schema)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyWhooshEngine(WhooshEngine):</span><br><span class="line">    backend = MyWhooshSearchBackend</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-课程全文检索接口视图函数"><a href="#2-5-课程全文检索接口视图函数" class="headerlink" title="2.5 课程全文检索接口视图函数"></a>2.5 课程全文检索接口视图函数</h3><ul><li><code>course/views.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> syl <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> InvalidPage, Paginator</span><br><span class="line"><span class="keyword">from</span> haystack.forms <span class="keyword">import</span> ModelSearchForm</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果settings.py中配置就是用settings中配置的，否则就每页15条</span></span><br><span class="line">RESULTS_PER_PAGE = <span class="built_in">getattr</span>(settings, <span class="string">&#x27;HAYSTACK_SEARCH_RESULTS_PER_PAGE&#x27;</span>, <span class="number">15</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">course_index_search</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment">#1.获取前端传过来的关键字（查询数据）</span></span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;q&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    page = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>))   <span class="comment"># 第几页</span></span><br><span class="line">    page_size = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;page_size&#x27;</span>, RESULTS_PER_PAGE))  <span class="comment">#每页多少条</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#2.获取查询条件，进行查询</span></span><br><span class="line">    <span class="keyword">if</span> query:</span><br><span class="line">        form = ModelSearchForm(request.GET, load_all=<span class="literal">True</span>)  <span class="comment"># 将查询条件传递给查询对象</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():  </span><br><span class="line">            results = form.search()   <span class="comment"># 查询出来的最终数据</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            results = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">404</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;No file found！&#x27;</span>, <span class="string">&quot;data&quot;</span>: []&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#3.对结果集进行分页</span></span><br><span class="line">    paginator = Paginator(results, page_size)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = paginator.page(page)   <span class="comment"># 从分好的页中拿第几页</span></span><br><span class="line">    <span class="keyword">except</span> InvalidPage:               <span class="comment"># 如果分页出错</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">404</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;No file found！&#x27;</span>, <span class="string">&quot;data&quot;</span>: []&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#4.把查询的分页结果集对象转换成json格式</span></span><br><span class="line">    jsondata = []</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> page.object_list:   <span class="comment"># 分页后的课程查询结果</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: result.<span class="built_in">object</span>.<span class="built_in">id</span>,</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>: result.<span class="built_in">object</span>.title,</span><br><span class="line">            <span class="string">&#x27;desc&#x27;</span>: result.<span class="built_in">object</span>.desc,</span><br><span class="line">            <span class="string">&#x27;img&#x27;</span>: request.scheme+<span class="string">&#x27;://&#x27;</span>+request.META[<span class="string">&#x27;HTTP_HOST&#x27;</span>]+result.<span class="built_in">object</span>.img.url,</span><br><span class="line">            <span class="comment">#&#x27;follower&#x27;: result.object.follower,</span></span><br><span class="line">            <span class="string">&#x27;learner&#x27;</span>: result.<span class="built_in">object</span>.learner,</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: result.<span class="built_in">object</span>.status,</span><br><span class="line">            <span class="string">&#x27;course_type&#x27;</span>: result.<span class="built_in">object</span>.course_type.<span class="built_in">id</span></span><br><span class="line">        &#125;</span><br><span class="line">        jsondata.append(data)</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;Search successfully！&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;count&quot;</span>: page.paginator.count, <span class="string">&quot;results&quot;</span>: jsondata&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(result)</span><br></pre></td></tr></table></figure><h3 id="2-6-syl-urls-py添加路由"><a href="#2-6-syl-urls-py添加路由" class="headerlink" title="2.6 syl/urls.py添加路由"></a>2.6 <code>syl/urls.py</code>添加路由</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;search/&#x27;, course_index_search),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-7-命令构建倒排索引"><a href="#2-7-命令构建倒排索引" class="headerlink" title="2.7 命令构建倒排索引"></a>2.7 命令构建倒排索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br></pre></td></tr></table></figure><h1 id="3-测试课程全文检索"><a href="#3-测试课程全文检索" class="headerlink" title="3.测试课程全文检索"></a>3.测试课程全文检索</h1><ul><li>测试接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.100:8888/search/?q=入门&amp;page=1&amp;page_size=1</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="./assets/image-20201014230446423.png" style="width: 700px; margin-left: 50px;"> </img></p><ul><li>返回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Search successfully！&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;results&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux入门课程&quot;</span>,</span><br><span class="line">                <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/course/linux.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;learner&quot;</span>: <span class="number">222</span>,</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;course_type&quot;</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day10 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.路径页面接口开发</title>
      <link href="//pages/5455aa/"/>
      <url>//pages/5455aa/</url>
      
        <content type="html"><![CDATA[<h1 id="0-路径页面图"><a href="#0-路径页面图" class="headerlink" title="0.路径页面图"></a>0.路径页面图</h1><p><img src="././assets/image-20201011132315593.png" style="width: 800px; margin-left: 50px;"> </img></p><h1 id="1-课程路径接口开发"><a href="#1-课程路径接口开发" class="headerlink" title="1.课程路径接口开发"></a>1.课程路径接口开发</h1><h3 id="1-1-course-urls-py添加路由"><a href="#1-1-course-urls-py添加路由" class="headerlink" title="1.1 course/urls.py添加路由"></a>1.1 <code>course/urls.py</code>添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">r&#x27;path&#x27;</span>, views.PathViewSet)</span><br></pre></td></tr></table></figure><h3 id="1-2-course-serializers-py写序列化器"><a href="#1-2-course-serializers-py写序列化器" class="headerlink" title="1.2 course/serializers.py写序列化器"></a>1.2 <code>course/serializers.py</code>写序列化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> course.models <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PathSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Path</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>, <span class="string">&#x27;course_total&#x27;</span>)</span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># exclude = [&#x27;user&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JieDuanSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    courses = CourseSerializer(many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = JieDuan</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PathDeepSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    jieduan = JieDuanSerializer(many=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3course-views-py添加视图函数"><a href="#1-3course-views-py添加视图函数" class="headerlink" title="1.3course/views.py添加视图函数"></a>1.3<code>course/views.py</code>添加视图函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import viewsets</span><br><span class="line">from course.models import *</span><br><span class="line">from course.serializers import *</span><br><span class="line"></span><br><span class="line">class PathViewSet(viewsets.ModelViewSet):</span><br><span class="line">    queryset = Path.objects.all()</span><br><span class="line"></span><br><span class="line">    def get_serializer_class(self):</span><br><span class="line">        if self.action == &#x27;list&#x27;:</span><br><span class="line">            return PathSerializer</span><br><span class="line">        else:</span><br><span class="line">            return PathDeepSerializer</span><br></pre></td></tr></table></figure><h3 id="1-4-course-admin-py注册后台管理"><a href="#1-4-course-admin-py注册后台管理" class="headerlink" title="1.4 course/admin.py注册后台管理"></a>1.4 <code>course/admin.py</code>注册后台管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from . import models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.Path)</span><br></pre></td></tr></table></figure><h3 id="1-5-测试接口"><a href="#1-5-测试接口" class="headerlink" title="1.5 测试接口"></a>1.5 测试接口</h3><ul><li>测试接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/course/path/</span></span><br></pre></td></tr></table></figure><p><img src="././assets/image-20201011133509931.png" style="width: 900px; margin-left: 50px;"> </img></p><ul><li>返回事例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;count&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;next&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;previous&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;results&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;新手入门&quot;</span>,</span><br><span class="line">            <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/path/xsrm.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;新手入门路径帮助对 IT 技术感兴趣的新手0基础入门计算机编程。本路径通过新手入门、Linux 及 Vim课程熟悉实验楼的实践学习环境，再以 C 语言和一个简单的项目引导你一步步进入计算机技术的殿堂。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;course_total&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Python研发工程师&quot;</span>,</span><br><span class="line">            <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/path/python_path.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;快乐学习python&quot;</span>,</span><br><span class="line">            <span class="string">&quot;course_total&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux入门课程&quot;</span>,</span><br><span class="line">            <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/path/linux_path.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;学习linux&quot;</span>,</span><br><span class="line">            <span class="string">&quot;course_total&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day09 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.使用ES替代whoosh全文检索</title>
      <link href="//pages/87f723/"/>
      <url>//pages/87f723/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker安装ES"><a href="#1-docker安装ES" class="headerlink" title="1.docker安装ES"></a>1.docker安装ES</h1><ul><li><code>1.拉取docker镜像</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从仓库拉取镜像</span></span><br><span class="line">sudo docker image pull delron/elasticsearch-ik:<span class="number">2.4</span><span class="number">.6</span>-<span class="number">1.0</span></span><br></pre></td></tr></table></figure><ul><li><code>2.使用docker安装ES</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">9200</span>:<span class="number">9200</span> -p <span class="number">9300</span>:<span class="number">9300</span> --name elasticsearch delron/elasticsearch-ik:<span class="number">2.4</span><span class="number">.6</span>-<span class="number">1.0</span></span><br></pre></td></tr></table></figure><ul><li><code>3.在页面中测试</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:9200/</span></span><br></pre></td></tr></table></figure><p><img src="./assets/image-20201110190156743.png" style="width: 600px; margin-left: 50px;"> </img></p><h1 id="2-使用ES替代whoosh全文检索"><a href="#2-使用ES替代whoosh全文检索" class="headerlink" title="2.使用ES替代whoosh全文检索"></a>2.使用ES替代whoosh全文检索</h1><h3 id="2-1-在Django中修改搜索引擎为ES"><a href="#2-1-在Django中修改搜索引擎为ES" class="headerlink" title="2.1 在Django中修改搜索引擎为ES"></a>2.1 在Django中修改搜索引擎为ES</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py  修改haystack配置</span></span><br><span class="line"><span class="comment"># ES引擎</span></span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;URL&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:9200/&#x27;</span>,        <span class="comment"># Elasticsearch服务器ip地址，端口号固定为9200</span></span><br><span class="line">        <span class="string">&#x27;INDEX_NAME&#x27;</span>: <span class="string">&#x27;syl&#x27;</span>,                    <span class="comment"># Elasticsearch建立的反向索引库的名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-命令构建倒排索引"><a href="#2-2-命令构建倒排索引" class="headerlink" title="2.2 命令构建倒排索引"></a>2.2 命令构建倒排索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br></pre></td></tr></table></figure><h1 id="3-测试课程全文检索"><a href="#3-测试课程全文检索" class="headerlink" title="3.测试课程全文检索"></a>3.测试课程全文检索</h1><ul><li>测试接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.100:8888/search/?q=入门&amp;page=1&amp;page_size=1</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="./assets/image-20201014230446423.png" style="width: 700px; margin-left: 50px;"> </img></p><ul><li>返回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Search successfully！&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;results&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Linux入门课程&quot;</span>,</span><br><span class="line">                <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;img&quot;</span>: <span class="string">&quot;http://192.168.56.100:8888/media/course/linux.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;learner&quot;</span>: <span class="number">222</span>,</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;course_type&quot;</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day10 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/bfa98e/"/>
      <url>//pages/bfa98e/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业"><a href="#1-作业" class="headerlink" title="1.作业"></a>1.作业</h1><ul><li>微博三方登录原理（博客+画图）</li><li>微博账号注册（博客）</li><li>生成微博授权url（项目代码+博客）</li><li>vue获取授权url（博客）</li><li>微博回调接口（项目代码+博客）</li><li>微博回调空页面（博客）</li><li>绑定微博用户接口（项目代码+博客）</li><li>vue绑定用户页面（博客）</li><li>接口文档（八个接口）</li><li>手绘实验楼表关系图</li><li>把modelviewset整理到博客中的笔记自己在联系两遍(认证、权限、限流、序列化、分页、过滤、排序)</li><li>按照接口文档，自己把项目中的代码写一遍</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.docker基本使用</title>
      <link href="//pages/e1b0c6/"/>
      <url>//pages/e1b0c6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker基本使用"><a href="#1-docker基本使用" class="headerlink" title="1.docker基本使用"></a>1.docker基本使用</h1><h3 id="1-1-镜像常用管理命令"><a href="#1-1-镜像常用管理命令" class="headerlink" title="1.1 镜像常用管理命令"></a>1.1 镜像常用管理命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node4 diff]<span class="comment"># docker help                           # 查看docker帮助</span></span><br><span class="line">[root@linux-node4 diff]<span class="comment"># docker image --help                   # 查看 docker中 镜像相关帮助</span></span><br><span class="line">[root@linux-node4 diff]<span class="comment"># docker image ls                       # 查看当前所有镜像</span></span><br><span class="line">[root@linux-node4 diff]<span class="comment"># docker image inspect nginx            # 查看指定镜像（nginx镜像）详细信息</span></span><br><span class="line">[root@linux-node4 diff]<span class="comment"># docker pull nginx:1.14                # 下载指定版本镜像 nginx</span></span><br><span class="line">[root@linux-node4 diff]<span class="comment"># docker image rm nginx:1.14            # 删除nginx 1.14版本</span></span><br></pre></td></tr></table></figure><h3 id="1-2-docker创建容器常用命令"><a href="#1-2-docker创建容器常用命令" class="headerlink" title="1.2 docker创建容器常用命令"></a>1.2 docker创建容器常用命令</h3><ul><li>docker run 基本使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@dev:~<span class="comment"># docker run -itd nginx</span></span><br><span class="line">root@dev:~<span class="comment"># docker ps</span></span><br><span class="line">root@dev:~<span class="comment"># docker rm -f e182a69f841d</span></span><br></pre></td></tr></table></figure><ul><li>docker run常用参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-d   <span class="comment"># 后台运行容器，并返回容器ID；</span></span><br><span class="line">-i   <span class="comment"># 以交互模式运行容器，通常与 -t 同时使用；</span></span><br><span class="line">-t   <span class="comment"># 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span></span><br><span class="line">-P   <span class="comment"># 随机端口映射，容器内部端口随机映射到主机的高端口</span></span><br><span class="line">-p   <span class="comment"># 指定端口映射，格式为：主机(宿主)端口:容器端口</span></span><br><span class="line">--name=<span class="string">&quot;nginx-lb&quot;</span>   <span class="comment"># 为容器指定一个名称；</span></span><br><span class="line">--dns <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>       <span class="comment"># 指定容器使用的DNS服务器，默认和宿主一致；</span></span><br></pre></td></tr></table></figure><ul><li>docker使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node4 diff]<span class="comment"># docker container run -d --name web3 -e test=123456 -p 8800:80 -h webhostname --restart always nginx</span></span><br><span class="line">-d                   <span class="comment"># 后台启动nginx容器</span></span><br><span class="line">--name web3          <span class="comment"># 自定义容器名字(默认会是一段随机字符串)</span></span><br><span class="line">-e test=<span class="number">123456</span>       <span class="comment"># 启动容器添加变量 test=123456 (echo $test)</span></span><br><span class="line">-p <span class="number">8800</span>:<span class="number">80</span>           <span class="comment"># 宿主机的8800端口映射到docker容器的80端口中</span></span><br><span class="line">-h webhostname       <span class="comment"># docker容器主机名 (a300f394af88)</span></span><br><span class="line">--restart always     <span class="comment"># 宿主机重启自动拉起这个docker容器</span></span><br><span class="line">nginx                <span class="comment"># 使用这个nginx镜像启动容器</span></span><br><span class="line">注：http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.12</span>:<span class="number">8800</span>/     访问这个docker  nginx</span><br><span class="line">[root@linux-node4 diff]<span class="comment"># docker logs web                                 # 查看上面启动的web容器的日志</span></span><br><span class="line">[root@linux-node4 diff]<span class="comment"># docker exec -it web bash                        # 进入容器web</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day10 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.微博三方登录原理讲解</title>
      <link href="//pages/166ba4/"/>
      <url>//pages/166ba4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微博三方登录流程"><a href="#1-微博三方登录流程" class="headerlink" title="1.微博三方登录流程"></a>1.微博三方登录流程</h1><p><img src="./assets/image-20201009090845069.png" style="width: 1000px; margin-left: 50px;"> </img></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://api.weibo.com/oauth2/authorize?</span><br><span class="line">client_id=4122644977</span><br><span class="line">&amp;response_type=code</span><br><span class="line">&amp;state=study&amp;</span><br><span class="line">forcelogin=true&amp;</span><br><span class="line">redirect_uri=https%3A%2F%2Fstudy.163.com%2Fsns%2Fweibo%2FoAuthCallback.htm%3FoauthType%3Dlogin%26returnUrl%3DaHR0cHM6Ly9zdHVkeS4xNjMuY29tL3Byb3ZpZGVyLzQwMDAwMDAwMDQ3ODAxMi9pbmRleC5odG0%2FZnJvbT1zdHVkeQ%3D%3D%26nrsstcw%3Dfalse%26nc%3Dtrue###</span><br><span class="line">https://study.163.com/provider/400000000478012/index.htm?from=study</span><br></pre></td></tr></table></figure><h3 id="1-1-前端获取认证code"><a href="#1-1-前端获取认证code" class="headerlink" title="1.1 前端获取认证code"></a>1.1 前端获取认证code</h3><ul><li><p>1.在Vue页面加载时<code>动态发送请求获取微博授权url</code></p></li><li><p>2.django收到请求的url后，通过微博<code>应用ID(client_id)和回调地址(redirect_uri)</code>动态<code>生成授权url返回给Vue</code></p></li><li><p>3.当用户点击上面的url进行扫码，授权成功会<code>跳转我们的回调界面并附加code参数</code></p></li><li><p>4.Vue获取到微博返回的code后，会   <code>将code发送给django后端</code> (上面的redirect_uri)</p></li></ul><h3 id="1-2-获取微博access-token"><a href="#1-2-获取微博access-token" class="headerlink" title="1.2 获取微博access_token"></a>1.2 获取微博access_token</h3><ul><li><code>后端获取code后，结合client_id、client_secret、redirect_uri参数进行传递,获取微博access_token</code></li></ul><h3 id="1-3-获取微博用户基本信息并保存到数据库"><a href="#1-3-获取微博用户基本信息并保存到数据库" class="headerlink" title="1.3 获取微博用户基本信息并保存到数据库"></a>1.3 获取微博用户基本信息并保存到数据库</h3><ul><li>使用获得的access_token调用获取用户基本信息的接口，<code>获取用户第三方平台的基本信息</code></li><li>用户基本信息  <code>保存到数据库，然后关联本地用户</code>，然后将用户信息返回给前端</li></ul><h3 id="1-4-生成token给Vue"><a href="#1-4-生成token给Vue" class="headerlink" title="1.4 生成token给Vue"></a>1.4 生成token给Vue</h3><ul><li>django后端借助微博认证成功后，可以<code>使用JWT生成token</code>，返回给Vue</li><li><code>Vue将token存储到localStorage中</code>，以便用户访问其他页面进行身份验证</li></ul><h1 id="2-第三方登录与本地登录的关联（三种情况）"><a href="#2-第三方登录与本地登录的关联（三种情况）" class="headerlink" title="2.第三方登录与本地登录的关联（三种情况）"></a>2.第三方登录与本地登录的关联（三种情况）</h1><h3 id="2-1-情况1-本地未登录，第一次登录第三方"><a href="#2-1-情况1-本地未登录，第一次登录第三方" class="headerlink" title="2.1 情况1: 本地未登录，第一次登录第三方"></a>2.1 情况1: 本地未登录，第一次登录第三方</h3><p>此时相当于注册，直接把第三方信息拉取来并注册成本地用户就可以了，并建立本地用户与第三方用户（openid）的绑定关系</p><h3 id="2-2-情况2：本地未登录，再次登录第三方"><a href="#2-2-情况2：本地未登录，再次登录第三方" class="headerlink" title="2.2 情况2：本地未登录，再次登录第三方"></a>2.2 情况2：本地未登录，再次登录第三方</h3><p>此时用户已注册，获取到openid后直接找出对应的本地用户即可</p><h3 id="2-3-情况3：本地登录，并绑定第三方"><a href="#2-3-情况3：本地登录，并绑定第三方" class="headerlink" title="2.3 情况3：本地登录，并绑定第三方"></a>2.3 情况3：本地登录，并绑定第三方</h3><p>这个只要将获取到的openid绑定到本地用户就可以了</p><h1 id="3-oauth认证原理"><a href="#3-oauth认证原理" class="headerlink" title="3.oauth认证原理"></a>3.oauth认证原理</h1><ul><li><p>OAuth是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源，而无需将用户名和密码提供给第三方应用。</p></li><li><p>OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。</p></li><li><p>这个code如果能出三方换取到数据就证明这个用户是三方真实的用户</p></li></ul><h1 id="4-为什么使用三方登录"><a href="#4-为什么使用三方登录" class="headerlink" title="4.为什么使用三方登录"></a>4.为什么使用三方登录</h1><ul><li><p>服务方希望用户注册, 而用户懒得填注册时的各种信息(主要是为了保证用户的唯一性,各种用户名已占用,密码格式限制).</p></li><li><p>而像微信, QQ, 微博等几乎每个人都会安装的应用中用户肯定会在其中某一个应用中已经注册过，证明该用户在已经注册的应用中的唯一性.</p></li><li><p>第三方登录的实质就是在授权时获得第三方应用提供的代表了用户在第三方应用中的唯一性的openid.并将openid储存在第三方服务控制的本地储存.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.安装docker</title>
      <link href="//pages/1b4329/"/>
      <url>//pages/1b4329/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker基本原理"><a href="#1-docker基本原理" class="headerlink" title="1.docker基本原理"></a>1.docker基本原理</h1><p><a href="https://www.cnblogs.com/xiaonq/p/10241045.html">https://www.cnblogs.com/xiaonq/p/10241045.html</a></p><h3 id="1-1-毛线是docker？"><a href="#1-1-毛线是docker？" class="headerlink" title="1.1 毛线是docker？"></a>1.1 毛线是docker？</h3><ul><li>1.Docker是使用最广泛的<code>开源容器引擎</code><ul><li><strong>容器：</strong><ul><li><strong>1）</strong>容器是一个操作系统级别下的虚拟化技术，运行一个容器就行运行一个进程一样</li><li><strong>2）</strong>容器依赖linux内核特性：Namespace（资源隔离）和Cgroups（资源限制）</li></ul></li></ul></li><li>2.一种操作系统基本的<code>虚拟化技术</code><ul><li>我们使用的VMware虚拟机就是虚拟化技术</li><li>一个操作系统下，虚拟出来，其他操作系统的机器</li></ul></li><li>3.一种简单的应用<code>程序打包工具</code></li><li>4.依赖Linux内核特性：<code>Namespace(资源隔离)</code> 和<code> Cgroup（资源限制）</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 91:80 nginx</span><br></pre></td></tr></table></figure><h3 id="1-2-资源隔离和资源限制"><a href="#1-2-资源隔离和资源限制" class="headerlink" title="1.2 资源隔离和资源限制"></a>1.2 资源隔离和资源限制</h3><ul><li><p>资源隔离：</p><ul><li>1）<code>Linux Namespaces</code>机制提供一种资源隔离方案，每个namespace看上去就像一个单独的Linux系统。</li><li>2）<code>PID</code>,IPC(进程通信),<code>Network</code>等系统资源不再是全局性的，而是属于某个特定的Namespace。</li><li>3）每个namespace下的<code>资源对于其他namespace</code>下的资源都是透明，<code>不可见的</code>。</li><li>4）系统中可以同时存在<code>两个进程号为0,1,2的进程</code>，由于<code>属于不同的namespace</code>，所以它们之间并不冲突。</li><li>5）而在用户层面上只能看到属于用户自己namespace下的资源，例如使用ps命令只能列出自己namespace下的进程。</li><li>6）这样<code>每个namespace看上去就像一个单独的Linux系统</code>。</li></ul></li><li><p>资源限制：</p><ul><li>1）为了让容器中的进程更加可控，<code>Docker 使用 Linux cgroups 来限制容器中的进程允许使用的系统资源</code>。</li><li>2）可以在启动容器是指定每个容器可以使用的<code> 网络、磁盘、CPU以及内存</code> 等</li></ul></li></ul><h1 id="2-ubuntu安装docker"><a href="#2-ubuntu安装docker" class="headerlink" title="2.ubuntu安装docker"></a>2.ubuntu安装docker</h1><h3 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1 安装docker"></a>2.1 安装docker</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.卸载旧版本</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.更新ubuntu的apt源索引</span></span><br><span class="line"><span class="comment"># 修改apt国内源为中科大源</span></span><br><span class="line">sudo cp /etc/apt/sources.<span class="built_in">list</span> /etc/apt/sources.<span class="built_in">list</span>.bak</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/&#x27;</span> /etc/apt/sources.<span class="built_in">list</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.安装包允许apt通过HTTPS使用仓库</span></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.添加Docker官方GPG key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.设置Docker稳定版仓库（国内使用都用用国内的源）</span></span><br><span class="line"><span class="comment">#5.1 设置使用阿里云</span></span><br><span class="line">add-apt-repository <span class="string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span></span><br><span class="line"><span class="comment">#5.2 设置使用官方，很慢(不建议用这个)</span></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#6.添加仓库后，更新apt源索引</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.安装最新版Docker CE（社区版）</span></span><br><span class="line">sudo apt-get install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment">#8.检查Docker CE是否安装正确</span></span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="2-2-docker默认是国外源可以设置成国内镜像源"><a href="#2-2-docker默认是国外源可以设置成国内镜像源" class="headerlink" title="2.2 docker默认是国外源可以设置成国内镜像源"></a>2.2 docker默认是国外源可以设置成国内镜像源</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@linux-node1 django-docker]<span class="comment"># vim /etc/docker/daemon.json    # 设置docker镜像源</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@linux-node2 ~]<span class="comment"># systemctl daemon-reload                   # 重载文件</span></span><br><span class="line">[root@linux-node2 ~]<span class="comment"># systemctl restart docker                  # 重启docker生效</span></span><br></pre></td></tr></table></figure><h3 id="2-3-docker启动设置"><a href="#2-3-docker启动设置" class="headerlink" title="2.3 docker启动设置"></a>2.3 docker启动设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Docker服务并设置开机启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="2-4-docker简单使用（创建一个ngixn容器）"><a href="#2-4-docker简单使用（创建一个ngixn容器）" class="headerlink" title="2.4 docker简单使用（创建一个ngixn容器）"></a>2.4 docker简单使用（创建一个ngixn容器）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、创建一个nginx容器</span></span><br><span class="line"> docker run -it nginx</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 2、查看docker运行的容器(可以获取到这个容器的id)</span></span><br><span class="line"> docker ps</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 3、访问这个容器</span></span><br><span class="line"> <span class="comment"># 进入这个nginx容器（进入的文件系统和宿主机是完全隔离的，有自己独立的文件系统）</span></span><br><span class="line"> docker <span class="built_in">exec</span> -it 73877e65c07d bash</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 4、查看当前容器的 IP</span></span><br><span class="line"> docker inspect 73877e65c07d   <span class="comment"># 73877e65c07d是通过docekr ps查看到的容器ID</span></span><br><span class="line"> curl <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>               <span class="comment"># 测试这个nginx容器是否可以访问</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day10 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.生成微博授权URL接口</title>
      <link href="//pages/f9ba99/"/>
      <url>//pages/f9ba99/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建apps-oauth模块进行oauth认证"><a href="#1-创建apps-oauth模块进行oauth认证" class="headerlink" title="1.创建apps/oauth模块进行oauth认证"></a>1.创建<code>apps/oauth</code>模块进行oauth认证</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;2.1 在apps文件夹下新建应用： oauth&#x27;&#x27;&#x27;</span></span><br><span class="line">cd syl/apps</span><br><span class="line">python ../manage.py startapp oauth   <span class="comment"># 切换到apps文件夹下执行创建命令</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.2 添加子路由： oauth/urls.py&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.3 在syl/settings.py中添加应用&#x27;&#x27;&#x27;</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;oauth.apps.OauthConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.4 在syl/urls.py主路由中添加&#x27;&#x27;&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;oauth/&#x27;</span>, include(<span class="string">&#x27;oauth.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="2-生成微博授权URL接口"><a href="#2-生成微博授权URL接口" class="headerlink" title="2.生成微博授权URL接口"></a>2.生成微博授权URL接口</h1><h3 id="1-1-添加子路由：-oauth-urls-py"><a href="#1-1-添加子路由：-oauth-urls-py" class="headerlink" title="1.1 添加子路由： oauth/urls.py"></a>1.1 添加子路由： <code>oauth/urls.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;weibo/&#x27;</span>, views.WeiboUrl.as_view()),  <span class="comment"># /oauth/weibo/ 返回微博登录地址</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-syl-settings-py中配微博地址"><a href="#1-2-syl-settings-py中配微博地址" class="headerlink" title="1.2 syl/settings.py中配微博地址"></a>1.2 <code>syl/settings.py</code>中配微博地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WEIBO_CLIENT_ID = <span class="string">&#x27;3516473472&#x27;</span></span><br><span class="line">WEIBO_REDIRECT_URL = <span class="string">&#x27;http://127.0.0.1:8888/oauth/callback/&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-视图函数-oauth-views-py"><a href="#1-3-视图函数-oauth-views-py" class="headerlink" title="1.3 视图函数: oauth/views.py"></a>1.3 视图函数: <code>oauth/views.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成前端跳转到微博扫码页面的url</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeiboUrl</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        生成微博的登陆页面路由地址</span></span><br><span class="line"><span class="string">        https://api.weibo.com/oauth2/authorize?       # 微博oauth认证地址</span></span><br><span class="line"><span class="string">        client_id=4152203033&amp;                         # 注册开发者id</span></span><br><span class="line"><span class="string">        response_type=code&amp;</span></span><br><span class="line"><span class="string">        redirect_uri=http://127.0.0.1:8888/oauth/callback/     # 获取code后将code回调给后端地址</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://api.weibo.com/oauth2/authorize?&#x27;</span>              <span class="comment"># 微博授权的url地址</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;client_id&#x27;</span>: <span class="string">&#x27;3516473472&#x27;</span>,                               <span class="comment"># settings.WEIBO_CLIENT_ID</span></span><br><span class="line">            <span class="string">&#x27;response_type&#x27;</span>: <span class="string">&#x27;code&#x27;</span>,                                 </span><br><span class="line">            <span class="string">&#x27;redirect_uri&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8888/oauth/callback/&#x27;</span>,  <span class="comment"># VUE的回调，微博后台授权的回调地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        weibo_url = url + urlencode(data)</span><br><span class="line">        <span class="comment"># https://api.weibo.com/oauth2/authorize?client_id=4152203033&amp;response_type=code&amp;redirect_uri=http://127.0.0.1:8000/api/weibo_back/</span></span><br><span class="line">        <span class="comment"># return Response(&#123;&#x27;weibo_url&#x27;: weibo_url&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;url&#x27;</span>: weibo_url&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//请求</span><br><span class="line">https://api.weibo.com/oauth2/authorize?client_id=3516473472&amp;redirect_uri=http://127.0.0.1:8888/oauth/callback/&amp;response_type=code</span><br></pre></td></tr></table></figure><h1 id="3-测试生成微博售前URL接口"><a href="#3-测试生成微博售前URL接口" class="headerlink" title="3.测试生成微博售前URL接口"></a>3.测试生成微博售前URL接口</h1><ul><li><p>测试接口获取新浪微博地址</p><ul><li>&#96;&#96;&#96;<br><a href="http://192.168.56.100:8888/oauth/weibo/">http://192.168.56.100:8888/oauth/weibo/</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img src=&quot;./assets/image-20200923111738807.png&quot; style=&quot;width: 800px; margin-left: 50px;&quot;&gt; &lt;/img&gt;</span><br><span class="line"></span><br><span class="line">- 在浏览器访问返回地址即可回到新浪扫码界面</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">https://api.weibo.com/oauth2/authorize?client_id=3516473472&amp;response_type=code&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A8080%2Fweibo_callback</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="./assets/image-20200923112007559.png" style="width: 800px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.微博账号注册</title>
      <link href="//pages/f18ce4/"/>
      <url>//pages/f18ce4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>新浪微博开放平台：<a href="https://open.weibo.com/">https://open.weibo.com/</a></p></blockquote><h1 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h1><ul><li><h5 id="注册新浪微博账号"><a href="#注册新浪微博账号" class="headerlink" title="注册新浪微博账号"></a>注册新浪微博账号</h5></li><li><p><strong>进入首页。创建网站接入的应用</strong>: <a href="https://open.weibo.com/">https://open.weibo.com/</a></p></li></ul><p><img src="./assets/网站接入.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li><h5 id="选择立即接入，进入到创建应用页面"><a href="#选择立即接入，进入到创建应用页面" class="headerlink" title="选择立即接入，进入到创建应用页面"></a>选择立即接入，进入到创建应用页面</h5></li></ul><p><img src="./assets/立即接入.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li><h5 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h5></li></ul><p><img src="./assets/创建应用.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li><h5 id="基本信息页面-https-open-weibo-com-apps-3516473472-info-advanced"><a href="#基本信息页面-https-open-weibo-com-apps-3516473472-info-advanced" class="headerlink" title="基本信息页面: https://open.weibo.com/apps/3516473472/info/advanced"></a>基本信息页面: <a href="https://open.weibo.com/apps/3516473472/info/advanced">https://open.weibo.com/apps/3516473472/info/advanced</a></h5></li></ul><p><img src="./assets/基本信息页面.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li><h5 id="高级信息页面"><a href="#高级信息页面" class="headerlink" title="高级信息页面"></a>高级信息页面</h5></li></ul><p><img src="./assets/高级信息页面.png" style="width: 1000px; margin-left: 50px;"> </img></p><h1 id="2-接口文档"><a href="#2-接口文档" class="headerlink" title="2.接口文档"></a>2.接口文档</h1><ul><li><h5 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h5></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//open.weibo.com/wiki/授权机制说明</span></span><br></pre></td></tr></table></figure><p><img src="./assets/文档oauth认证.png" style="width: 800px; margin-left: 50px;"> </img></p><p><img src="./assets/接口文档.png" style="width: 800px; margin-left: 50px;"> </img></p><ul><li>OAuth2.0授权认证</li></ul><table><thead><tr><th>接口</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://open.weibo.com/wiki/Oauth2/authorize">OAuth2&#x2F;authorize</a></td><td>请求用户授权Token</td></tr><tr><td><a href="https://open.weibo.com/wiki/Oauth2/access_token">OAuth2&#x2F;access_token</a></td><td>获取授权过的Access Token, UID</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.vue获取微博授权URL</title>
      <link href="//pages/1b3448/"/>
      <url>//pages/1b3448/</url>
      
        <content type="html"><![CDATA[<h1 id="1-在Vue页面加载时动态发送请求获取微博授权url"><a href="#1-在Vue页面加载时动态发送请求获取微博授权url" class="headerlink" title="1.在Vue页面加载时动态发送请求获取微博授权url"></a>1.在Vue页面加载时动态发送请求获取微博授权url</h1><h3 id="1-1-在components-common-lab-header-vue中写oauth动态获取微博授权URL"><a href="#1-1-在components-common-lab-header-vue中写oauth动态获取微博授权URL" class="headerlink" title="1.1 在components\common\lab_header.vue中写oauth动态获取微博授权URL"></a>1.1 在<code>components\common\lab_header.vue</code>中写oauth动态获取微博授权URL</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取微博登录地址</span></span><br><span class="line"><span class="title function_">oauth</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 从后端获取 微博登录地址</span></span><br><span class="line">  <span class="title function_">oauth_post</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)</span><br><span class="line">    <span class="comment">//&#123;&#x27;code&#x27;: &#x27;0&#x27;, &#x27;msg&#x27;: &#x27;成功&#x27;, &#x27;data&#x27;: &#123;&#x27;url&#x27;: url&#125;&#125;</span></span><br><span class="line">    <span class="keyword">let</span> url = resp.<span class="property">data</span>.<span class="property">url</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">weibo_url</span> = url;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="1-2-在vue的mounted函数中调用获取微博授权url函数"><a href="#1-2-在vue的mounted函数中调用获取微博授权url函数" class="headerlink" title="1.2 在vue的mounted函数中调用获取微博授权url函数"></a>1.2 在vue的mounted函数中调用获取微博授权url函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">oauth</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="1-3-点击”登录”弹出的form表单中加入url"><a href="#1-3-点击”登录”弹出的form表单中加入url" class="headerlink" title="1.3 点击”登录”弹出的form表单中加入url"></a>1.3 点击”登录”弹出的form表单中加入url</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=<span class="string">&quot;/login&quot;</span></span><br><span class="line">  method=<span class="string">&quot;post&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group widget-signin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;weibo_url&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-weibo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.微博回调接口</title>
      <link href="//pages/03253a/"/>
      <url>//pages/03253a/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微博回调接口"><a href="#1-微博回调接口" class="headerlink" title="1.微博回调接口"></a>1.微博回调接口</h1><h3 id="1-1-oauth-urls-py中添加路由"><a href="#1-1-oauth-urls-py中添加路由" class="headerlink" title="1.1 oauth/urls.py中添加路由"></a>1.1 <code>oauth/urls.py</code>中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;weibo/callback/&#x27;</span>, views.OauthWeiboCallback.as_view()),  <span class="comment"># /oauth/weibo/callback/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-oauth-views-py中添加试图函数"><a href="#1-2-oauth-views-py中添加试图函数" class="headerlink" title="1.2 oauth/views.py中添加试图函数"></a>1.2 <code>oauth/views.py</code>中添加试图函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.56.100:8888/oauth/weibo/callback/</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> OauthUser</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.serializers <span class="keyword">import</span> jwt_payload_handler, jwt_encode_handler</span><br><span class="line"><span class="keyword">from</span> user.utils <span class="keyword">import</span> jwt_response_payload_handler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过vue前端传入的code，微博身份验证</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OauthWeiboCallback</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 自定义权限类</span></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 接收vue端传过来的code（微博的用户code）</span></span><br><span class="line">        <span class="comment"># 1.使用微博用户code+微博开发者账号信息换取微博的认证access_token</span></span><br><span class="line">        code = request.data.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;client_id&#x27;</span>: <span class="string">&#x27;3516473472&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;client_secret&#x27;</span>: <span class="string">&#x27;7862ee35a0dc6f0345d0464dc34f14fc&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;grant_type&#x27;</span>: <span class="string">&#x27;authorization_code&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">            <span class="string">&#x27;redirect_uri&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8888/oauth/callback/&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">&#x27;https://api.weibo.com/oauth2/access_token&#x27;</span></span><br><span class="line">        data = requests.post(url=url, data=data).json()  <span class="comment"># 拿取请求的返回结果</span></span><br><span class="line">        <span class="comment"># access_token = data.get(&#x27;access_token&#x27;)         # 获取到的微博token</span></span><br><span class="line">        weibo_uid = data.get(<span class="string">&#x27;uid&#x27;</span>)   <span class="comment"># 获取到少码用户的id</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 根据uid 查询绑定情况</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            oauth_user = OauthUser.objects.get(uid=weibo_uid, oauth_type=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            oauth_user = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 返回动作,  登录成功/需要绑定用户 type 0 登录成功,  1, 授权成功, 需要绑定</span></span><br><span class="line">        <span class="keyword">if</span> oauth_user:</span><br><span class="line">            <span class="comment"># 4. 如果绑定了, 返回token, 登录成功</span></span><br><span class="line">            user = oauth_user.user</span><br><span class="line"></span><br><span class="line">            payload = jwt_payload_handler(user)</span><br><span class="line">            token = jwt_encode_handler(payload)</span><br><span class="line">            <span class="comment"># jwt_response_payload_handler为user模块定义的jwt返回的信息</span></span><br><span class="line">            data = jwt_response_payload_handler(token, user)</span><br><span class="line">            data[<span class="string">&#x27;type&#x27;</span>] = <span class="string">&#x27;0&#x27;</span>  <span class="comment"># 指定为登录成功</span></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登录成功&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: data&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 5. 如果没绑定, 返回标志, 让前端跳转到绑定页面</span></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;授权成功&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;uid&#x27;</span>: weibo_uid&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-oauth-models-py中添加用户绑定模型"><a href="#1-3-oauth-models-py中添加用户绑定模型" class="headerlink" title="1.3 oauth/models.py中添加用户绑定模型"></a>1.3 <code>oauth/models.py</code>中添加用户绑定模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把三方的用户信息，和本地的用户信息进行绑定</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OauthUser</span>(models.Model):</span><br><span class="line">    OAUTHTYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;weibo&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;weixin&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    uid = models.CharField(<span class="string">&#x27;三方用户id&#x27;</span>, max_length=<span class="number">64</span>)                            <span class="comment"># 三方用户id</span></span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE)               <span class="comment"># 本地用户外键，关联User表</span></span><br><span class="line">    oauth_type = models.CharField(<span class="string">&#x27;认证类型&#x27;</span>, max_length=<span class="number">10</span>, choices=OAUTHTYPE)    <span class="comment"># 1,2 ...</span></span><br></pre></td></tr></table></figure><h4 id="1-4-迁移数据库"><a href="#1-4-迁移数据库" class="headerlink" title="1.4 迁移数据库"></a>1.4 迁移数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manager.py makemigrations</span><br><span class="line">python manager.py migrate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.vue微博回调空页面</title>
      <link href="//pages/14ca68/"/>
      <url>//pages/14ca68/</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue微博回调空页面"><a href="#1-vue微博回调空页面" class="headerlink" title="1.vue微博回调空页面"></a>1.vue微博回调空页面</h1><ul><li>注：微博回调空页面为：<code>http://127.0.0.1:8888/oauth/callback/</code></li></ul><h3 id="1-1-页面路径components-oauth-vue"><a href="#1-1-页面路径components-oauth-vue" class="headerlink" title="1.1 页面路径components\oauth.vue"></a>1.1 页面路径<code>components\oauth.vue</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>跳转中....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; oauth_callback_post &#125; <span class="keyword">from</span> <span class="string">&#x27;./axios_api/api&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getCode</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取微博传过来的code，发送给django后端进行验证</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getCode</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 获取url中的code 信息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 当前url 是  http://192.168.56.100:8888/oauth/callback/?code=fe6cbe07708aecf4a2b3d942ed692c4c</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> code = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">code</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 给后端发送code</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> params = &#123; <span class="attr">code</span>: code &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">oauth_callback_post</span>(params).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// code: 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// msg: &quot;授权成功&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// data: &#123;type: &quot;1&quot;, uid: &quot;7410919278&quot;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (resp.<span class="property">data</span>.<span class="property">type</span> == <span class="string">&#x27;0&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// code: 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// msg: &quot;登录成功&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// data: &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// authenticated: &quot;true&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// email: &quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// id: 1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// name: &quot;admin&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// role: null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// token: &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNTk3OTAwNTcyLCJlbWFpbCI6IiIsIm9yaWdfaWF0IjoxNTk3ODE0MTcyfQ.aQT7GSR_xQBPMlB4_k8-zTHnx0ow3OC2KHa3C8MgilY&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// type: &quot;0&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// username: &quot;admin&quot;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> res = resp.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, res.<span class="property">username</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// localStorage.setItem(&#x27;img&#x27;, res.img)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">token</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uid&#x27;</span>, res.<span class="property">id</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">login_username</span> = res.<span class="property">username</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">opened</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// alert(res.message)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (resp.<span class="property">data</span>.<span class="property">type</span> == <span class="string">&#x27;1&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">visiable</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">uid</span> = resp.<span class="property">data</span>.<span class="property">uid</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07.绑定微博用户接口</title>
      <link href="//pages/6b3584/"/>
      <url>//pages/6b3584/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微博绑定用户接口"><a href="#1-微博绑定用户接口" class="headerlink" title="1.微博绑定用户接口"></a>1.微博绑定用户接口</h1><h3 id="1-1-oauth-urls-py中添加路由"><a href="#1-1-oauth-urls-py中添加路由" class="headerlink" title="1.1 oauth/urls.py中添加路由"></a>1.1 <code>oauth/urls.py</code>中添加路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;weibo/binduser/&#x27;</span>, views.OauthWeiboBindUser.as_view()),  <span class="comment"># /oauth/weibo/callback/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-oauth-views-py中添加试图函数"><a href="#1-2-oauth-views-py中添加试图函数" class="headerlink" title="1.2 oauth/views.py中添加试图函数"></a>1.2 <code>oauth/views.py</code>中添加试图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OauthWeiboBindUser</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    permission_classes = (AllowAny,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 绑定用户, 1. 已注册用户, 2. 未注册用户</span></span><br><span class="line">        <span class="comment"># 1.1 获取用户名, 密码, weibo_uid</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        weibo_uid = request.data.get(<span class="string">&#x27;weibo_uid&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([username, password, weibo_uid]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;参数不全&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment"># 0.判断是否存在此用户</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User.objects.get(username=username)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            user = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 1. 已注册用户</span></span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="comment"># 1.2 , 如果存在就验证 密码, 验证通过,就绑定, 返回token,登录成功</span></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                ou = OauthUser(uid=weibo_uid, user=user, oauth_type=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                ou.save()</span><br><span class="line">                payload = jwt_payload_handler(user)   <span class="comment"># 通过user对象获取到jwt的payload信息</span></span><br><span class="line">                token = jwt_encode_handler(payload)   <span class="comment"># 生成token</span></span><br><span class="line">                data = jwt_response_payload_handler(token, user)</span><br><span class="line">                data[<span class="string">&#x27;type&#x27;</span>] = <span class="string">&#x27;0&#x27;</span>  <span class="comment"># 指定为登录成功</span></span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登录成功&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: data&#125;)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;密码错误&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 2. 未注册用户</span></span><br><span class="line">            <span class="comment"># 2.1 生成新用户, 设置用户名密码, 保存, 然后绑定, 返回token, 登录成功</span></span><br><span class="line">            user = User(username=username)</span><br><span class="line">            user.set_password(password)</span><br><span class="line">            user.save()</span><br><span class="line">            ou = OauthUser(uid=weibo_uid, user=user, oauth_type=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            ou.save()</span><br><span class="line">            payload = jwt_payload_handler(user)</span><br><span class="line">            token = jwt_encode_handler(payload)</span><br><span class="line">            data = jwt_response_payload_handler(token, user)</span><br><span class="line">            data[<span class="string">&#x27;type&#x27;</span>] = <span class="string">&#x27;0&#x27;</span>  <span class="comment"># 指定为登录成功</span></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登录成功&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: data&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.wsgi_uwsgi_nginx理论部分</title>
      <link href="//pages/fd7506/"/>
      <url>//pages/fd7506/</url>
      
        <content type="html"><![CDATA[<h1 id="1-一些重要概念"><a href="#1-一些重要概念" class="headerlink" title="1.一些重要概念"></a>1.一些重要概念</h1><p><a href="https://www.cnblogs.com/xiaonq/p/8932266.html">https://www.cnblogs.com/xiaonq/p/8932266.html</a></p><h3 id="1-1-web容器"><a href="#1-1-web容器" class="headerlink" title="1.1 web容器"></a>1.1 web容器</h3><ul><li><p>什么是web容器</p><ul><li>1.web容器是帮助我们部署java、php、python、vue等项目的</li></ul></li><li><p>作用（处理请求，返回数据）</p><ul><li>第一，帮助django服务端处理客户端连接，官方号称可以处理10万（实现高并发）</li><li>第二，帮助处理静态资源请求（html、css、JS），返回给客户端浏览器（django等web服务器处理静态资源能力差）</li></ul></li><li><p>常见web容器</p><ul><li><code>1.nginx（python、php）</code><ul><li>LNMP<ul><li>L：LInux</li><li>N：Nginx</li><li>M：MySQL</li><li>P： php</li></ul></li></ul></li><li><code>2.apache（PHP）</code><ul><li>LAMP<ul><li>L：LInux</li><li>A：Apache</li><li>M：MySQL</li><li>P： php</li></ul></li></ul></li><li><code>3.Tomcat（JAVE）</code></li></ul></li></ul><h3 id="1-2-什么是WSGI（web协议）"><a href="#1-2-什么是WSGI（web协议）" class="headerlink" title="1.2 什么是WSGI（web协议）"></a>1.2 什么是WSGI（web协议）</h3><ul><li><p>WSGI是一种<code>python专用</code>的web协议 和http类似</p></li><li><p>WSGI实质：WSGI是一种描述web服务器（如<code>nginx，uWSGI web服务器</code>）如何与<code>web框架</code>（如用Django、Flask框架写的程序）通信的规范、协议</p></li><li><p>WSGI定义了使用<code>python编写的web app(django)与web server（uWSGI）之间接口格式</code></p></li><li><p><strong>为什么需要web协议：</strong></p><ul><li>1）不同的框架有不同的开发方式，但是无论如何，开发出的<code>应用程序(django)都要和服务器(nginx)程序配合</code>，才能为用户提供服务。</li><li>2） 这样，<code>服务器程序(nginx)</code>就需要为不同的框架提供不同的支持,只有支持它的服务器才能被开发出的应用使用，显然这是不可行的。</li><li>3）<strong>web协议本质：</strong>就是定义了<code>Web服务器和Web应用程序或框架之间的一种简单而通用的接口规范</code>。</li></ul></li></ul><h3 id="1-3-uWSGI（web服务器-和nginx类似）"><a href="#1-3-uWSGI（web服务器-和nginx类似）" class="headerlink" title="1.3 uWSGI（web服务器   和nginx类似）"></a>1.3<code> uWSGI</code>（web服务器   和nginx类似）</h3><ul><li><p>什么是uWSGI： uWSGI是一个全功能的HTTP服务器，实现了<code>WSGI协议</code>、<code>uwsgi协议</code>、<code>http协议</code>等。</p></li><li><p>uWSGI作用：它要做的就是把HTTP协议转化成语言支持的网络协议，比如把<code>HTTP协议转化成WSGI协议，让Python可以直接使用</code>。</p></li><li><p>uWSGI特点：轻量级，易部署，性能比nginx差很多,支持多种协议</p></li></ul><h3 id="1-4-Nginx"><a href="#1-4-Nginx" class="headerlink" title="1.4 Nginx"></a>1.4 Nginx</h3><ul><li>Nginx是一个Web服务器,其中的HTTP服务器功能和<code>uWSGI功能很类似</code></li><li>但是Nginx还可以用作更多用途，比如最常用的<code>反向代理、负载均衡、拦截攻击</code>等，而且<code>性能极高</code></li><li>单台nginx号称可以处理10万并发</li></ul><h3 id="1-5-Django"><a href="#1-5-Django" class="headerlink" title="1.5 Django"></a>1.5 Django</h3><ul><li><p>Django是一个Web框架，框架的作用在于处理request和 reponse，其他的不是框架所关心的内容。</p></li><li><p>所以如何部署Django不是Django所需要关心的。</p></li></ul><h1 id="2-nginx-uwsgi-django部署各模块作用"><a href="#2-nginx-uwsgi-django部署各模块作用" class="headerlink" title="2.nginx+uwsgi+django部署各模块作用"></a>2.nginx+uwsgi+django部署各模块作用</h1><p><img src="./assets/image-20201020093516623.png" style="width: 1000px; margin-left: 50px;"> </img></p><h3 id="2-1-Django-Uwsgi-Nginx方案"><a href="#2-1-Django-Uwsgi-Nginx方案" class="headerlink" title="2.1 Django + Uwsgi + Nginx方案"></a>2.1 Django + Uwsgi + Nginx方案</h3><p><img src="./assets/image-20201020140610582.png" style="width: 700px; margin-left: 50px;"> </img></p><ul><li><p>1.请求处理整体流程</p><ul><li>nginx接收到浏览器发送过来的http请求，将包进行解析，分析url<ul><li>**<code>静态文件请求：</code>**就直接访问用户给nginx配置的静态文件目录<code>(html/css/js/图片)</code>，直接返回用户请求的静态文件</li></ul></li><li>**<code>动态接口请求：</code>**那么nginx就将请求转发给uWSGI，最后到达django处理</li></ul></li><li><p>2.各模块作用</p></li><li><p><code>nginx</code>：是对外的服务器，外部浏览器通过url访问nginx，nginx主要处理静态请求<code>(html/css/js/图片)</code></p><ul><li><code>uWSGI</code>：是对内的服务器，主要用来<code>处理动态请求</code>。(从mysql、redis、es等中动态查询到的数据)</li><li><code>uwsgi</code>：是一种web协议，接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并发给wsgi</li><li><code>wsgi</code>：是python专用的web协议，根据请求调用应用程序（django）的某个文件，某个文件的某个函数</li><li><code>django</code>：是真正干活的，查询数据等资源，把处理的结果再次返回给WSGI， WSGI 将返回值进行打包，打包成uwsgi能够接收的格式</li></ul></li><li><p><code>uwsgi</code>：接收wsgi发送的请求，并转发给nginx,nginx最终将返回值返回给浏览器</p></li></ul><h3 id="2-2-Django-uWSGI方案特点"><a href="#2-2-Django-uWSGI方案特点" class="headerlink" title="2.2 Django + uWSGI方案特点"></a>2.2 Django + uWSGI方案特点</h3><ul><li><p>没有nginx而只有uwsgi的服务器，则是Internet请求直接由uwsgi处理，并反馈到web项目中。</p></li><li><p>nginx可以实现安全过滤，防DDOS等保护安全的操作，并且如果配置了多台服务器，nginx可以保证服务器的负载相对均衡。</p></li><li><p>而uwsgi则是一个web服务器，实现了WSGI协议(Web Server Gateway Interface)，http协议等，它可以接收和处理请求，发出响应等。<br>所以只用uwsgi也是可以的。</p></li></ul><h3 id="2-3-nginx和uWSGI特点"><a href="#2-3-nginx和uWSGI特点" class="headerlink" title="2.3 nginx和uWSGI特点"></a>2.3 nginx和uWSGI特点</h3><ul><li><p>1.nginx的作用</p><ul><li>反向代理，可以拦截一些web攻击，保护后端的web服务器</li><li>负载均衡，根据轮询算法，分配请求到多节点web服务器</li><li>缓存静态资源，加快访问速度，释放web服务器的内存占用，专项专用</li><li><img src="./assets/image-20201020141929593.png" style="width: 700px; margin-left: 50px;"></li></ul></li><li><p>2.uWSGI的适用</p><ul><li>单节点服务器的简易部署</li><li>轻量级，好部署</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1)基本信息介绍</span></span><br><span class="line">面试官您好，我叫xxx，今年<span class="number">26</span>岁，家在辽宁。今天，来面试python开发这个职位。</span><br><span class="line"><span class="comment">## 2)做过什么</span></span><br><span class="line">我是<span class="number">17</span>年<span class="number">6</span>月的时候毕业的，在两家公司就职过，先后参与过<span class="number">4</span>个项目的开发，主要包括股票、校园服务平台、机器人自动化以及缴费平台。</span><br><span class="line"><span class="comment">## 3）擅长做什么</span></span><br><span class="line">我有<span class="number">3</span>年的python开发经验，熟悉Django、Flask等多个后端框架，以及Vue、Bootstrap等多个前端框架，了解的数据库有mysql、mongodb、ES等，会使用Git、Docker工具，对restful风格代码有极致追求。</span><br><span class="line"><span class="comment">## 4）凸出自己好学，解决问题能力强</span></span><br><span class="line">我觉得我最大的核心竞争力就是具有较好的逻辑分析能力和一定的解决问题的能力，我一直都以成为一个优秀的架构师为目标。</span><br><span class="line">我期望加入贵公司，并与公司携手共赢，谢谢。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是<span class="number">17</span>年毕业的，最近三年主要负责python后端开发；</span><br><span class="line">上家公司在内蒙古金财，主要负责 机器人自动化平台和金牛缴费平台研发工作，在这里我前端和后端都有参与，前端主要用的是vue框架，后端主要用django框架，测试环境采用Docker容器化部署，线上环境部署在阿里云，使用SLB和nginx</span><br><span class="line">在这之前，我在清华科技做过一年多，主要负责自动化工单系统和监控系统的自动化平台开发；</span><br><span class="line">您看，还有什么需要了解的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day11 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.Django + Uwsgi+Nginx 的生产环境部署</title>
      <link href="//pages/be1a11/"/>
      <url>//pages/be1a11/</url>
      
        <content type="html"><![CDATA[<h1 id="1-django的settings配置"><a href="#1-django的settings配置" class="headerlink" title="1.django的settings配置"></a>1.django的settings配置</h1><p><a href="https://www.cnblogs.com/xiaonq/p/8932266.html">https://www.cnblogs.com/xiaonq/p/8932266.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改配置</span></span><br><span class="line"><span class="comment"># 正式上线关闭调试模式, 不会暴露服务器信息</span></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.允许的主机</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;xxx.com&#x27;</span>,<span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.前端修改接口地址（vue）</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>:<span class="number">8888</span>/   =&gt;  http://xxx.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.MySQL数据库根据实际情况配置（注意地址）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.缓存配置, 改为默认, 最简单形式（配置redis）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.收集静态文件</span></span><br><span class="line"><span class="comment"># 静态资源收集位置</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.命令行执行</span></span><br><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h1 id="2-安装uwsgi-配置uWSGI"><a href="#2-安装uwsgi-配置uWSGI" class="headerlink" title="2.安装uwsgi 配置uWSGI"></a>2.安装uwsgi 配置uWSGI</h1><h3 id="2-1-安装uwsgi"><a href="#2-1-安装uwsgi" class="headerlink" title="2.1 安装uwsgi"></a>2.1 安装uwsgi</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1. 安装uwsgi&#x27;&#x27;&#x27;</span></span><br><span class="line">[root@linux-node1 /]<span class="comment"># workon syl</span></span><br><span class="line">[root@linux-node1 /]<span class="comment"># pip3 install uwsgi     # 安装uwsgi</span></span><br><span class="line">[root@linux-node1 /]<span class="comment"># whereis uwsgi          # 查看uwsgi安装路径</span></span><br><span class="line">uwsgi: /root/.virtualenvs/syl/<span class="built_in">bin</span>/uwsgi</span><br></pre></td></tr></table></figure><h3 id="2-2-配置uwgsi-ini启动文件"><a href="#2-2-配置uwgsi-ini启动文件" class="headerlink" title="2.2 配置uwgsi.ini启动文件"></a>2.2 配置uwgsi.ini启动文件</h3><p><img src="./assets/image-20201020140610582.png" style="width: 700px; margin-left: 50px;"> </img></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.每个请求处理时间为0.5s？</span><br><span class="line">2.当前配置QPS是多少？（每秒能处理的请求数量）</span><br><span class="line">QPS就是160</span><br></pre></td></tr></table></figure><ul><li>在<code>uwsgi_conf/uwsgi.ini</code>下新建这个文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 /]<span class="comment"># vim uwsgi_conf/uwsgi.ini</span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 使用Nginx连接时使用，Django程序所在服务器地址和端口号</span></span><br><span class="line">socket=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line"><span class="comment"># 项目目录绝对路径</span></span><br><span class="line">chdir=/teach/shiyanlou_project/syl</span><br><span class="line"><span class="comment"># 项目中wsgi.py文件的目录，相对于项目目录</span></span><br><span class="line">wsgi-file=syl/wsgi.py</span><br><span class="line"><span class="comment"># 进程数（机器核数的1倍）</span></span><br><span class="line">processes=<span class="number">4</span></span><br><span class="line"><span class="comment"># 线程数</span></span><br><span class="line">threads=<span class="number">50</span></span><br><span class="line"><span class="comment"># uwsgi服务器的角色</span></span><br><span class="line">master=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 存放进程编号的文件</span></span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line"><span class="comment"># 指定依赖的虚拟环境</span></span><br><span class="line">virtualenv=/root/.virtualenvs/syl</span><br></pre></td></tr></table></figure><h3 id="2-3-使用uwsgi启动django：一定要在这个项目目录中"><a href="#2-3-使用uwsgi启动django：一定要在这个项目目录中" class="headerlink" title="2.3 使用uwsgi启动django：一定要在这个项目目录中"></a>2.3 使用uwsgi启动django：一定要在这个项目目录中</h3><ul><li><code>测试命令，和我们下面没有任何关系</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;3. 使用uwsgi启动django：一定要在这个项目目录中&#x27;&#x27;&#x27;</span></span><br><span class="line">[root@linux-node1 /]<span class="comment"># uwsgi --http 192.168.56.100:6666 --file syl/wsgi.py --static-map=/static=static</span></span><br><span class="line">访问项目：http://<span class="number">192.168</span><span class="number">.56</span><span class="number">.11</span></span><br></pre></td></tr></table></figure><h1 id="3-安装配置nginx"><a href="#3-安装配置nginx" class="headerlink" title="3.安装配置nginx"></a>3.安装配置nginx</h1><h3 id="3-1-安装nginx"><a href="#3-1-安装nginx" class="headerlink" title="3.1 安装nginx"></a>3.1 安装nginx</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 /]<span class="comment"># sudo apt update                  # 更新apt</span></span><br><span class="line">[root@linux-node1 /]<span class="comment"># sudo apt install nginx           # 安装nginx</span></span><br><span class="line">[root@linux-node1 /]<span class="comment"># sudo systemctl status nginx      # 查看nginx状态</span></span><br></pre></td></tr></table></figure><h3 id="3-2-配置nginx-uwsgi启动"><a href="#3-2-配置nginx-uwsgi启动" class="headerlink" title="3.2  配置nginx+uwsgi启动"></a>3.2  配置nginx+uwsgi启动</h3><ul><li>在<code>/etc/nginx/conf.d/</code>文件夹下新建任意名字 xxx.conf即可，写入的内容是官方给的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># /etc/nginx/conf.<span class="property">d</span>/django.<span class="property">conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">8888</span>;</span><br><span class="line">    server_name  <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span>;</span><br><span class="line">        # /teach/shiyanlou_project/syl/<span class="keyword">static</span>/admin/css/base.<span class="property">css</span></span><br><span class="line">        # <span class="attr">http</span>:<span class="comment">//192.168.56.100/static/admin/css/base.css</span></span><br><span class="line">        location /<span class="keyword">static</span> &#123;   </span><br><span class="line">            alias /teach/shiyanlou_project/syl/<span class="keyword">static</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        location / &#123;</span><br><span class="line">              include uwsgi_params;</span><br><span class="line">              uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>;</span><br><span class="line">              uwsgi_ignore_client_abort on;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-etc-nginx-nginx-confnginx主配置文件解读-不用变"><a href="#3-3-etc-nginx-nginx-confnginx主配置文件解读-不用变" class="headerlink" title="3.3  /etc/nginx/nginx.confnginx主配置文件解读(不用变)"></a>3.3  <code>/etc/nginx/nginx.conf</code>nginx主配置文件解读(<code>不用变</code>)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections <span class="number">768</span>;      <span class="comment"># 链接数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">keepalive_timeout <span class="number">65</span>;</span><br><span class="line">types_hash_max_size <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/access.log;         <span class="comment"># 1.客户浏览器访问nginx服务记录（客户户端访问异常时可以查看）</span></span><br><span class="line">error_log /var/log/nginx/error.log;           <span class="comment"># 2.nginx错误日志（nginx启动时报错的日志）</span></span><br><span class="line">include /etc/nginx/conf.d/*.conf;             <span class="comment"># 3.nginx扩展配置文件</span></span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-uwsgi和nginx-启动、关闭、查看日志"><a href="#4-uwsgi和nginx-启动、关闭、查看日志" class="headerlink" title="4. uwsgi和nginx 启动、关闭、查看日志"></a>4. uwsgi和nginx 启动、关闭、查看日志</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;1.启动并查看nginx日志&#x27;&#x27;&#x27;</span></span><br><span class="line">[root@linux-node1 demo2]<span class="comment"># systemctl restart nginx         # 开启nginx</span></span><br><span class="line">root@dev:uwsgi_conf<span class="comment"># tail -f /var/log/nginx/access.log    # 查看nginx接入日志</span></span><br><span class="line">root@dev:uwsgi_conf<span class="comment"># tail -f /var/log/nginx/error.log     # 查看nginx错误日志</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;2.启动并查看uwsgi日志&#x27;&#x27;&#x27;</span></span><br><span class="line">root@dev:uwsgi_conf<span class="comment"># cd /teach/shiyanlou_project/uwsgi_conf     # 进入实验楼目录</span></span><br><span class="line">[root@linux-node1 demo2]<span class="comment"># uwsgi --ini uwsgi.ini                 # 启动uwsgi的django项目</span></span><br><span class="line"><span class="comment"># http://192.168.56.100:8888/ 访问项目</span></span><br><span class="line">[root@linux-node1 demo2]<span class="comment"># uwsgi --stop uwsgi.pid                # 关闭uwsgi</span></span><br><span class="line">[root@dev:uwsgi_conf<span class="comment"># tail -f uwsgi.log                         # 查看uwsgi日志</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(syl) root@dev:uwsgi_conf<span class="comment"># ps -ef|grep uwsgi       # 查看uwsgi服务是否启动</span></span><br><span class="line">root      <span class="number">92328</span>  <span class="number">89266</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">37</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=auto uwsgi</span><br><span class="line">(syl) root@dev:uwsgi_conf<span class="comment"># netstat -anptu | grep 8888     # 查看8888端口被哪一个程序占用</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day11 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.mysql主从同步原理</title>
      <link href="//pages/83627e/"/>
      <url>//pages/83627e/</url>
      
        <content type="html"><![CDATA[<h1 id="1-主从同步机制"><a href="#1-主从同步机制" class="headerlink" title="1.主从同步机制"></a>1.主从同步机制</h1><h3 id="1-1-主从同步介绍和优点"><a href="#1-1-主从同步介绍和优点" class="headerlink" title="1.1 主从同步介绍和优点"></a>1.1 主从同步介绍和优点</h3><ul><li>在多台数据服务器中，分为<code>主服务器和从服务器</code>,一台主服务器对应多台从服务器。</li><li><code>主服务器只负责写入数据</code>，从服务器只负责同步主服务器的数据，并让外部程序读取数据。</li><li>主服务器写入数据后，<code>即刻将写入数据的命令发送给从服务器</code>，从而使得主从数据同步。</li><li>应用程序可以随机读取某一台从服务器的数据，这样就可以<code>分摊读取数据的压力</code>。</li><li>当从服务器不能工作时，整个系统将不受影响；当主服务器不能工作时，可以方便地<code>从从服务器选举一台来当主服务器</code></li><li>使用主从同步的优点：<ul><li>提高读写性能<ul><li>因为主从同步之后，<code>数据写入和读取是在不同的服务器上进行的</code>，而且可以通过增加从服务器来提高数据库的读取性能。</li></ul></li><li>提高数据安全<ul><li>因为数据已复制到从服务器，可以在从服务器上备份而不破坏主服务器相应数据。</li></ul></li></ul></li></ul><h3 id="1-2-主从同步机制"><a href="#1-2-主从同步机制" class="headerlink" title="1.2 主从同步机制"></a>1.2 主从同步机制</h3><ul><li><p>主从同步（两种）</p><ul><li>全量同步</li><li>增量同步</li></ul></li><li><p>MySQL服务器之间的主从同步是基于**<code>二进制日志机制</code>**，主服务器使用二进制日志来记录数据库的变动情况</p></li><li><p>从服务器通过读取和执行该日志文件来保持和主服务器的数据一致</p></li></ul><p><img src="./assets/image-20201109203001697.png" style="width: 700px; margin-left: 50px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day12 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08.vue绑定用户页面</title>
      <link href="//pages/b9b22e/"/>
      <url>//pages/b9b22e/</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue微博回调空页面"><a href="#1-vue微博回调空页面" class="headerlink" title="1.vue微博回调空页面"></a>1.vue微博回调空页面</h1><ul><li>注：微博回调空页面为：<code>http://127.0.0.1:8888/oauth/callback/</code></li></ul><h3 id="1-1-页面路径components-oauth-vue"><a href="#1-1-页面路径components-oauth-vue" class="headerlink" title="1.1 页面路径components\oauth.vue"></a>1.1 页面路径<code>components\oauth.vue</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;visiable&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      绑定用户</span></span><br><span class="line"><span class="language-xml">      用户名: <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">blur</span>=<span class="string">&quot;check_username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;username_message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      密码: <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;bindUser&quot;</span>&gt;</span>绑定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; oauth_callback_post, oauth_binduser_post, user_count &#125; <span class="keyword">from</span> <span class="string">&#x27;./axios_api/api&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">visiable</span>: <span class="literal">false</span>, <span class="comment">// 绑定用户窗口</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">uid</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// weibo_uid</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">username_message</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">username_error</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">getCode</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 判断用户名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">check_username</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;判断用户名&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span> == <span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>); <span class="comment">//字符串正则表达式 4到14位（字母，数字，下划线，减号）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">username</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">username_message</span> = <span class="string">&#x27;用户名不能为空&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">username_error</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">username</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">username_message</span> = <span class="string">&#x27;用户名格式不正确&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">username_error</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 去后端检查用户名使用数量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">user_count</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;username&#x27;</span>, <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">username</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">count</span> &gt; <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">username_message</span> = <span class="string">&#x27;用户名已存在, 请输入密码&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">username_error</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">username_message</span> = <span class="string">&#x27;用户名可用, 将创建新用户,请输入密码&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">username_error</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getCode</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取url中的code 信息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 当前url 是  http://mysyl.com:8080/oauth/callback/?code=fe6cbe07708aecf4a2b3d942ed692c4c</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> code = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">code</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 给后端发送code</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> params = &#123; <span class="attr">code</span>: code &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">oauth_callback_post</span>(params).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// code: 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// msg: &quot;授权成功&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// data: &#123;type: &quot;1&quot;, uid: &quot;7410919278&quot;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (resp.<span class="property">data</span>.<span class="property">type</span> == <span class="string">&#x27;0&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// code: 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// msg: &quot;登录成功&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// data: &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// authenticated: &quot;true&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// email: &quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// id: 1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// name: &quot;admin&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// role: null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// token: &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNTk3OTAwNTcyLCJlbWFpbCI6IiIsIm9yaWdfaWF0IjoxNTk3ODE0MTcyfQ.aQT7GSR_xQBPMlB4_k8-zTHnx0ow3OC2KHa3C8MgilY&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// type: &quot;0&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// username: &quot;admin&quot;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> res = resp.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, res.<span class="property">username</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// localStorage.setItem(&#x27;img&#x27;, res.img)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">token</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uid&#x27;</span>, res.<span class="property">id</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">login_username</span> = res.<span class="property">username</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">opened</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// alert(res.message)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (resp.<span class="property">data</span>.<span class="property">type</span> == <span class="string">&#x27;1&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">visiable</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uid</span> = resp.<span class="property">data</span>.<span class="property">uid</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">bindUser</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">username_error</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 发送  用户名, 密码, weibo_uid 到后端接口, 进行绑定</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> params = &#123; <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>, <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span>, <span class="attr">weibo_uid</span>: <span class="variable language_">this</span>.<span class="property">uid</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">oauth_binduser_post</span>(params).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> res = resp.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, res.<span class="property">username</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// localStorage.setItem(&#x27;img&#x27;, res.img)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">token</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uid&#x27;</span>, res.<span class="property">id</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">login_username</span> = res.<span class="property">username</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">opened</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// alert(res.message)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day05 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.mysql主从配置</title>
      <link href="//pages/53a644/"/>
      <url>//pages/53a644/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装mysql主从服务器"><a href="#1-安装mysql主从服务器" class="headerlink" title="1.安装mysql主从服务器"></a>1.安装mysql主从服务器</h1><h3 id="1-1-初始化docker中mysql挂载目录"><a href="#1-1-初始化docker中mysql挂载目录" class="headerlink" title="1.1 初始化docker中mysql挂载目录"></a>1.1 初始化docker中mysql挂载目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建2个目录, 存放master和slave的配置和数据</span></span><br><span class="line">cd ~   <span class="comment"># ~ 代表家目录   /home/你的用户名/</span></span><br><span class="line">mkdir mysql_master</span><br><span class="line">mkdir mysql_slave</span><br><span class="line"></span><br><span class="line">cd mysql_master</span><br><span class="line">mkdir data</span><br><span class="line">cp -r /etc/mysql/mysql.conf.d ./</span><br><span class="line"></span><br><span class="line">cd ../mysql_slave</span><br><span class="line">mkdir data</span><br><span class="line">cp -r /etc/mysql/mysql.conf.d ./</span><br></pre></td></tr></table></figure><h3 id="1-2-MySQL主机配置和从机配置"><a href="#1-2-MySQL主机配置和从机配置" class="headerlink" title="1.2 MySQL主机配置和从机配置"></a>1.2 MySQL主机配置和从机配置</h3><ul><li>主机配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /root/mysql_master/mysql.conf.d/mysqld.cnf</span></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">port = <span class="number">3307</span></span><br><span class="line"><span class="comment"># 开启日志</span></span><br><span class="line">general_log_file = /var/log/mysql/mysql.log</span><br><span class="line">general_log = <span class="number">1</span></span><br><span class="line"><span class="comment"># 主机唯一编号</span></span><br><span class="line">server-<span class="built_in">id</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># binlog日志文件</span></span><br><span class="line">log_bin = /var/log/mysql/mysql-<span class="built_in">bin</span>.log</span><br></pre></td></tr></table></figure><ul><li>从机配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从机配置  /root/mysql_slave/mysql.conf.d/mysqld.cnf</span></span><br><span class="line">port = <span class="number">3308</span></span><br><span class="line">general_log = <span class="number">0</span>  </span><br><span class="line">server-<span class="built_in">id</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="1-3-使用docker安装mysql主从"><a href="#1-3-使用docker安装mysql主从" class="headerlink" title="1.3 使用docker安装mysql主从"></a>1.3 使用docker安装mysql主从</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.下载mysql 5.7.32版本的mysql</span></span><br><span class="line">docker pull mysql:<span class="number">5.7</span><span class="number">.32</span>                     <span class="comment"># 直接通过官方下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.启动master</span></span><br><span class="line">sudo docker run  -d --name mysql-master -e MYSQL_ROOT_PASSWORD=<span class="number">1</span> --network=host -v /root/mysql_master/data:/var/lib/mysql -v /root/mysql_master/mysql.conf.d:/etc/mysql/mysql.conf.d mysql:<span class="number">5.7</span><span class="number">.32</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">#3.启动slave         </span></span><br><span class="line">sudo docker run  -d --name mysql-slave -e MYSQL_ROOT_PASSWORD=<span class="number">1</span> --network=host -v /root/mysql_slave/data:/var/lib/mysql -v /root/mysql_slave/mysql.conf.d:/etc/mysql/mysql.conf.d mysql:<span class="number">5.7</span><span class="number">.32</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">#4.测试master/slave  (密码是1)</span></span><br><span class="line">mysql -uroot -p1 -h <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span> --port=<span class="number">3307</span></span><br><span class="line">mysql -uroot -p1 -h <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span> --port=<span class="number">3308</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.导出导入数据</span></span><br><span class="line"><span class="comment">#5.1 从主机导出</span></span><br><span class="line">mysqldump -uroot -p1 -h192<span class="number">.168</span><span class="number">.56</span><span class="number">.100</span> -P3307 --<span class="built_in">all</span>-databases --lock-<span class="built_in">all</span>-tables &gt; ~/master_db.sql</span><br><span class="line"><span class="comment">#5.2 导入从机</span></span><br><span class="line">mysql -uroot -p1 -h192<span class="number">.168</span><span class="number">.56</span><span class="number">.100</span> -P3308 &lt; ~/master_db.sql</span><br></pre></td></tr></table></figure><h3 id="1-4-配置MySQL主从"><a href="#1-4-配置MySQL主从" class="headerlink" title="1.4 配置MySQL主从"></a>1.4 配置MySQL主从</h3><ul><li><code>配置mysql master</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录到主机</span></span><br><span class="line">mysql –uroot –p -h <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span> -P <span class="number">3307</span></span><br><span class="line"><span class="comment"># 创建从机账号</span></span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;slave&#x27;</span>;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看二进制日志信息, 记录 文件名 和 偏移量, 后面会用到</span></span><br><span class="line">mysql&gt; SHOW MASTER STATUS;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-<span class="built_in">bin</span><span class="number">.000003</span> |      <span class="number">722</span> |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure><ul><li><code>配置mysql slave</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置slave</span></span><br><span class="line"><span class="comment"># 登录到从机</span></span><br><span class="line">$ mysql -uroot -p1 -h192<span class="number">.168</span><span class="number">.56</span><span class="number">.100</span> -P3308</span><br><span class="line"><span class="comment"># 从机连接到主机</span></span><br><span class="line">$ change master to master_host=<span class="string">&#x27;192.168.56.100&#x27;</span>, master_port=<span class="number">3307</span>, master_user=<span class="string">&#x27;slave&#x27;</span>, master_password=<span class="string">&#x27;slave&#x27;</span>,master_log_file=<span class="string">&#x27;mysql-bin.000003&#x27;</span>, master_log_pos=<span class="number">722</span>;</span><br><span class="line"><span class="comment"># 开启从机服务</span></span><br><span class="line">$ start slave;</span><br><span class="line"><span class="comment"># 展示从机服务状态</span></span><br><span class="line">$ show slave status \G</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: <span class="number">3307</span></span><br><span class="line">                Connect_Retry: <span class="number">60</span></span><br><span class="line">              Master_Log_File: mysql-<span class="built_in">bin</span><span class="number">.000003</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">722</span></span><br><span class="line">               Relay_Log_File: dev-relay-<span class="built_in">bin</span><span class="number">.000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">320</span></span><br><span class="line">        Relay_Master_Log_File: mysql-<span class="built_in">bin</span><span class="number">.000003</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day12 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.mysql主从项目实战</title>
      <link href="//pages/8ce413/"/>
      <url>//pages/8ce413/</url>
      
        <content type="html"><![CDATA[<h1 id="1-django使用mysql主从"><a href="#1-django使用mysql主从" class="headerlink" title="1.django使用mysql主从"></a>1.django使用mysql主从</h1><h3 id="1-1-在syl-x2F-settings-py中配置mysql主从"><a href="#1-1-在syl-x2F-settings-py中配置mysql主从" class="headerlink" title="1.1 在syl&#x2F;settings.py中配置mysql主从"></a>1.1 在syl&#x2F;settings.py中配置mysql主从</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置django</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;syl&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3307&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;slave&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;syl&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3308&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库路由配置</span></span><br><span class="line">DATABASE_ROUTERS = [<span class="string">&#x27;utils.db_router.MasterSlaveDBRouter&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="1-2-编写mysql路由文件"><a href="#1-2-编写mysql路由文件" class="headerlink" title="1.2 编写mysql路由文件"></a>1.2 编写mysql路由文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># utils/db_router.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MasterSlaveDBRouter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数据库读写路由&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_for_read</span>(<span class="params">self, model, **hints</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;读&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;slave&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_for_write</span>(<span class="params">self, model, **hints</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;写&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;default&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_relation</span>(<span class="params">self, obj1, obj2, **hints</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;是否运行关联操作&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day12 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.Xmind架构图</title>
      <link href="//pages/20941a/"/>
      <url>//pages/20941a/</url>
      
        <content type="html"><![CDATA[<h1 id="1-项目架构分析"><a href="#1-项目架构分析" class="headerlink" title="1.项目架构分析"></a>1.项目架构分析</h1><ul><li><p>前端</p><ul><li>前台（用户页面）</li><li>后台管理系统（对表进行增删改查）</li></ul></li><li><p>后端</p><ul><li>API业务接口</li><li>部署架构（高并发架构）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day01 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.表结构</title>
      <link href="//pages/d88d44/"/>
      <url>//pages/d88d44/</url>
      
        <content type="html"><![CDATA[<h1 id="1-用户模块表结构"><a href="#1-用户模块表结构" class="headerlink" title="1.用户模块表结构"></a>1.用户模块表结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vip</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;vip名称&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    level = models.CharField(<span class="string">&#x27;vip等级&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;vip描述&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_vip&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s-%s&quot;</span> % (self.title, self.level)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    phone = models.CharField(<span class="string">&#x27;手机号&#x27;</span>, max_length=<span class="number">11</span>)</span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;user&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    nick_name = models.CharField(<span class="string">&#x27;昵称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;地址&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    vip = models.ForeignKey(Vip, on_delete=models.SET_NULL, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line">    vip_expiration = models.DateField(<span class="string">&#x27;vip到期时间&#x27;</span>, blank=<span class="literal">True</span>, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_user&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OauthUser</span>(models.Model):</span><br><span class="line">    OAUTHTYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;weibo&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;weixin&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    uid = models.CharField(<span class="string">&#x27;三方用户id&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    oauth_type = models.CharField(<span class="string">&#x27;认证类型&#x27;</span>, max_length=<span class="number">10</span>, choices=OAUTHTYPE)</span><br></pre></td></tr></table></figure><h1 id="2-课程模块表关系"><a href="#2-课程模块表关系" class="headerlink" title="2.课程模块表关系"></a>2.课程模块表关系</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseType</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程类别&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    sequence = models.IntegerField(<span class="string">&#x27;展示顺序&#x27;</span>, default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_coursetype&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseTag</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程标签&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    sequence = models.IntegerField(<span class="string">&#x27;展示顺序&#x27;</span>, default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_coursetag&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    STATUS = (</span><br><span class="line">        (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;即将上线&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;已上线&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;已下线&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    title = models.CharField(<span class="string">&#x27;课程名&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;课程描述&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;课程logo&#x27;</span>, upload_to=<span class="string">&#x27;course&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_type = models.ForeignKey(CourseType, verbose_name=<span class="string">&#x27;课程类型&#x27;</span>, on_delete=models.SET_NULL, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_tag = models.ManyToManyField(CourseTag, verbose_name=<span class="string">&#x27;课程标签&#x27;</span>)</span><br><span class="line">    status = models.CharField(<span class="string">&#x27;课程状态&#x27;</span>, choices=STATUS, max_length=<span class="number">8</span>, default=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    follower = models.IntegerField(<span class="string">&#x27;关注人数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    learner = models.IntegerField(<span class="string">&#x27;学习人数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_course&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chapters</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;章标题&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;章序号&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(Course, related_name=<span class="string">&#x27;chapters&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_chapters&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sections</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;节标题&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;节序号&#x27;</span>)</span><br><span class="line">    chapters = models.ForeignKey(Chapters, related_name=<span class="string">&#x27;sections&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line">    learn_time = models.IntegerField(<span class="string">&#x27;学习小时&#x27;</span>, default=<span class="number">1</span>)</span><br><span class="line">    video = models.FileField(<span class="string">&quot;上传视频&quot;</span>, upload_to=<span class="string">&quot;videos/%Y%m%d/&quot;</span>, blank=<span class="literal">True</span>, max_length=<span class="number">1024</span>)</span><br><span class="line">    seq_num = models.IntegerField(<span class="string">&quot;序号&quot;</span>, default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_sections&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Follow</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_follow&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Path</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;路径名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;路径图片&#x27;</span>, upload_to=<span class="string">&#x27;path&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;路径描述&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    user = models.ManyToManyField(<span class="string">&#x27;user.User&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">course_total</span>(<span class="params">self</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> jd <span class="keyword">in</span> self.jieduan.<span class="built_in">all</span>():</span><br><span class="line">            count = count + jd.courses.count()</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_path&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JieDuan</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;阶段名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    serial_num = models.IntegerField(<span class="string">&#x27;阶段序号&#x27;</span>)</span><br><span class="line">    path = models.ForeignKey(Path, related_name=<span class="string">&#x27;jieduan&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>)</span><br><span class="line">    courses = models.ManyToManyField(Course, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_jieduan&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s-第%s阶段-%s&quot;</span> % (self.path.title, self.serial_num, self.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCourse</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户购买的课程</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;paycourse&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(<span class="string">&#x27;course.Course&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;payuser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_usercourse&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户:%s, 课程:%s&quot;</span> % (self.user.username, self.course.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSections</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.PROTECT, related_name=<span class="string">&#x27;usersections&#x27;</span>)</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.PROTECT, related_name=<span class="string">&#x27;usersections&#x27;</span>)</span><br><span class="line">    section = models.ForeignKey(Sections, on_delete=models.PROTECT, related_name=<span class="string">&#x27;usersections&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_usersections&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户:%s, 课程:%s, 小节: %s&quot;</span> % (self.user.username, self.course.title, self.sections.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name=<span class="string">&#x27;course_comment&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;user_comment&#x27;</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;tb_comment&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论</span></span><br><span class="line"><span class="comment">#   A: 123</span></span><br><span class="line"><span class="comment">#   B:A  234</span></span><br><span class="line"><span class="comment"># 评论的回复</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentReply</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    comment = models.ForeignKey(Comment, on_delete=models.CASCADE, related_name=<span class="string">&#x27;reply&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">    to_user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;comment_to&#x27;</span>)</span><br><span class="line">    <span class="comment"># replay_id = models.IntegerField(&#x27;评论回复的id&#x27;, default=None, null=True)</span></span><br><span class="line">    <span class="comment"># comment_reply = models.ForeignKey(&#x27;self&#x27;, on_delete=models.CASCADE, default=None, null=True,</span></span><br><span class="line">    <span class="comment">#                                   related_name=&#x27;commentreply&#x27;)</span></span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;tb_commentreply&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSelf</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name=<span class="string">&#x27;course_commentself&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.SET_NULL, null=<span class="literal">True</span>, related_name=<span class="string">&#x27;user_commentself&#x27;</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line">    father = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;children&#x27;</span>, default=<span class="literal">None</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;tb_commentself&quot;</span></span><br></pre></td></tr></table></figure><h1 id="3-商品模块"><a href="#3-商品模块" class="headerlink" title="3.商品模块"></a>3.商品模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> utils.MyBaseModel <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    GOODS_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Vip&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Course&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    CHANNEL_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;普通&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;促销&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    goods_type = models.CharField(<span class="string">&#x27;商品种类&#x27;</span>, choices=GOODS_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    product_id = models.CharField(<span class="string">&#x27;产品id&#x27;</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    price = models.DecimalField(<span class="string">&#x27;商品价格&#x27;</span>, max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    channel_type = models.CharField(<span class="string">&#x27;购买渠道&#x27;</span>, choices=CHANNEL_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line"></span><br><span class="line">    is_launched = models.BooleanField(<span class="string">&#x27;是否上架&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_goods&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsCourse</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    PAY_TYPE = (</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;普通&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;促销&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    course = models.ForeignKey(<span class="string">&#x27;course.Course&#x27;</span>, on_delete=models.PROTECT)</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    pay_type = models.CharField(<span class="string">&#x27;购买渠道&#x27;</span>, choices=PAY_TYPE, max_length=<span class="number">8</span>)</span><br><span class="line">    price = models.DecimalField(<span class="string">&#x27;商品价格&#x27;</span>, max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    period = models.IntegerField(<span class="string">&#x27;有效期&#x27;</span>, default=<span class="number">365</span>)</span><br><span class="line">    is_launched = models.BooleanField(<span class="string">&#x27;是否上架&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_goodscourse&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orders</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    PAY_METHOD = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;支付宝&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    ORDER_STATUS = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;待支付&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;已支付&quot;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&quot;已取消&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    user = models.ForeignKey(<span class="string">&#x27;user.User&#x27;</span>, on_delete=models.PROTECT, verbose_name=<span class="string">&quot;下单用户&quot;</span>)</span><br><span class="line">    goods = models.ForeignKey(Goods, on_delete=models.PROTECT)</span><br><span class="line">    order_id = models.CharField(<span class="string">&#x27;订单号&#x27;</span>, max_length=<span class="number">24</span>)</span><br><span class="line">    trade_no = models.CharField(<span class="string">&#x27;支付宝订单号&#x27;</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>)  <span class="comment"># 28位</span></span><br><span class="line">    pay_time = models.DateTimeField(<span class="string">&#x27;支付时间&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    pay_method = models.CharField(<span class="string">&#x27;支付方式&#x27;</span>, choices=PAY_METHOD, default=<span class="number">1</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    status = models.CharField(<span class="string">&#x27;支付状态&#x27;</span>, choices=ORDER_STATUS, default=<span class="number">1</span>, max_length=<span class="number">8</span>)</span><br><span class="line">    total_amount = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;商品总金额&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 优惠券</span></span><br><span class="line">    <span class="comment"># 收货地址</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_orders&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.order_id</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day01 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.表关系图</title>
      <link href="//pages/ed61a6/"/>
      <url>//pages/ed61a6/</url>
      
        <content type="html"><![CDATA[<p><img src="./assets/image-20201005094148016.png" style="width: 1000px; margin-left: 50px;"> </img></p><h1 id="1-用户模块"><a href="#1-用户模块" class="headerlink" title="1.用户模块"></a>1.用户模块</h1><ul><li><p>用户表</p><ul><li>用户名</li><li>手机号</li><li>邮箱</li><li>密码</li><li><code>Vip--&gt;(Vip表)</code></li><li>用户状态（激活&#x2F;禁用）</li></ul></li><li><p>Vip表</p><ul><li>会员名称（普通用户&#x2F;普通会员&#x2F;金卡会员）</li><li>会员等级</li><li>描述信息</li><li>有效期</li></ul></li><li><p>三方登录表</p><ul><li><code>userid---&gt;用户表</code></li><li><code>uid---&gt;第三方的唯一ID</code></li><li>认证类型（微信&#x2F;QQ&#x2F;微博）</li></ul></li></ul><h1 id="2-课程模块"><a href="#2-课程模块" class="headerlink" title="2.课程模块"></a>2.课程模块</h1><ul><li><p>课程表</p><ul><li>课程名称</li><li>关注人数</li><li>学习人数</li><li>课程描述</li><li>图片路径</li><li>课程状态（上线&#x2F;即将上线）</li><li><code>课程标签---&gt;课程标签表</code></li><li><code>课程类别----&gt;课程类别表</code></li></ul></li><li><p>课程标签</p><ul><li>标签名</li><li>显示顺序号</li></ul></li><li><p>课程类别</p><ul><li>名称</li><li>显示序号</li></ul></li><li><p>章表</p><ul><li>章名称</li><li>章序号</li><li><code>课程---&gt;课程表</code></li></ul></li><li><p>节表</p><ul><li>节名称</li><li>节序号(第1节，第2节)</li><li>序号（显示顺序）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day01 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.数据字典</title>
      <link href="//pages/143d98/"/>
      <url>//pages/143d98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据字典"><a href="#1-数据字典" class="headerlink" title="1.数据字典"></a>1.数据字典</h1><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><ul><li>用户表，储存用户信息</li></ul><table><thead><tr><th align="left">字段</th><th align="left">类型</th><th align="left">空</th><th>默认</th><th>注释</th></tr></thead><tbody><tr><td align="left">uid</td><td align="left">int(10)</td><td align="left">否</td><td></td><td></td></tr><tr><td align="left">username</td><td align="left">varchar(20)</td><td align="left">否</td><td></td><td>用户名</td></tr><tr><td align="left">groupid</td><td align="left">tinyint(2)</td><td align="left">否</td><td>2</td><td>1为管理员，2为普通用户。此字段保留方便以后扩展</td></tr><tr><td align="left">password</td><td align="left">varchar(50)</td><td align="left">否</td><td></td><td>密码</td></tr><tr><td align="left">cookie_token</td><td align="left">varchar(50)</td><td align="left">否</td><td></td><td></td></tr><tr><td align="left">cookie_token_expire</td><td align="left">int(11)</td><td align="left">否</td><td></td><td>过期时间</td></tr><tr><td align="left">avatar</td><td align="left">varchar(200)</td><td align="left">是</td><td></td><td>头像</td></tr><tr><td align="left">avatar_small</td><td align="left">varchar(200)</td><td align="left">是</td><td></td><td>小头像</td></tr><tr><td align="left">email</td><td align="left">varchar(50)</td><td align="left">否</td><td></td><td>邮箱</td></tr><tr><td align="left">name</td><td align="left">varchar(15)</td><td align="left">是</td><td></td><td>昵称</td></tr><tr><td align="left">reg_time</td><td align="left">int(11)</td><td align="left">否</td><td>0</td><td>注册时间</td></tr><tr><td align="left">last_login_time</td><td align="left">int(11)</td><td align="left">否</td><td>0</td><td>最后一次登录时间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day01 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00.作业</title>
      <link href="//pages/bfd937/"/>
      <url>//pages/bfd937/</url>
      
        <content type="html"><![CDATA[<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><ul><li><p>根据原型图</p><ul><li>手绘xmind架构图，自己用软件写一遍</li><li>手绘表结构图，自己用visio画图</li><li>图书管理系统练习</li></ul></li><li><p>作业1：把modelviewset整理到博客中(认证、权限、限流、序列化、分页、过滤、排序)</p><p>作业2：把APIview整理到博客中(认证、权限、限流、序列化、分页、过滤、排序)</p><p>作业3：ModelSerializer的功能：字段验证，序列化，整理到博客中</p><p>作业4：Serializer的功能：字段验证，序列化，整理到博客中</p><p>作业5：RESTful风格API整理到博客</p><p>作业6：axios封装  练习+博客</p><p>作业7：前后端联调，实现增删改查 练习+笔记</p><p>作业8：各种model操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day01 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.API接口文档</title>
      <link href="//pages/8a95e5/"/>
      <url>//pages/8a95e5/</url>
      
        <content type="html"><![CDATA[<h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><p><strong>1.简要描述：</strong></p><ul><li>用户注册接口</li></ul><p><strong>2.请求URL：</strong></p><ul><li><code>http://xx.com/api/user/register</code></li></ul><p><strong>3.请求方式：</strong></p><ul><li>POST</li></ul><p><strong>4.参数：访问接口携带参数</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">username</td><td align="left">是</td><td align="left">string</td><td>用户名</td></tr><tr><td align="left">password</td><td align="left">是</td><td align="left">string</td><td>密码</td></tr><tr><td align="left">name</td><td align="left">否</td><td align="left">string</td><td>昵称</td></tr></tbody></table><p><strong>返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;error_code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12154545&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吴系挂&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;groupid&quot;</span><span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;reg_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1436864169&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;last_login_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>返回参数说明</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">groupid</td><td align="left">int</td><td>用户组id，1：超级管理员；2：普通用户</td></tr></tbody></table><p><strong>备注</strong></p><ul><li>更多返回错误代码请看首页的错误代码描述</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> SYL </category>
          
          <category> day01 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.列表</title>
      <link href="//pages/2270e1/"/>
      <url>//pages/2270e1/</url>
      
        <content type="html"><![CDATA[<h2 id="01-列表常用方法"><a href="#01-列表常用方法" class="headerlink" title="01.列表常用方法"></a>01.列表常用方法</h2><h3 id="1-1-append"><a href="#1-1-append" class="headerlink" title="1.1 append"></a>1.1 append</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. append用于在列表末尾追加新的对象</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.append(<span class="number">4</span>)                          <span class="comment">#the result ： [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="1-2-count"><a href="#1-2-count" class="headerlink" title="1.2 count"></a>1.2 count</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2. count方法统计某个元素在列表中出现的次数</span></span><br><span class="line">a = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="string">&#x27;aa&#x27;</span>))                 <span class="comment">#the result ： 3</span></span><br></pre></td></tr></table></figure><h3 id="1-3-extend"><a href="#1-3-extend" class="headerlink" title="1.3 extend"></a>1.3 extend</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3. extend方法可以在列表的末尾一次性追加另一个序列中的多个值</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a.extend(b)                          <span class="comment">#the result ：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h3 id="1-4-index"><a href="#1-4-index" class="headerlink" title="1.4 index"></a>1.4 index</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4. index函数用于从列表中找出某个值第一个匹配项的索引位置</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="number">1</span>))                   <span class="comment">#the result ： 0</span></span><br></pre></td></tr></table></figure><h3 id="1-5-insert"><a href="#1-5-insert" class="headerlink" title="1.5 insert"></a>1.5 insert</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5. insert方法用于将对象插入到列表中</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.insert(<span class="number">0</span>,<span class="string">&#x27;aa&#x27;</span>)            <span class="comment">#the result : [&#x27;aa&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="1-6-pop"><a href="#1-6-pop" class="headerlink" title="1.6 pop"></a>1.6 pop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6. pop方法会移除列表中的一个元素（默认是最后一个），并且返回该元素的值</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.pop()                             <span class="comment">#the result ： [1, 2]</span></span><br><span class="line">a.pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="1-7-remove"><a href="#1-7-remove" class="headerlink" title="1.7 remove"></a>1.7 remove</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#7. remove方法用于移除列表中某个值的第一个匹配项</span></span><br><span class="line">a = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>]</span><br><span class="line">a.remove(<span class="string">&#x27;aa&#x27;</span>)                      <span class="comment">#the result ： [&#x27;bb&#x27;, &#x27;cc&#x27;, &#x27;aa&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="1-8-reverse"><a href="#1-8-reverse" class="headerlink" title="1.8 reverse"></a>1.8 reverse</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#8. reverse方法将列表中的元素反向存放</span></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">a.reverse()                         <span class="comment">#the result ： [&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="1-9-sort"><a href="#1-9-sort" class="headerlink" title="1.9 sort"></a>1.9 sort</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#9. sort方法用于在原位置对列表进行排序，意味着改变原来的列表，让其中的元素按一定顺序排列</span></span><br><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.sort()                           <span class="comment">#the result ：[1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="1-10-enumerate"><a href="#1-10-enumerate" class="headerlink" title="1.10 enumerate"></a>1.10 enumerate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>]</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li, <span class="number">1</span>):  <span class="comment"># 1.代表 k 从哪个数字开始</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1 11</span></span><br><span class="line"><span class="string">2 22</span></span><br><span class="line"><span class="string">3 33</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-11-range和xrange"><a href="#1-11-range和xrange" class="headerlink" title="1.11 range和xrange"></a>1.11 range和xrange</h3><ul><li><p>指定范围，生成指定的数字</p></li><li><p>注：python3中的range类似python2中的xrange，比如a &#x3D; range(1,4) : a返回的不是列表对象而是一个可迭代对象（&lt;class ‘range’&gt;）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、range根据start与stop指定的范围以及step设定的步长，生成一个序列：range([start,] stop[, step])</span></span><br><span class="line"><span class="comment">#2、xrange 用法与 range 完全相同，所不同的是生成的不是一个list对象，而是一个生成器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="1-12-列表去空"><a href="#1-12-列表去空" class="headerlink" title="1.12 列表去空"></a>1.12 列表去空</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法1：</span></span><br><span class="line"><span class="built_in">filter</span>(<span class="literal">None</span>, your_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 法2：</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> your_list:</span><br><span class="line">    your_list.remove(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 法3：</span></span><br><span class="line">your_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> your_list <span class="keyword">if</span> x != <span class="string">&#x27;&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="02-元祖"><a href="#02-元祖" class="headerlink" title="02.元祖"></a>02.元祖</h2><ul><li><strong>元组定义：</strong>元组和列表一样，也是一种序列，唯一的不同是元组不能修改。</li></ul><h3 id="2-1-创建元组"><a href="#2-1-创建元组" class="headerlink" title="2.1 创建元组"></a>2.1 创建元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 创建元组</span></span><br><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">#2. 将列表转换成元组</span></span><br><span class="line"><span class="built_in">tuple</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])                                    <span class="comment">#the result ： (1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><h3 id="2-2-列表和元组常用函数"><a href="#2-2-列表和元组常用函数" class="headerlink" title="2.2 列表和元组常用函数"></a>2.2 列表和元组常用函数</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>com(x,y)</td><td>比较两个值</td></tr><tr><td>len(seq)</td><td>返回序列的长度</td></tr><tr><td>list(seq)</td><td>把序列转换成列表</td></tr><tr><td>max(args)</td><td>返回序列或者参数集合中得最大值</td></tr><tr><td>min(args)</td><td>返回序列或者参数集合中的最小值</td></tr><tr><td>reversed(seq)</td><td>对序列进行反向迭代</td></tr><tr><td>sorted(seq)</td><td>返回已经排列的包含seq 所有元素的列表</td></tr><tr><td>tuple(seq)</td><td>把序列转换成元组</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.字符串</title>
      <link href="//pages/50a8ce/"/>
      <url>//pages/50a8ce/</url>
      
        <content type="html"><![CDATA[<h2 id="01-字符串常用方法"><a href="#01-字符串常用方法" class="headerlink" title="01.字符串常用方法"></a>01.字符串常用方法</h2><h3 id="1-1-find方法"><a href="#1-1-find方法" class="headerlink" title="1.1 find方法"></a>1.1 <code>find</code>方法</h3><ul><li><code>作用：</code>find方法可以在一个较长的字符串中查找子串，他返回子串所在位置的最左端索引，如果没有找到则返回-1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;abcdefghijk&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(<span class="string">&#x27;abc&#x27;</span>))                         <span class="comment">#the result ： 0</span></span><br><span class="line"><span class="built_in">print</span>(a.find(<span class="string">&#x27;abc&#x27;</span>,<span class="number">10</span>,<span class="number">100</span>))                    <span class="comment">#the result ： 11  指定查找的起始和结束查找位置</span></span><br></pre></td></tr></table></figure><h3 id="1-2-join方法"><a href="#1-2-join方法" class="headerlink" title="1.2 join方法"></a>1.2 <code>join</code>方法</h3><ul><li><code>作用：</code>join方法是非常重要的字符串方法，他是split方法的逆方法，用来连接序列中的元素，并且需要被连接的元素都必须是字符串。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;+&#x27;</span>.join(a))                                    <span class="comment">#the result ： 1+2+3</span></span><br></pre></td></tr></table></figure><h3 id="1-3-split方法"><a href="#1-3-split方法" class="headerlink" title="1.3 split方法"></a>1.3 <code>split</code>方法</h3><ul><li><code>作用：</code>这是一个非常重要的字符串，它是join的逆方法，用来将字符串分割成序列</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;1+2+3+4&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;+&#x27;</span>))                            #the result ： [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="1-4-strip"><a href="#1-4-strip" class="headerlink" title="1.4 strip"></a>1.4 strip</h3><ul><li><code>作用：</code>strip 方法返回去除首位空格（不包括内部）的字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;   test   test    &quot;</span>.strip())                <span class="comment">#the result ：“test   test”</span></span><br></pre></td></tr></table></figure><h3 id="1-5-replace"><a href="#1-5-replace" class="headerlink" title="1.5 replace"></a>1.5 replace</h3><ul><li><code>作用：</code>replace方法返回某字符串所有匹配项均被替换之后得到字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This is a test&quot;</span>.replace(<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;is_test&#x27;</span>))     <span class="comment">#the result ： This_test is_test a test</span></span><br></pre></td></tr></table></figure><h3 id="1-6-首字母大写"><a href="#1-6-首字母大写" class="headerlink" title="1.6 首字母大写"></a>1.6 首字母大写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;aBdkndfkFFD&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.capitalize()</span><br><span class="line"><span class="string">&#x27;Abdkndfkffd&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-Pinyin-模块，将汉字转换成拼音"><a href="#1-7-Pinyin-模块，将汉字转换成拼音" class="headerlink" title="1.7 Pinyin 模块，将汉字转换成拼音"></a>1.7 Pinyin 模块，将汉字转换成拼音</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> xpinyin <span class="keyword">import</span> Pinyin</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = Pinyin()</span><br><span class="line">    fullname = raw_input(<span class="string">&#x27;name：&#x27;</span>).strip()</span><br><span class="line">    fullname = fullname.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> fullname</span><br><span class="line">    xin = fullname[<span class="number">0</span>]</span><br><span class="line">    ming = fullname[<span class="number">1</span>:]</span><br><span class="line">    name = ming + <span class="string">&#x27;.&#x27;</span> + xin</span><br><span class="line">    username = p.get_pinyin(name, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> username</span><br><span class="line">    <span class="built_in">print</span> username + <span class="string">&#x27;@yiducloud.cn&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="02-字符串格式化"><a href="#02-字符串格式化" class="headerlink" title="02.字符串格式化"></a>02.字符串格式化</h2><h3 id="2-1-使用百分号（-）字符串格式化"><a href="#2-1-使用百分号（-）字符串格式化" class="headerlink" title="2.1 使用百分号（%）字符串格式化"></a>2.1 使用百分号（%）字符串格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d to hex is %x&quot;</span> %(num, num))        <span class="comment">#100 to hex is 64</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d to hex is %#x&quot;</span> %(num, num))       <span class="comment">#100 to hex is 0x64</span></span><br></pre></td></tr></table></figure><h3 id="2-2-使用format字符串格式化"><a href="#2-2-使用format字符串格式化" class="headerlink" title="2.2 使用format字符串格式化"></a>2.2 使用format字符串格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 位置参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; is &#123;1&#125; years old&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">28</span>))            <span class="comment">#tom is 28 years old</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">28</span>))             <span class="comment">#tom is 28 years old</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hi, &#123;0&#125;! &#123;0&#125; is &#123;1&#125; years old&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">28</span>))      <span class="comment">#Hi, tom! tom is 28 years old</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 关键字参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;name&#125; is &#123;age&#125; years old&quot;</span>.<span class="built_in">format</span>(name = <span class="string">&quot;tom&quot;</span>, age = <span class="number">28</span>))    <span class="comment">#tom is 28 years old</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 下标参数</span></span><br><span class="line">li = [<span class="string">&quot;tom&quot;</span>, <span class="number">28</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0[0]&#125; is &#123;0[1]&#125; years old&quot;</span>.<span class="built_in">format</span>(li))          <span class="comment">#tom is 28 years old</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.字典</title>
      <link href="//pages/24f2db/"/>
      <url>//pages/24f2db/</url>
      
        <content type="html"><![CDATA[<h2 id="01-字典常用方法"><a href="#01-字典常用方法" class="headerlink" title="01.字典常用方法"></a>01.字典常用方法</h2><h3 id="1-1-clear"><a href="#1-1-clear" class="headerlink" title="1.1 clear"></a>1.1 clear</h3><ul><li><code>作用：</code>clear方法清除字典中所有的项，这是一个原地操作，所以无返回值（或则说返回None）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="string">&#x27;Tom&#x27;</span>]=<span class="number">8777</span>             <span class="comment"># 在字典中添加数据           </span></span><br><span class="line">d[<span class="string">&#x27;Jack&#x27;</span>]=<span class="number">9999</span>    </span><br><span class="line"><span class="built_in">print</span>(d)                 <span class="comment">#the result : &#123;&#x27;Jack&#x27;: 9999, &#x27;Tom&#x27;: 8777&#125;</span></span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)                <span class="comment">#the result : &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-copy"><a href="#1-2-copy" class="headerlink" title="1.2 copy"></a>1.2 copy</h3><ul><li><code>作用：</code>copy方法返回一个具有相同 ”键-值” 对的新字典，而不是副本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">8777</span>,<span class="string">&#x27;Fly&#x27;</span>:<span class="number">6666</span>&#125;</span><br><span class="line">a = d.copy()</span><br><span class="line">a[<span class="string">&#x27;Tom&#x27;</span>] = <span class="string">&#x27;改变后的值&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d)                        <span class="comment">#&#123;&#x27;Fly&#x27;: 6666, &#x27;Tom&#x27;: 8777&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a)                        <span class="comment">#&#123;&#x27;Fly&#x27;: 6666, &#x27;Tom&#x27;: &#x27;改变后的值&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-fromkeys"><a href="#1-3-fromkeys" class="headerlink" title="1.3 fromkeys"></a>1.3 fromkeys</h3><ul><li><p><code>作用：</code>fromkeys方法使用给定的键建立新的字典，每个键都对应一个默认的值None。</p></li><li><p>首先建造一个空字典，然后调用它的fromkeys方法，建立另一个字典</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(&#123;&#125;.fromkeys([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>]))         <span class="comment">#the result　：　&#123;&#x27;age&#x27;: None, &#x27;name&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-get"><a href="#1-4-get" class="headerlink" title="1.4 get"></a>1.4 get</h3><ul><li><code>作用：</code>get方法是个更宽松的访问字典项的方法，如果试图访问字典中不存在的项时不会报错仅会    返回：None</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">8777</span>,<span class="string">&#x27;Jack&#x27;</span>:<span class="number">8888</span>,<span class="string">&#x27;Fly&#x27;</span>:<span class="number">6666</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">&#x27;Tom&#x27;</span>))                              <span class="comment">#the result ：     8777</span></span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">&#x27;not_exist&#x27;</span>))                          <span class="comment">#the result ：     None</span></span><br></pre></td></tr></table></figure><h3 id="1-5-循环字典"><a href="#1-5-循环字典" class="headerlink" title="1.5 循环字典"></a>1.5 循环字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">8777</span>,<span class="string">&#x27;Jack&#x27;</span>:<span class="number">8888</span>,<span class="string">&#x27;Fly&#x27;</span>:<span class="number">6666</span>&#125;</span><br><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.values():</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># 方法:3</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure><h3 id="1-6-pop"><a href="#1-6-pop" class="headerlink" title="1.6 pop"></a>1.6 pop</h3><ul><li><code>作用：</code>pop方法用于获得对应与给定键的值，然后将这个”键-值”对从字典中移除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">8777</span>,<span class="string">&#x27;Jack&#x27;</span>:<span class="number">8888</span>,<span class="string">&#x27;Fly&#x27;</span>:<span class="number">6666</span>&#125;</span><br><span class="line">v = d.pop(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(v)                    <span class="comment">#8777</span></span><br></pre></td></tr></table></figure><h3 id="1-7-setdefault"><a href="#1-7-setdefault" class="headerlink" title="1.7 setdefault"></a>1.7 setdefault</h3><ul><li>作用：setdefault方法在某种程度上类似于get方法，能够获得与给定键相关联的值</li><li>除此之外，setdefault还能在字典中不含有给定键的情况下设定相应的键值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">8777</span>,<span class="string">&#x27;Jack&#x27;</span>:<span class="number">8888</span>,<span class="string">&#x27;Fly&#x27;</span>:<span class="number">6666</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">&#x27;Tom&#x27;</span>)                          <span class="comment">#the result ： 8777</span></span><br><span class="line"><span class="built_in">print</span>(d.setdefault(<span class="string">&#x27;Test&#x27;</span>))                     <span class="comment">#the result ： None</span></span><br><span class="line"><span class="built_in">print</span>(d)                                  <span class="comment">#&#123;&#x27;Fly&#x27;: 6666, &#x27;Jack&#x27;: 8888, &#x27;Tom&#x27;: 8777, &#x27;Test&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-8-update"><a href="#1-8-update" class="headerlink" title="1.8 update"></a>1.8 update</h3><ul><li><code>作用</code>：update方法可以利用一个字典项更新另一个字典，提供的字典中的项会被添加到旧的字典中，如有相同的键则会被覆盖</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">8777</span>,<span class="string">&#x27;Jack&#x27;</span>:<span class="number">8888</span>,<span class="string">&#x27;Fly&#x27;</span>:<span class="number">6666</span>&#125;</span><br><span class="line">a = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">110</span>,<span class="string">&#x27;Test&#x27;</span>:<span class="number">119</span>&#125;</span><br><span class="line">d.update(a)</span><br><span class="line"><span class="built_in">print</span>(d)                        <span class="comment">#the result ：&#123;&#x27;Fly&#x27;: 6666, &#x27;Test&#x27;: 119, &#x27;Jack&#x27;: 8888, &#x27;Tom&#x27;: 110&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-将两个列表组合成字典"><a href="#1-9-将两个列表组合成字典" class="headerlink" title="1.9 将两个列表组合成字典"></a>1.9 将两个列表组合成字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">values = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">#1、zip生成字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">zip</span>(keys,values)))                              <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line"><span class="comment">#2、for循环推倒字典</span></span><br><span class="line"><span class="built_in">print</span>(&#123;keys[i]: values[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keys))&#125;)              <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07.协程</title>
      <link href="//pages/7cc201/"/>
      <url>//pages/7cc201/</url>
      
        <content type="html"><![CDATA[<h2 id="01-协程"><a href="#01-协程" class="headerlink" title="01.协程"></a>01.协程</h2><p><a href="https://www.cnblogs.com/xiaonq/p/7905347.html#i4">https://www.cnblogs.com/xiaonq/p/7905347.html#i4</a></p><h3 id="1-1-什么是协程"><a href="#1-1-什么是协程" class="headerlink" title="1.1 什么是协程"></a>1.1 什么是协程</h3><ul><li>1）<code>协程微线程，纤程，本质是一个单线程</code></li><li>2）<code>协程能在单线程处理高并发，因为遇到IO自动切换</code><ul><li><code>线程遇到I/O操作会等待、阻塞</code>，<code>协程遇到I/O会自动切换</code>（剩下的只有CPU操作）</li><li>线程的状态<code>保存在CPU的寄存器和栈里而协程拥有自己的空间，所以无需上下文切换的开销，所以快</code></li></ul></li><li>3）<code>为甚么协程能够遇到I/O自动切换</code><ul><li>greenlet是C语言写的一个模块，遇到IO手动切换</li><li>协程有一个gevent模块(封装了greenlet模块)，遇到I&#x2F;O自动切换</li></ul></li><li>4）协程拥有自己的空间，所以无需上下文切换的开销</li></ul><h3 id="1-2-协程优缺点"><a href="#1-2-协程优缺点" class="headerlink" title="1.2 协程优缺点"></a>1.2 协程优缺点</h3><ul><li><p><code>协程缺点</code></p><ul><li>无法利用多核资源：<code>协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上</code>,协程需要和进程配合才能运行在多CPU上</li><li><code>协程如果阻塞掉，整个程序都阻塞</code></li></ul></li><li><p><code>协程最大的优点</code></p><ul><li>不仅是处理高并发（单线程下处理高并发）</li><li>特别节省资源（协程本质是一个单线程，当然节省资源）<ul><li>500日活，用php写需要两百多态机器，但是golang只需要二十多太机器</li></ul></li></ul></li></ul><h3 id="1-3-协程遇到I-x2F-O切换，那活只谁干的？"><a href="#1-3-协程遇到I-x2F-O切换，那活只谁干的？" class="headerlink" title="1.3 协程遇到I&#x2F;O切换，那活只谁干的？"></a>1.3 协程遇到I&#x2F;O切换，那活只谁干的？</h3><ul><li><p>简单说法</p><ul><li>协程遇到I&#x2F;O后自动切换，但是会保持一个socket连接，交给系统内核去处理工作</li><li>epoll()就工作内核中，他维护了一个链表，来存放所有的socket连接</li><li>当内核处理完成后就会回调一个函数，以socket文件描述符为key，结果为value存放到字典中</li><li>此时这个列表还是在内核中，需要将这个字典拷贝到用户空间（用户进程中）</li></ul></li><li><p>本质</p><ul><li>1.<code>epoll()中内核则维护一个链表</code>，epoll_wait直接检查链表是不是空就知道是否有文件描述符准备好了。</li><li>2.在内核实现中epoll是根据每个sockfd上面的与设备驱动程序建立起来的回调函数实现的。</li><li>3.某个sockfd上的事件发生时，与它对应的回调函数就会被调用，来把这个sockfd加入链表，其他处于“空闲的”状态的则不会。</li><li>4.epoll上面链表中获取文件描述，这里使用内存映射（mmap）技术，避免了复制大量文件描述符带来的开销</li><li>内存映射（mmap）：内存映射文件，是由一个文件到一块内存的映射，将不必再对文件执行I&#x2F;O操作</li></ul></li></ul><h3 id="1-4-Python中协程的模块"><a href="#1-4-Python中协程的模块" class="headerlink" title="1.4 Python中协程的模块"></a>1.4 Python中协程的模块</h3><ul><li>greenlet：遇到I&#x2F;O<code>手动切换</code>，是一个C模块</li><li>gevent：对greenlet封装，遇到I&#x2F;O<code>自动切换</code>（<code>借助C语言库greenlet</code>）</li><li>asyncio：和gevent一样，也是实现协程的一个模块（<code>python自己实现</code>）<ul><li><a href="https://www.cnblogs.com/xiaonq/p/12870204.html">https://www.cnblogs.com/xiaonq/p/12870204.html</a></li></ul></li></ul><h2 id="02-进程，线程，协程爬取页面"><a href="#02-进程，线程，协程爬取页面" class="headerlink" title="02.进程，线程，协程爬取页面"></a>02.进程，线程，协程爬取页面</h2><ul><li>特点：<ul><li><code>1.进程</code>：启用进程非常浪费资源</li><li><code>2.线程</code>：线程多，并且在阻塞过程中无法执行其他任务</li><li><code>3.协程</code>：gevent只用起一个线程，当请求发出去后gevent就不管,永远就只有一个线程工作，谁先回来先处理</li></ul></li></ul><h3 id="2-1-for循环"><a href="#2-1-for循环" class="headerlink" title="2.1 for循环"></a>2.1 for循环</h3><ul><li>第四：性能最差</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://dig.chouti.com/&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> <span class="attr">url_list</span>:</span><br><span class="line">    result = requests.<span class="title function_">get</span>(url)</span><br><span class="line">    <span class="title function_">print</span>(result.<span class="property">text</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-进程池"><a href="#2-2-进程池" class="headerlink" title="2.2 进程池"></a>2.2 进程池</h3><ul><li><code>缺点：</code>启用进程非常浪费资源</li></ul><h4 id="2-2-1-multiprocessing-Pool"><a href="#2-2-1-multiprocessing-Pool" class="headerlink" title="2.2.1 multiprocessing.Pool"></a>2.2.1 multiprocessing.Pool</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_request</span>(<span class="params">url</span>):</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--&gt;exec done:&#x27;</span>,<span class="string">&quot;测试进程池执行后回调功能&quot;</span>)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.google.com/&#x27;</span>,         <span class="comment">#google页面会卡住，知道页面超时后这个进程才结束</span></span><br><span class="line">    <span class="string">&#x27;http://dig.chouti.com/&#x27;</span>,          <span class="comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">10</span>)        <span class="comment"># 创建线程池</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        <span class="comment">#用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数</span></span><br><span class="line">        pool.apply_async(func=fetch_request, args=(url,),callback=call)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    pool.close()    <span class="comment">#关闭pool</span></span><br><span class="line">    pool.join()     <span class="comment">#进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-ProcessPoolExecutor"><a href="#2-2-2-ProcessPoolExecutor" class="headerlink" title="2.2.2 ProcessPoolExecutor"></a>2.2.2 ProcessPoolExecutor</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_request</span>(<span class="params">url</span>):</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.google.com/&#x27;</span>,         <span class="comment">#google页面会卡住，知道页面超时后这个进程才结束</span></span><br><span class="line">    <span class="string">&#x27;http://dig.chouti.com/&#x27;</span>,          <span class="comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">10</span>)        <span class="comment"># 创建线程池</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        pool.submit(fetch_request,url)    <span class="comment"># 去线程池中获取一个进程，进程去执行fetch_request方法</span></span><br><span class="line">    pool.shutdown(wait=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3-线程池"><a href="#2-3-线程池" class="headerlink" title="2.3 线程池"></a>2.3 线程池</h3><ul><li><code>缺点：</code> 创建一个新线程将消耗大量的计算资源，并且在阻塞过程中无法执行其他任务。</li><li><code>例：</code> 比如线程池中10个线程同时去10个url获取数据，当数据还没来时这些线程全部都在等待，不做事。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_request</span>(<span class="params">url</span>):</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.google.com/&#x27;</span>,         <span class="comment">#google页面会卡住，知道页面超时后这个进程才结束</span></span><br><span class="line">    <span class="string">&#x27;http://dig.chouti.com/&#x27;</span>,          <span class="comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(<span class="number">10</span>)            <span class="comment"># 创建一个线程池，最多开10个线程</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    pool.submit(fetch_request,url)       <span class="comment"># 去线程池中获取一个线程，线程去执行fetch_request方法</span></span><br><span class="line"></span><br><span class="line">pool.shutdown(<span class="literal">True</span>)                      <span class="comment"># 主线程自己关闭，让子线程自己拿任务执行</span></span><br></pre></td></tr></table></figure><h3 id="2-4-协程"><a href="#2-4-协程" class="headerlink" title="2.4 协程"></a>2.4 协程</h3><ul><li><code>特点 ：</code>gevent只用起一个线程，当请求发出去后gevent就不管,永远就只有一个线程工作，谁先回来先处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all(select=<span class="literal">False</span>)  <span class="comment"># 注意，这个导包顺序不要变</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这些请求谁先回来就先处理谁</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_async</span>(<span class="params">method, url, req_kwargs</span>):</span><br><span class="line">    response = requests.request(method=method, url=url, **req_kwargs)</span><br><span class="line">    <span class="built_in">print</span>(response.url, response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ##### 发送请求 #####</span></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(fetch_async, method=<span class="string">&#x27;get&#x27;</span>, url=<span class="string">&#x27;https://www.baidu.com/&#x27;</span>, req_kwargs=&#123;&#125;),</span><br><span class="line">    gevent.spawn(fetch_async, method=<span class="string">&#x27;get&#x27;</span>, url=<span class="string">&#x27;https://www.google.com/&#x27;</span>, req_kwargs=&#123;&#125;),</span><br><span class="line">    gevent.spawn(fetch_async, method=<span class="string">&#x27;get&#x27;</span>, url=<span class="string">&#x27;https://github.com/&#x27;</span>, req_kwargs=&#123;&#125;),</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04.集合</title>
      <link href="//pages/0316d2/"/>
      <url>//pages/0316d2/</url>
      
        <content type="html"><![CDATA[<h2 id="01-集合"><a href="#01-集合" class="headerlink" title="01.集合"></a>01.集合</h2><ul><li>集合作用<ul><li><p>去重</p></li><li><p>取两个列表的交集</p></li><li><p>取两个列表的并集</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment">#1、去重(去除list_1中重复元素1,2)</span></span><br><span class="line">list_1 = <span class="built_in">set</span>(list_1)                                <span class="comment">#去重： &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br><span class="line">list_2 = <span class="built_in">set</span>([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、交集（在list_1和list_2中都有的元素4,5）</span></span><br><span class="line"><span class="built_in">print</span>(list_1.intersection(list_2))                      <span class="comment">#交集： &#123;4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、并集（在list_1和list_2中的元素全部打印出来，重复元素仅打印一次）</span></span><br><span class="line"><span class="built_in">print</span>(list_1.union(list_2))                          <span class="comment">#并集： &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、差集</span></span><br><span class="line"><span class="built_in">print</span>(list_1.difference(list_2))                        <span class="comment">#差集：在list_1中有在list_2中没有：   &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(list_2.difference(list_1))                        <span class="comment">#差集：在list_1中有在list_2中没有：   &#123;8, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5、子集</span></span><br><span class="line"><span class="built_in">print</span>(list_1.issubset(list_2))                          <span class="comment">#子集：    False    List_1中的元素是否全部在list2中</span></span><br><span class="line"><span class="comment">#6、父集</span></span><br><span class="line"><span class="built_in">print</span>(list_1.issuperset(list_2))                        <span class="comment">#父集：    False    List_1中是否包含list_2中的所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7、交集</span></span><br><span class="line"><span class="built_in">print</span>(list_1 &amp; list_2)                                  <span class="comment">#交集    &#123;4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8、union并集</span></span><br><span class="line"><span class="built_in">print</span>(list_1 | list_2)                                  <span class="comment">#并集：  &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9、difference差集</span></span><br><span class="line"><span class="built_in">print</span>(list_1 - list_2)                                  <span class="comment">#差集：    &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#10、在集合中添加一个元素999</span></span><br><span class="line">list_1.add(<span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(list_1)                                       <span class="comment">#Add()方法：          &#123;1, 2, 3, 4, 5, 999&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11、删除集合中任意一个元素不会打印删除的值</span></span><br><span class="line">list_1.pop()                                        <span class="comment">#Pop()方法：            无返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#12、discard删除集合中的指定元素，如过没有则返回None</span></span><br><span class="line"><span class="built_in">print</span>(list_1.discard(<span class="string">&quot;ddd&quot;</span>))                            <span class="comment">#Discard()方法：   删除指定的值，没有返回None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08.select、poll、epoll</title>
      <link href="//pages/d776ab/"/>
      <url>//pages/d776ab/</url>
      
        <content type="html"><![CDATA[<h2 id="01-select、epoll、poll"><a href="#01-select、epoll、poll" class="headerlink" title="01.select、epoll、poll"></a>01.select、epoll、poll</h2><ul><li>select、poll、epoll是内核的服务<ul><li>windows下只有 select服务、poll</li><li>Linux下：select、poll、epoll</li></ul></li><li>怎么使用<ul><li>协程</li><li>tornado</li></ul></li></ul><p><a href="https://www.cnblogs.com/xiaonq/p/7907871.html">https://www.cnblogs.com/xiaonq/p/7907871.html</a></p><h3 id="1-1-I-x2F-O-多路复用"><a href="#1-1-I-x2F-O-多路复用" class="headerlink" title="1.1 I&#x2F;O 多路复用"></a>1.1 I&#x2F;O 多路复用</h3><ul><li><p>特点： 用户还是要等待数据从kernel拷贝到用户进程</p></li><li><p>IO multiplexing就是我们说的<code>select，poll，epoll</code>，有些地方也称这种IO方式为event driven IO</p></li><li><p>它的基本原理就是select，poll，epoll这个function会<code>不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程</code></p><ul><li>1）当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket</li><li>2）当任何一个socket中的数据准备好了，select就会返回</li><li>3）这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</li><li>4）虽然是多并发但是还有一些卡，因为都要等待数据从kernel拷贝到用户进程</li><li>5）其实select，poll，epoll实质就是循环着接收数据　　</li><li>6）select&#x2F;epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</li></ul></li></ul><h3 id="1-2-I-x2F-O的实质是什么？"><a href="#1-2-I-x2F-O的实质是什么？" class="headerlink" title="1.2 I&#x2F;O的实质是什么？"></a>1.2 I&#x2F;O的实质是什么？</h3><ul><li><p>I&#x2F;O的实质是什么？</p><ul><li>I&#x2F;O的实质是将硬盘中的数据，或收到的数据实现从内核态 copy到 用户态的过程</li><li>比如微信读取本地硬盘的过程<ul><li>微信进程会发送一个读取硬盘的请求—-》操作系统</li><li>只有内核才能够读取硬盘中的数据—》数据返回给微信程序（看上去就好像是微信直接读取）</li></ul></li></ul></li><li><p>用户态 &amp; 内核态</p><ul><li>系统空间分为两个部分，一部分是内核态，一部分是用户态的部分</li><li>内核态：内核态的空间资源只有操作系统能够访问</li><li>用户态：我们写的普通程序使用的空间</li></ul></li></ul><p><img src="/./assets/image-20210211160535533.png" alt="image-20210211160535533"></p><h3 id="1-3-select、poll、epoll特点"><a href="#1-3-select、poll、epoll特点" class="headerlink" title="1.3 select、poll、epoll特点"></a>1.3 select、poll、epoll特点</h3><ul><li><p>select</p><ul><li>只能处理1024个连接（每一个请求都可以理解为一个连接）</li><li>不能告诉用户程序，哪一个连接是活跃的</li></ul></li><li><p>pool</p><ul><li>只是取消了最大1024个活跃的限制</li><li>不能告诉用户程序，哪一个连接是活跃的</li></ul></li><li><p>epool</p><ul><li>不仅取消了1024这个最大连接限制</li><li>而且能告诉用户程序哪一个是活跃的</li></ul></li></ul><h3 id="1-4-epoll本质"><a href="#1-4-epoll本质" class="headerlink" title="1.4 epoll本质"></a>1.4 epoll本质</h3><ul><li><p>简单说法</p><ul><li>协程遇到I&#x2F;O后自动切换，但是会保持一个socket连接，交给系统内核去处理工作</li><li>epoll()就工作内核中，他维护了一个链表，来存放所有的socket连接</li><li>当内核处理完成后就会回调一个函数，以socket文件描述符为key，结果为value存放到字典中</li><li>此时这个列表还是在内核中，需要将这个字典拷贝到用户空间（用户进程中）</li></ul></li><li><p>本质</p><ul><li>1.<code>epoll()中内核则维护一个链表</code>，epoll_wait直接检查链表是不是空就知道是否有文件描述符准备好了。</li><li>2.在内核实现中epoll是根据每个sockfd上面的与设备驱动程序建立起来的回调函数实现的。</li><li>3.某个sockfd上的事件发生时，与它对应的回调函数就会被调用，来把这个sockfd加入链表，其他处于“空闲的”状态的则不会。</li><li>4.epoll上面链表中获取文件描述，这里使用内存映射（mmap）技术，避免了复制大量文件描述符带来的开销</li><li>内存映射（mmap）：内存映射文件，是由一个文件到一块内存的映射，将不必再对文件执行I&#x2F;O操作</li></ul></li></ul><img src="./assets/image-20210211160608539.png" alt="image-20210211160608539"  />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09.装饰器</title>
      <link href="//pages/0e4385/"/>
      <url>//pages/0e4385/</url>
      
        <content type="html"><![CDATA[<h2 id="01-装饰器"><a href="#01-装饰器" class="headerlink" title="01.装饰器"></a>01.装饰器</h2><h3 id="1-1-什么是装饰器-（What）"><a href="#1-1-什么是装饰器-（What）" class="headerlink" title="1.1 什么是装饰器?（What）"></a>1.1 什么是装饰器?（What）</h3><ul><li><code>装饰器本质是函数，用来给其他函数添加新的功能</code></li><li>特点：<code>不修改调用方式、不修改源代码</code></li></ul><h3 id="1-2-装饰器的应用场景？（Where）"><a href="#1-2-装饰器的应用场景？（Where）" class="headerlink" title="1.2 装饰器的应用场景？（Where）"></a>1.2 装饰器的应用场景？（Where）</h3><ul><li>用户认证，判断用户是否登录</li><li>计算函数运行时间（算是一个功能、在项目里用的不多）</li><li>插入日志的时候</li><li>redis缓存</li></ul><h3 id="1-3-为什么使用装饰器？（Why）"><a href="#1-3-为什么使用装饰器？（Why）" class="headerlink" title="1.3 为什么使用装饰器？（Why）"></a>1.3 为什么使用装饰器？（Why）</h3><ul><li>结合应用场景说需求</li></ul><h3 id="1-4-如何使用装饰器？（How）"><a href="#1-4-如何使用装饰器？（How）" class="headerlink" title="1.4 如何使用装饰器？（How）"></a>1.4 如何使用装饰器？（How）</h3><h4 id="1-4-1-装饰器求函数运行时间"><a href="#1-4-1-装饰器求函数运行时间" class="headerlink" title="1.4.1 装饰器求函数运行时间"></a>1.4.1 装饰器求函数运行时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):   <span class="comment">#timer(test1)  func=test1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func(*args,**kwargs)      <span class="comment">#run test1</span></span><br><span class="line">        stop_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;running time is %s&quot;</span>%(stop_time-start_time))</span><br><span class="line">    <span class="keyword">return</span> deco</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer     </span><span class="comment"># test1=timer(test1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in the test1&quot;</span>)</span><br><span class="line">test1()</span><br></pre></td></tr></table></figure><h4 id="1-4-2-三级装饰器"><a href="#1-4-2-三级装饰器" class="headerlink" title="1.4.2 三级装饰器"></a>1.4.2 三级装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">auth_type</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;auth func:&quot;</span>,auth_type)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">outer_wrapper</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;wrapper func args:&quot;</span>, *args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;运行前&#x27;</span>)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;运行后&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outer_wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(<span class="params">auth_type=<span class="string">&quot;local&quot;</span></span>) </span><span class="comment"># home = wrapper()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;welcome to home  page&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;from home&quot;</span></span><br><span class="line">home()</span><br></pre></td></tr></table></figure><h3 id="1-5-装饰器在项目中应用场景"><a href="#1-5-装饰器在项目中应用场景" class="headerlink" title="1.5 装饰器在项目中应用场景"></a>1.5 装饰器在项目中应用场景</h3><ul><li><code>身份验证</code></li><li>写入日志</li><li>redis缓存</li></ul><h4 id="1-5-1-身份验证"><a href="#1-5-1-身份验证" class="headerlink" title="1.5.1 身份验证"></a>1.5.1 身份验证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">user,passwd = <span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">username,password,*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> user == username <span class="keyword">and</span> password == passwd:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;User has passed authentication&quot;</span>)</span><br><span class="line">            res = func(username,password,*args,**kwargs)   <span class="comment">#这里执行func()相当于执行调用的函数如home()</span></span><br><span class="line">            <span class="keyword">return</span> res          <span class="comment">#为了获得home()函数返回值，可以将执行结果赋值给res然后返回print(home())结果是&quot;from home&quot;而不是&quot;None&quot;了</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;非合法用户&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">username,password</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;welcome to home page&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;from home&quot;</span></span><br><span class="line"></span><br><span class="line">home(<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-5-2-记录日志"><a href="#1-5-2-记录日志" class="headerlink" title="1.5.2 记录日志"></a>1.5.2 记录日志</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decoratore</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前运行方法&quot;</span>,func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(traceback.format_exc())  <span class="comment"># 这里应该调用log模块来记录到日志里</span></span><br><span class="line">    <span class="keyword">return</span> log</span><br><span class="line"></span><br><span class="line"><span class="meta">@decoratore</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 上面运行结果</span></span><br><span class="line"><span class="string">    当前运行方法 test</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">      File &quot;C:/Users/tom/Desktop/alipay_demo/aaa/t2.py&quot;, line 11, in log</span></span><br><span class="line"><span class="string">        return func(*args,**kwargs)</span></span><br><span class="line"><span class="string">      File &quot;C:/Users/tom/Desktop/alipay_demo/aaa/t2.py&quot;, line 18, in test</span></span><br><span class="line"><span class="string">        int(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">    ValueError: invalid literal for int() with base 10: &#x27;a&#x27;</span></span><br><span class="line"><span class="string">     22222</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-3-redis缓存"><a href="#1-5-3-redis缓存" class="headerlink" title="1.5.3 redis缓存"></a>1.5.3 redis缓存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一步：查询redis缓存是否存在这个key</span><br><span class="line">第二步：如果存在这个key，不用去mysql中查询，直接从redis中取出数据即可（减轻了mysql压力）</span><br><span class="line">第三步：如果查询的key不存在，先到mysql中查询数据，让后设置到redis中，下次查询就有了</span><br></pre></td></tr></table></figure><h5 id="1-5-3-1-2B青年实现"><a href="#1-5-3-1-2B青年实现" class="headerlink" title="1.5.3.1 2B青年实现"></a>1.5.3.1 2B青年实现</h5><ul><li>2B青年每一个需要使用缓存的数据，我都写一个方法获取数据，再写一个方法处理缓存。</li><li>若需要用到缓存的地方越来越多，每一个都需要这么写一套代码，代码冗余繁琐。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取readed缓存</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_readed_cache</span>():</span><br><span class="line">    <span class="comment"># 判断键是否存在</span></span><br><span class="line">    key = <span class="string">&#x27;readed&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> cache.has_key(key):</span><br><span class="line">        data = cache.get(key)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 不存在，则通过sql语句获取数据，并写入缓存,这里只是一个举例的sql语句</span></span><br><span class="line">        data = <span class="string">&quot;select name from tb&quot;</span></span><br><span class="line">        <span class="comment"># 写入缓存</span></span><br><span class="line">        cache.<span class="built_in">set</span>(key, data, <span class="number">3600</span> - <span class="built_in">int</span>(time.time() % <span class="number">3600</span>))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    data = get_readed_cache()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    data = get_readed_cache()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test1()</span><br><span class="line">    test2()</span><br></pre></td></tr></table></figure><h5 id="1-5-3-2-NB青年"><a href="#1-5-3-2-NB青年" class="headerlink" title="1.5.3.2 NB青年"></a>1.5.3.2 NB青年</h5><ul><li>NB青年可以使用三级装饰器，在装饰器中判断key如果存在就从reids中获取，如果不存在就从数据库查询，并设置到reids中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取redis缓存的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_cache</span>(<span class="params">key, timeout</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__redis_cache</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">warpper</span>(<span class="params">*args, **kw</span>):</span><br><span class="line">            <span class="keyword">if</span> cache.has_key(key):  <span class="comment"># 判断缓存是否存在</span></span><br><span class="line">                data = cache.get(key)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 若不存在则执行获取数据的方法</span></span><br><span class="line">                <span class="comment"># 注意返回数据的类型(字符串，数字，字典，列表均可)</span></span><br><span class="line">                data = func(*args, **kw)   <span class="comment"># 从数据库查询到数据设置到redis中</span></span><br><span class="line">                cache.<span class="built_in">set</span>(key, data, timeout)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">return</span> warpper</span><br><span class="line">    <span class="keyword">return</span> __redis_cache</span><br><span class="line"></span><br><span class="line"><span class="comment">#键值为test，超时时间为60秒</span></span><br><span class="line"><span class="meta">@redis_cache(<span class="params"><span class="string">&#x27;test&#x27;</span>, <span class="number">60</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_test_data</span>():</span><br><span class="line">    <span class="comment"># 获取Blog模型随机排序前3条数据</span></span><br><span class="line">    <span class="comment"># (Blog模型是我自己的模型，具体代码根据自己需求获取数据)</span></span><br><span class="line">    <span class="comment"># values执行结果，将返回一个字典。字典可以直接存入redis</span></span><br><span class="line">    <span class="comment"># data = Blog.objects.values(&#x27;id&#x27;, &#x27;caption&#x27;).order_by(&#x27;?&#x27;)[:3]</span></span><br><span class="line">    data = <span class="string">&#x27;从数据库查询到了数据&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_test_data()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.线程</title>
      <link href="//pages/70eebd/"/>
      <url>//pages/70eebd/</url>
      
        <content type="html"><![CDATA[<h2 id="01-线程"><a href="#01-线程" class="headerlink" title="01.线程"></a>01.线程</h2><h3 id="1-1-什么是线程"><a href="#1-1-什么是线程" class="headerlink" title="1.1 什么是线程"></a>1.1 什么是线程</h3><ul><li>1）线程是操作系统调度的最小单位</li><li>2）线程是进程正真的执行者，是一些指令的集合（进程资源的拥有者）</li><li>3）同一个进程下的多个<code>线程共享内存空间</code>，数据直接访问（数据共享）</li><li>4）为了保证数据安全，必须使用<code>线程锁</code></li></ul><p><code>说明：</code>下面利用for循环同时启动50个线程并行执行，执行时间是3秒而不是所有线程执行时间的总和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sayhi</span>(<span class="params">num</span>): <span class="comment">#定义每个线程要运行的函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;running on number:%s&quot;</span> %num)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    t = threading.Thread(target=sayhi,args=(<span class="string">&#x27;t-%s&#x27;</span>%i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="1-2-GIL锁和线程锁"><a href="#1-2-GIL锁和线程锁" class="headerlink" title="1.2 GIL锁和线程锁"></a>1.2 GIL锁和线程锁</h3><ul><li>GIL全局解释器锁<ul><li>在python全局解释器下，保证同一时间只有一个线程运行</li><li>防止多个线程都修改数据</li></ul></li><li>线程锁（互斥锁）<ul><li>GIL锁只能保证同一时间只能有一个线程对某个资源操作，但当上一个线程还未执行完毕时可能就会释放GIL，其他线程就可以操作了</li><li>线程锁本质把线程中的数据加了一把互斥锁<ul><li>加上线程锁之后所有其他线程，读都不能读这个数据</li></ul></li><li>有了GIL全局解释器锁为什么还需要线程锁<ul><li>因为cpu是分时使用的</li></ul></li></ul></li><li><code>在有GIL的情况下执行 count = count + 1 会出错原因解析，用线程锁解决方法</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1）第一步：count = 0   count初始值为0</span></span><br><span class="line"><span class="comment"># 2）第二步：线程1要执行对count加1的操作首先申请GIL全局解释器锁</span></span><br><span class="line"><span class="comment"># 3）第三步：调用操作系统原生线程在操作系统中执行</span></span><br><span class="line"><span class="comment"># 4）第四步：count加1还未执行完毕，时间到了被要求释放GIL</span></span><br><span class="line"><span class="comment"># 5）第五步：线程1释放了GIL后线程2此时也要对count进行操作，此时线程1还未执行完，所以count还是0</span></span><br><span class="line"><span class="comment"># 6）第六步：线程2此时拿到count = 0后也要对count进行加1操作，假如线程2执行很快，一次就完成了</span></span><br><span class="line"><span class="comment">#    count加1的操作，那么count此时就从0变成了1</span></span><br><span class="line"><span class="comment"># 7）第七步：线程2执行完加1后就赋值count=1并释放GIL</span></span><br><span class="line"><span class="comment"># 8）第八步：线程2执行完后cpu又交给了线程1，线程1根据上下文继续执行count加1操作，先拿到GIL</span></span><br><span class="line"><span class="comment">#    锁，完成加1操作，由于线程1先拿到的数据count=0，执行完加1后结果还是1</span></span><br><span class="line"><span class="comment"># 9）第九步：线程1将count=1在次赋值给count并释放GIL锁，此时连个线程都对数据加1，但是值最终是1</span></span><br></pre></td></tr></table></figure><ul><li><code>死锁定义</code><ul><li>两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去</li></ul></li></ul><h3 id="1-3-多线程或者线程池"><a href="#1-3-多线程或者线程池" class="headerlink" title="1.3 多线程或者线程池"></a>1.3 多线程或者线程池</h3><ul><li>线程有哪些模块？</li><li>线程池有哪些模块？</li></ul><h3 id="1-4-join-和setDaemon"><a href="#1-4-join-和setDaemon" class="headerlink" title="1.4 join()和setDaemon()"></a>1.4 join()和setDaemon()</h3><h4 id="2-4-1-join"><a href="#2-4-1-join" class="headerlink" title="2.4.1 join()"></a>2.4.1 join()</h4><ul><li><code>实现所有线程都执行结束后再执行主线程</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.<span class="title function_">time</span>()</span><br><span class="line"></span><br><span class="line">def <span class="title function_">sayhi</span>(num): #定义每个线程要运行的函数</span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;running on number:%s&quot;</span> %num)</span><br><span class="line">    time.<span class="title function_">sleep</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">50</span>):</span><br><span class="line">    t = threading.<span class="title class_">Thread</span>(target=sayhi,args=(<span class="string">&#x27;t-%s&#x27;</span>%i,))</span><br><span class="line">    t.<span class="title function_">setDaemon</span>(<span class="title class_">True</span>)  #把当前线程变成守护线程，必须在t.<span class="title function_">start</span>()前设置</span><br><span class="line">    t.<span class="title function_">start</span>()          #启动一个线程，程序不会阻塞</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;cost time:&#x27;</span>,time.<span class="title function_">time</span>() - start_time)</span><br></pre></td></tr></table></figure><h4 id="2-4-2-setDaemon"><a href="#2-4-2-setDaemon" class="headerlink" title="2.4.2 setDaemon()"></a>2.4.2 setDaemon()</h4><ul><li><code>守护线程，主线程退出时，需要子线程随主线程退出</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.<span class="title function_">time</span>()</span><br><span class="line"></span><br><span class="line">def <span class="title function_">sayhi</span>(num): #定义每个线程要运行的函数</span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;running on number:%s&quot;</span> %num)</span><br><span class="line">    time.<span class="title function_">sleep</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">50</span>):</span><br><span class="line">    t = threading.<span class="title class_">Thread</span>(target=sayhi,args=(<span class="string">&#x27;t-%s&#x27;</span>%i,))</span><br><span class="line">    t.<span class="title function_">setDaemon</span>(<span class="title class_">True</span>)  #把当前线程变成守护线程，必须在t.<span class="title function_">start</span>()前设置</span><br><span class="line">    t.<span class="title function_">start</span>()          #启动一个线程，程序不会阻塞</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;cost time:&#x27;</span>,time.<span class="title function_">time</span>() - start_time)</span><br></pre></td></tr></table></figure><h3 id="1-5-Python中使用过的线程模块？"><a href="#1-5-Python中使用过的线程模块？" class="headerlink" title="1.5 Python中使用过的线程模块？"></a>1.5 Python中使用过的线程模块？</h3><h4 id="1-5-1-threading"><a href="#1-5-1-threading" class="headerlink" title="1.5.1 threading"></a>1.5.1 threading</h4><ul><li>Python提供了几个用于多线程编程的模块，包括thread、threading和Queue等。</li><li>thread和threading模块允许程序员创建和管理线程。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sayhi</span>(<span class="params">num</span>): <span class="comment">#定义每个线程要运行的函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;running on number:%s&quot;</span> %num)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    t = threading.Thread(target=sayhi,args=(<span class="string">&#x27;t-%s&#x27;</span>%i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h4 id="1-5-2-concurrent-futures"><a href="#1-5-2-concurrent-futures" class="headerlink" title="1.5.2 concurrent.futures"></a>1.5.2 concurrent.futures</h4><ul><li><p><code>1、简介</code> <a href="https://docs.python.org/3/library/concurrent.futures.html">参考官网</a></p><ul><li>1、Python标准库为我们提供了threading和multiprocessing模块编写相应的多线程&#x2F;多进程代码</li><li>2、但是当项目达到一定的规模，频繁创建&#x2F;销毁进程或者线程是非常消耗资源的，这个时候我们就要编写自己的线程池&#x2F;进程池，以空间换时间。</li><li>3、但从Python3.2开始，标准库为我们提供了concurrent.futures模块，它提供了ThreadPoolExecutor和ProcessPoolExecutor两个类，</li><li>4、实现了对threading和multiprocessing的进一步抽象，对编写线程池&#x2F;进程池提供了直接的支持。</li></ul></li><li><p><code>2、Executor和Future</code></p><ul><li><p><code>1. Executor</code></p><ul><li><p>concurrent.futures模块的基础是Exectuor，Executor是一个抽象类，它不能被直接使用。</p></li><li><p>但是它提供的两个子类ThreadPoolExecutor和ProcessPoolExecutor却是非常有用</p></li><li><p>我们可以将相应的tasks直接放入线程池&#x2F;进程池，不需要维护Queue来操心死锁的问题，线程池&#x2F;进程池会自动帮我们调度。</p></li></ul></li><li><p><code>2. Future</code></p><ul><li>Future你可以把它理解为一个在未来完成的操作，这是异步编程的基础，</li><li>传统编程模式下比如我们操作queue.get的时候，在等待返回结果之前会产生阻塞，cpu不能让出来做其他事情</li><li>而Future的引入帮助我们在等待的这段时间可以完成其他的操作。</li></ul></li></ul></li><li><p>concurrent.futures.ThreadPoolExecutor 抓取网页</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_request</span>(<span class="params">url</span>):</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.google.com/&#x27;</span>,         <span class="comment">#google页面会卡住，知道页面超时后这个进程才结束</span></span><br><span class="line">    <span class="string">&#x27;http://dig.chouti.com/&#x27;</span>,          <span class="comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(<span class="number">10</span>)            <span class="comment"># 创建一个线程池，最多开10个线程</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    pool.submit(fetch_request,url)       <span class="comment"># 去线程池中获取一个线程，线程去执行fetch_request方法</span></span><br><span class="line"></span><br><span class="line">pool.shutdown(<span class="literal">True</span>)                      <span class="comment"># 主线程自己关闭，让子线程自己拿任务执行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10.生成器和迭代器</title>
      <link href="//pages/0a2618/"/>
      <url>//pages/0a2618/</url>
      
        <content type="html"><![CDATA[<h2 id="01-生成器"><a href="#01-生成器" class="headerlink" title="01.生成器"></a>01.生成器</h2><h3 id="1-1-什么是生成器-What"><a href="#1-1-什么是生成器-What" class="headerlink" title="1.1 什么是生成器?(What)"></a>1.1 什么是生成器?(What)</h3><ul><li>生成器就是一个特殊的迭代器</li><li>一个有yield关键字的函数就是一个生成器<ul><li>生成器是这样一个函数，它记住上一次返回时在函数体中的位置。</li><li>对生成器函数的第二次（或第 n 次）调用跳转至该函数中间，而上次调用的所有局部变量都保持不变。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r1 = <span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line">r1.<span class="title function_">__next__</span>()</span><br><span class="line">r1.<span class="title function_">__next__</span>()</span><br></pre></td></tr></table></figure><h3 id="1-2-生成器哪些场景应用？（Where）"><a href="#1-2-生成器哪些场景应用？（Where）" class="headerlink" title="1.2 生成器哪些场景应用？（Where）"></a>1.2 生成器哪些场景应用？（Where）</h3><ul><li><p>生成器是一个概念，我们平常写代码可能用的并不多，但是python源码大量使用</p></li><li><p>比如我们tornado框架就是基于 生成器+协程</p></li><li><p>在我们代码中使用举例</p></li><li><p>比如我们要生成一百万个数据，如果用生成器非常节省空间，用列表浪费大量空间</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t1 = time.time()</span><br><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>))</span><br><span class="line">t2 = time.time()</span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>)]</span><br><span class="line">t3 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;生成器时间：&#x27;</span>,t2 - t1)  <span class="comment"># 生成器时间： 0.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列表时间：&#x27;</span>,t3 - t2)    <span class="comment"># 列表时间： 5.821957349777222</span></span><br></pre></td></tr></table></figure><h3 id="1-3-为什么使用生成器"><a href="#1-3-为什么使用生成器" class="headerlink" title="1.3 为什么使用生成器"></a>1.3 为什么使用生成器</h3><ul><li>节省空间</li><li>高效</li></ul><h2 id="02-迭代器"><a href="#02-迭代器" class="headerlink" title="02.迭代器"></a>02.迭代器</h2><h3 id="2-1-什么是迭代器-W"><a href="#2-1-什么是迭代器-W" class="headerlink" title="2.1 什么是迭代器(W)"></a>2.1 什么是迭代器(W)</h3><ul><li>迭代器是访问集合内元素的一种方法<ul><li>总是从集合内第一个元素访问，直到所有元素都被访问过结束，当调用 __next__而元素返回会引发一个，StopIteration异常</li></ul></li><li>有两个方法：_<em>iter</em>_ _<em>next</em>_<ul><li>_<em>iter</em>_ : 返回迭代器自身</li><li>_<em>next</em>_: 返回下一个元素</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>11.面向对象</title>
      <link href="//pages/34f94e/"/>
      <url>//pages/34f94e/</url>
      
        <content type="html"><![CDATA[<h2 id="01-面向对象"><a href="#01-面向对象" class="headerlink" title="01.面向对象"></a>01.面向对象</h2><p><a href="https://www.cnblogs.com/xiaonq/p/7880547.html#i7">https://www.cnblogs.com/xiaonq/p/7880547.html#i7</a></p><h3 id="1-1-什么是面向对象？（What）"><a href="#1-1-什么是面向对象？（What）" class="headerlink" title="1.1 什么是面向对象？（What）"></a>1.1 什么是面向对象？（What）</h3><ul><li>使用模板的思想，将世界完事万物使用对象来表示一个类型</li></ul><h3 id="1-2-封装、继承、多态？特性"><a href="#1-2-封装、继承、多态？特性" class="headerlink" title="1.2 封装、继承、多态？特性"></a>1.2 封装、继承、多态？特性</h3><ul><li>封装<ul><li>对类中属性和方法进行一种封装，隐藏了实现细节</li></ul></li><li>继承<ul><li>子类继承父类后，就具有了父类的所有属性和方法，先继承，后重写</li><li>新式类深度优先、经典类广度优先</li></ul></li><li>多态<ul><li>一种接口，多种表现形式</li><li>中国人、和美国人都能讲话，调用中国人的类讲中文，调用美国人将英文</li></ul></li></ul><h3 id="1-3-新式类-amp-经典类"><a href="#1-3-新式类-amp-经典类" class="headerlink" title="1.3 新式类&amp;经典类"></a>1.3 新式类&amp;经典类</h3><ul><li>pythn3无论新式类还是经典类都是用 广度优先</li><li>python2中，新式类：广度优先，经典类：深度优先</li></ul><p><img src="./assets/image-20200310084245988.png" style="width: 600px; margin-left: 50px;"> </img></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">D</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># def talk(self):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;B&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">D</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(B,C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># def talk(self):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;A&#x27;)</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.talk()</span><br></pre></td></tr></table></figure><h3 id="1-4-静态方法、类方法、属性方法"><a href="#1-4-静态方法、类方法、属性方法" class="headerlink" title="1.4 静态方法、类方法、属性方法"></a>1.4 静态方法、类方法、属性方法</h3><ul><li>静态方法<ul><li>特点：名义上归类管理，实际上不能访问类或者变量中的任意属性或者方法</li><li>作用：让我们代码清晰，更好管理</li><li><strong>调用方式:</strong> 既可以被类直接调用，也可以通过实例调用</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am a static method&quot;</span>)</span><br><span class="line">        </span><br><span class="line">d = Dog(<span class="string">&quot;ChenRonghua&quot;</span>)</span><br><span class="line">d.eat()                       <span class="comment"># 方法1：使用实例调用</span></span><br><span class="line">Dog.eat()                     <span class="comment"># 方法2：使用类直接调用</span></span><br></pre></td></tr></table></figure><ul><li>类方法<ul><li>作用**：无需实例化直接被类调用  </li><li>特性:** 类方法只能访问类变量，不能访问实例变量</li><li>类方法使用场景：** 当我们还未创建实例，但是需要调用类中的方法</li><li>调用方式:** 既可以被类直接调用，也可以通过实例调用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(object):</span><br><span class="line">    name = <span class="string">&#x27;类变量&#x27;</span>                  #在这里如果不定义类变量仅定义实例变量依然报错</span><br><span class="line">    def <span class="title function_">__init__</span>(self,name):</span><br><span class="line">        self.<span class="property">name</span> = <span class="string">&#x27;实例变量&#x27;</span></span><br><span class="line">        self.<span class="property">name</span> = name</span><br><span class="line">    @classmethod</span><br><span class="line">    def <span class="title function_">eat</span>(self,food):</span><br><span class="line">        <span class="title function_">print</span>(<span class="string">&quot;%s is eating %s&quot;</span>%(self.<span class="property">name</span>,food))</span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">eat</span>(<span class="string">&#x27;baozi&#x27;</span>)                   #方法<span class="number">1</span>：使用类直接调用</span><br><span class="line">d = <span class="title class_">Dog</span>(<span class="string">&quot;ChenRonghua&quot;</span>)          </span><br><span class="line">d.<span class="title function_">eat</span>(<span class="string">&quot;包子&quot;</span>)                     #方法<span class="number">2</span>：使用实例d调用</span><br></pre></td></tr></table></figure><ul><li>属性方法<ul><li>属性方法把一个方法变成一个属性，隐藏了实现细节,调用时不必加括号直接d.eat即可调用self.eat()方法</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(object):</span><br><span class="line">    def <span class="title function_">__init__</span>(self, name):</span><br><span class="line">        self.<span class="property">name</span> = name</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def <span class="title function_">eat</span>(self):</span><br><span class="line">        <span class="title function_">print</span>(<span class="string">&quot; %s is eating&quot;</span> % self.<span class="property">name</span>)</span><br><span class="line">d = <span class="title class_">Dog</span>(<span class="string">&quot;ChenRonghua&quot;</span>)</span><br><span class="line">d.<span class="title function_">eat</span>()</span><br><span class="line"># 调用会出以下错误， 说<span class="title class_">NoneType</span> is not callable, 因为eat此时已经变成一个静态属性了， </span><br><span class="line"># 不是方法了， 想调用已经不需要加()号了，直接d.<span class="property">eat</span>就可以了</span><br></pre></td></tr></table></figure><h3 id="1-5-魔法方法"><a href="#1-5-魔法方法" class="headerlink" title="1.5 魔法方法"></a>1.5 魔法方法</h3><ul><li>_<em>new</em>_<ul><li>产生一个实例</li></ul></li><li>_<em>init</em>_<ul><li>产生一个对象</li></ul></li><li>_<em>del</em>_<ul><li>析构方法，删除无用的内存对象（当程序结束会自动自行析构方法）</li></ul></li><li><img src="./assets/image-20200310095320872.png" style="width: 600px; margin-left: 20px;"> </img></li></ul><h3 id="1-6-反射"><a href="#1-6-反射" class="headerlink" title="1.6 反射"></a>1.6 反射</h3><ul><li>hasattr: 判断当前类是否有这个方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self,food</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eat method!!!&quot;</span>)</span><br><span class="line">d = Dog()</span><br><span class="line"></span><br><span class="line"><span class="comment">#hasattr判断对象d是否有eat方法，有返回True，没有返回False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(d,<span class="string">&#x27;eat&#x27;</span>))     <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(d,<span class="string">&#x27;cat&#x27;</span>))     <span class="comment">#False</span></span><br></pre></td></tr></table></figure><ul><li>getattr: 通过字符串反射出这个方法的内存地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eat method!!!&quot;</span>)</span><br><span class="line">d = Dog()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(d,<span class="string">&#x27;eat&#x27;</span>):          <span class="comment"># hasattr判断实例是否有eat方法</span></span><br><span class="line">    func = <span class="built_in">getattr</span>(d, <span class="string">&#x27;eat&#x27;</span>)  <span class="comment"># getattr获取实例d的eat方法内存地址</span></span><br><span class="line">    func()                    <span class="comment"># 执行实例d的eat方法</span></span><br><span class="line"><span class="comment">#运行结果：  eat method!!!</span></span><br></pre></td></tr></table></figure><ul><li>setattr：将当前类添加一个方法</li><li>delatrr: 删除实例属性</li></ul><h3 id="1-7-单例模式"><a href="#1-7-单例模式" class="headerlink" title="1.7 单例模式"></a>1.7 单例模式</h3><ul><li>单例模式：永远用一个对象得实例，避免新建太多实例浪费资源</li><li>实质：使用__new__方法新建类对象时先判断是否已经建立过，如果建过就使用已有的对象</li><li>使用场景：如果每个对象内部封装的值都相同就可以用单例模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   instance = <span class="literal">None</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      self.name = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">      <span class="keyword">if</span> Foo.instance:</span><br><span class="line">         <span class="keyword">return</span> Foo.instance</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         Foo.instance = <span class="built_in">object</span>.__new__(cls,*args,**kwargs)</span><br><span class="line">         <span class="keyword">return</span> Foo.instance</span><br><span class="line"></span><br><span class="line">obj1 = Foo()       <span class="comment"># obj1和obj2获取的就是__new__方法返回的内容</span></span><br><span class="line">obj2 = Foo()</span><br><span class="line"><span class="built_in">print</span>(obj1,obj2)   <span class="comment"># 运行结果： &lt;__main__.Foo object at 0x00D3B450&gt;    &lt;__main__.Foo object at 0x00D3B450&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果说明：</span></span><br><span class="line"><span class="comment"># 这可以看到我们新建的两个Foo()对象内存地址相同，说明使用的•同一个类，没有重复建立类</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.进程</title>
      <link href="//pages/f8baa8/"/>
      <url>//pages/f8baa8/</url>
      
        <content type="html"><![CDATA[<h2 id="01-进程"><a href="#01-进程" class="headerlink" title="01.进程"></a>01.进程</h2><h3 id="1-1-什么是进程？"><a href="#1-1-什么是进程？" class="headerlink" title="1.1 什么是进程？"></a>1.1 什么是进程？</h3><ul><li><code>1.进程是资源分配的最小单位（ 内存、cpu、网络、io）</code></li><li><code>2.一个运行起来的程序就是一个进程</code><ul><li>什么是程序（<code>程序是我们存储在硬盘里的代码</code>）<ul><li>硬盘（256G）、内存条（8G）</li><li>当我们双击图标，打开程序的时候，实际上就是通过I&#x2F;O操作（读写），硬盘中的代码读取到内存条里</li></ul></li><li>内存条就是我们所指的资源（程序分配了内存资源，就变成了进程）</li><li>CPU分时<ul><li>CPU比你的手速快多了，分时处理每个线程，但是由于太快然你觉得每个线程都是独占cpu</li><li>cpu是计算，只有时间片到了，获取cpu，线程真正执行</li><li>当你想使用 网络、磁盘等资源的时候，需要cpu的调度</li></ul></li></ul></li><li><code>3.进程具有独立的内存空间，所以没有办法相互通信</code></li></ul><h3 id="1-2-进程如何通信"><a href="#1-2-进程如何通信" class="headerlink" title="1.2 进程如何通信?"></a>1.2 进程如何通信?</h3><ul><li>同一程序下进程通信<ul><li>进程queue(父子进程通信)</li><li>pipe（同一程序下两个进程通信）</li><li>managers（同一程序下多个进程通信）</li></ul></li><li>Java项目和python项目如何通信<ul><li>RabbitMQ、redis等（不同程序间通信）</li></ul></li></ul><h3 id="1-3-为什么需要进程池？"><a href="#1-3-为什么需要进程池？" class="headerlink" title="1.3 为什么需要进程池？"></a>1.3 为什么需要进程池？</h3><ul><li>一次性开启指定数量的进程</li><li>如果有十个进程，有一百个任务，一次可以处理多少个（一次性只能处理十个）</li><li>防止进程开启数量过多导致服务器压力过大</li><li>进程池中有两个方法：<ul><li><code>1）apply</code>： 多个进程异步执行，一个一个的执行</li><li><code>2）apply_async</code>： 多个进程同步执行，同时执行多个进程</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  multiprocessing <span class="keyword">import</span> Process,Pool</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">i</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in the process&quot;</span>,os.getpid()) <span class="comment">#打印子进程的pid</span></span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--&gt;exec done:&#x27;</span>,arg,os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">3</span>)                      <span class="comment">#进程池最多允许5个进程放入进程池</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主进程pid：&quot;</span>,os.getpid())     <span class="comment">#打印父进程的pid</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment">#用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数</span></span><br><span class="line">        pool.apply_async(func=foo, args=(i,),callback=call)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#用法2 串行 启动进程不在用Process而是直接用pool.apply()</span></span><br><span class="line">        <span class="comment"># pool.apply(func=foo, args=(i,))</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    pool.close()    <span class="comment">#关闭pool</span></span><br><span class="line">    pool.join()     <span class="comment">#进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></span><br></pre></td></tr></table></figure><h3 id="1-4-僵尸进程"><a href="#1-4-僵尸进程" class="headerlink" title="1.4 僵尸进程"></a>1.4 僵尸进程</h3><ul><li><p><code>1）僵尸进程定义</code></p><ul><li><ol><li>僵尸进程产生的原因就是父进程产生子进程后，子进程先于父进程退出</li></ol></li><li><ol start="2"><li>但是父进程由于种种原因，并没有处理子进程发送的退出信号，那么这个子进程就会成为僵尸进程。</li></ol></li></ul></li><li><p><code>2）用python写一个僵尸进程</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os, sys, time</span><br><span class="line"><span class="comment">#产生子进程</span></span><br><span class="line">pid = os.fork()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    <span class="comment">#子进程退出</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#父进程休息30秒</span></span><br><span class="line">time.sleep(<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 先产生一个子进程，子进程退出，父进程休息30秒,那就会产生一个僵尸进程</span></span><br></pre></td></tr></table></figure><ul><li><p><code>ps -ef| grep defunct</code> 在linux下查看僵尸进程</p><ul><li>&#96;&#96;&#96;python<br>[root@linux-node4 ~]# ps -ef| grep defunct<br>root     110401  96083  0 19:11 pts&#x2F;2    00:00:00 python defunct.py<br>root     110402 110401  0 19:11 pts&#x2F;2    00:00:00 [python] <defunct><br>root     110406  96105  0 19:11 pts&#x2F;3    00:00:00 grep –color&#x3D;auto defunct<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 1.5 Python中使用过的进程模块？</span><br><span class="line"></span><br><span class="line">#### 1.5.1 multiprocessing</span><br><span class="line"></span><br><span class="line">- `multiprocessing`是一个使用类似于线程模块的API支持产生进程的包。 </span><br><span class="line">- 多处理包提供本地和远程并发，通过使用子进程而不是线程有效地侧向执行全局解释器锁。 </span><br><span class="line">- 因此，多处理模块允许程序员充分利用给定机器上的多个处理器。 它可以在Unix和Windows上运行。</span><br><span class="line">- ``进程池抓取页面``</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">def fetch_request(url):</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    print(result.text)</span><br><span class="line"></span><br><span class="line">def call(arg):</span><br><span class="line">    print(&#x27;--&gt;exec done:&#x27;,&quot;测试进程池执行后回调功能&quot;)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    &#x27;https://www.baidu.com&#x27;,</span><br><span class="line">    &#x27;https://www.google.com/&#x27;,         #google页面会卡住，知道页面超时后这个进程才结束</span><br><span class="line">    &#x27;http://dig.chouti.com/&#x27;,          #chouti页面内容会直接返回，不会等待Google页面的返回</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    pool = Pool(10)        # 创建线程池</span><br><span class="line">    for url in url_list:</span><br><span class="line">        #用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数</span><br><span class="line">        pool.apply_async(func=fetch_request, args=(url,),callback=call)</span><br><span class="line">    print(&#x27;end&#x27;)</span><br><span class="line">    pool.close()    #关闭pool</span><br><span class="line">    pool.join()     #进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-5-2-concurrent-futures"><a href="#1-5-2-concurrent-futures" class="headerlink" title="1.5.2 concurrent.futures"></a>1.5.2 concurrent.futures</h4><ul><li><p><code>1、简介</code> <a href="https://docs.python.org/3/library/concurrent.futures.html">参考官网</a></p><ul><li>1、Python标准库为我们提供了threading和multiprocessing模块编写相应的多线程&#x2F;多进程代码</li><li>2、但是当项目达到一定的规模，频繁创建&#x2F;销毁进程或者线程是非常消耗资源的，这个时候我们就要编写自己的线程池&#x2F;进程池，以空间换时间。</li><li>3、但从Python3.2开始，标准库为我们提供了concurrent.futures模块，它提供了ThreadPoolExecutor和ProcessPoolExecutor两个类，</li><li>4、实现了对threading和multiprocessing的进一步抽象，对编写线程池&#x2F;进程池提供了直接的支持。</li></ul></li><li><p><code>2、Executor和Future</code></p><ul><li><code>1. Executor</code><br> -  concurrent.futures模块的基础是Exectuor，Executor是一个抽象类，它不能被直接使用。</li></ul><pre><code> -  但是它提供的两个子类ThreadPoolExecutor和ProcessPoolExecutor却是非常有用  -  我们可以将相应的tasks直接放入线程池/进程池，不需要维护Queue来操心死锁的问题，线程池/进程池会自动帮我们调度。 </code></pre><ul><li><code>2. Future</code><br> -  Future你可以把它理解为一个在未来完成的操作，这是异步编程的基础，</li></ul><pre><code> -  传统编程模式下比如我们操作queue.get的时候，在等待返回结果之前会产生阻塞，cpu不能让出来做其他事情 - 而Future的引入帮助我们在等待的这段时间可以完成其他的操作。</code></pre></li><li><p>3、concurrent.futures.ProcessPoolExecutor 抓取网页</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_request</span>(<span class="params">url</span>):</span><br><span class="line">    result = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.google.com/&#x27;</span>,         <span class="comment">#google页面会卡住，知道页面超时后这个进程才结束</span></span><br><span class="line">    <span class="string">&#x27;http://dig.chouti.com/&#x27;</span>,          <span class="comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">10</span>)        <span class="comment"># 创建线程池</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        pool.submit(fetch_request,url)    <span class="comment"># 去线程池中获取一个进程，进程去执行fetch_request方法</span></span><br><span class="line">    pool.shutdown(wait = <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># shutdown相当于一个开关，它会读取程序中所设定的进程总数，直至每开启一个进程，它读取设定的总数就会减一，直至为0时便会打印主线程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12.深浅拷贝</title>
      <link href="//pages/d35123/"/>
      <url>//pages/d35123/</url>
      
        <content type="html"><![CDATA[<h2 id="01-深浅拷贝"><a href="#01-深浅拷贝" class="headerlink" title="01.深浅拷贝"></a>01.深浅拷贝</h2><ul><li><p><strong>浅copy与deepcopy</strong>（What）</p><ul><li><strong>浅copy：</strong> 不管多么复杂的数据结构，浅拷贝都只会copy一层</li><li><strong>deepcopy</strong> : 深拷贝会完全复制原变量相关的所有数据，在内存中生成一套完全一样的内容，我们对这两个变量中任意一个修改都不会影响其他变量</li></ul></li><li><p>&#96;&#96;&#96;python<br>import copy<br>sourceList &#x3D; [1,2,3,[4,5,6]]<br>copyList &#x3D; copy.copy(sourceList)<br>deepcopyList &#x3D; copy.deepcopy(sourceList)</p><p>sourceList[3][0]&#x3D;100</p><p>print(sourceList)           # [1, 2, 3, [100, 5, 6]]<br>print(copyList)             # [1, 2, 3, [100, 5, 6]]<br>print(deepcopyList)         # [1, 2, 3, [4, 5, 6]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20200311090206377.png](./assets/image-20200311090206377.png)</span><br><span class="line"></span><br><span class="line">- 案例</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import copy</span><br><span class="line">a = [1,2,3,4,[&#x27;a&#x27;,&#x27;b&#x27;]]</span><br><span class="line">b = a</span><br><span class="line">c = copy.copy(a)</span><br><span class="line">d = copy.deepcopy(a)</span><br><span class="line">a.append(5)</span><br><span class="line">a[4].append(&#x27;c&#x27;)</span><br><span class="line">print(a)     # [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5]</span><br><span class="line">print(b)     # [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5]</span><br><span class="line">print(c)     # [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]]</span><br><span class="line">print(d)     # [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;]]</span><br></pre></td></tr></table></figure></li></ul><h2 id="02-变量及其存储"><a href="#02-变量及其存储" class="headerlink" title="02.变量及其存储"></a>02.变量及其存储</h2><ul><li><ol><li>python的一切变量都是对象，变量的存储，采用了引用语义的方式，存储的只是一个变量的值所在的内存地址，而不是这个变量的只本身</li></ol></li><li><ol start="2"><li>不管多么复杂的数据结构，浅拷贝都只会copy一层。</li></ol></li><li><p><strong>理解</strong>：两个人公用一张桌子，只要桌子不变，桌子上的菜发生了变化两个人是共同感受的。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = str1</span><br><span class="line"></span><br><span class="line"><span class="comment">#1、让str1和str2变量都存储了‘hello’所在的内存地址</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(str1)</span><br><span class="line"><span class="number">22748280</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(str1)</span><br><span class="line"><span class="number">22748280</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、当str1的值变成‘new hello’后str1的值被重新赋值成&#x27;new hello&#x27;的内存地址，而str2的值依旧是‘hello’的内存地址</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;new hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(str1)</span><br><span class="line"><span class="number">22748320</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(str2)</span><br><span class="line"><span class="number">22748280</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、不管多么复杂的数据结构，浅拷贝都只会copy一层。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sourceList = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newList = sourceList</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sourceList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">100</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">100</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h2 id="03-is和-x3D-x3D-区别"><a href="#03-is和-x3D-x3D-区别" class="headerlink" title="03.is和&#x3D;&#x3D;区别"></a>03.is和&#x3D;&#x3D;区别</h2><ul><li>is不仅数据一样内存地址也一样</li><li>&#x3D;&#x3D; 只判断数据和数据类型一样即可</li></ul><p><img src="./assets/image-20210118164330925.png" style="width: 300px; margin-left: 20px;"> </img></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>14.上下文管理</title>
      <link href="//pages/ff07de/"/>
      <url>//pages/ff07de/</url>
      
        <content type="html"><![CDATA[<h2 id="01-上下文管理"><a href="#01-上下文管理" class="headerlink" title="01.上下文管理"></a>01.上下文管理</h2><ul><li><p>1、什么是with语句</p><ul><li>with是一种上下文管理协议，目的在于从流程图中把 try,except 和finally 关键字和资源分配释放相关代码统统去掉，简化try….except….finlally的处理流程。</li><li>所以使用with处理的对象必须有enter()和exit()这两个方法<ul><li>1）with通过enter方法初始化（enter方法在语句体执行之前进入运行）</li><li>然后在exit中做善后以及处理异常（exit()方法在语句体执行完毕退出后运行）</li></ul></li></ul></li><li><p>2、with语句使用场景</p><ul><li>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源</li><li>比如文件使用后自动关闭、线程中锁的自动获取和释放等。</li></ul></li><li><p>3、with处理文件操作的实例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这段代码的作用：打开一个文件，如果一切正常，把文件对象赋值给f，然后用迭代器遍历文件中每一行，当完成时，关闭文件；</span></span><br><span class="line"><span class="comment"># 而无论在这段代码的任何地方，如果发生异常，此时文件仍会被关闭。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a2.py&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>( f.readlines())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;a2.py&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    f.read()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">print</span>(e))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>13.垃圾回收</title>
      <link href="//pages/520a3e/"/>
      <url>//pages/520a3e/</url>
      
        <content type="html"><![CDATA[<h2 id="01-python垃圾回收机制"><a href="#01-python垃圾回收机制" class="headerlink" title="01.python垃圾回收机制"></a>01.python垃圾回收机制</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(object):</span><br><span class="line">    def <span class="title function_">__del__</span>(self):                # 作用：清除无用的实例对内存的暂用</span><br><span class="line">        <span class="title function_">print</span>(<span class="string">&#x27;__del__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s1 = <span class="title class_">Student</span>()</span><br><span class="line">s2 = s1</span><br><span class="line">del s2</span><br><span class="line">del s1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.<span class="title function_">sleep</span>(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="1-1-引计数"><a href="#1-1-引计数" class="headerlink" title="1.1 引计数"></a>1.1 引计数</h3><ul><li>原理<ul><li>当一个对象的引用被创建或者复制时，对象的引用计数加1；当一个对象的引用被销毁时，对象的引用计数减1.</li><li>当对象的引用计数减少为0时，就意味着对象已经再没有被使用了，可以将其内存释放掉。</li></ul></li><li>优点<ul><li>引用计数有一个很大的优点，即实时性，任何内存，一旦没有指向它的引用，就会被立即回收，而其他的垃圾收集技术必须在某种特殊条件下才能进行无效内存的回收。</li></ul></li><li>缺点<ul><li>引用计数机制所带来的维护引用计数的额外操作与Python运行中所进行的内存分配和释放，引用赋值的次数是成正比的，</li><li>显然比其它那些垃圾收集技术所带来的额外操作只是与待回收的内存数量有关的效率要低。</li><li>同时，因为对象之间相互引用，每个对象的引用都不会为0，所以这些对象所占用的内存始终都不会被释放掉。</li></ul></li></ul><h3 id="1-2-标记－清除"><a href="#1-2-标记－清除" class="headerlink" title="1.2 标记－清除"></a>1.2 标记－清除</h3><ul><li>它分为两个阶段：第一阶段是标记阶段，GC会把所有的活动对象打上标记，第二阶段是把那些没有标记的对象非活动对象进行回收。</li><li>对象之间通过引用（指针）连在一起，构成一个有向图</li><li>从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。</li><li>根对象就是全局变量、调用栈、寄存器。</li></ul><p><img src="/./assets/image-20200311091914402.png"></p><ul><li>在上图中，可以从程序变量直接访问块1，并且可以间接访问块2和3,程序无法访问块4和5</li><li>第一步将标记块1，并记住块2和3以供稍后处理。</li><li>第二步将标记块2，第三步将标记块3，但不记得块2，因为它已被标记。</li><li>扫描阶段将忽略块1，2和3，因为它们已被标记，但会回收块4和5。</li></ul><h3 id="1-3-分代回收"><a href="#1-3-分代回收" class="headerlink" title="1.3 分代回收"></a>1.3 分代回收</h3><ul><li>分代回收是建立在标记清除技术基础之上的，是一种以空间换时间的操作方式。</li><li>Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代）</li><li>他们对应的是3个链表，它们的<strong>垃圾收集频率与对象的存活时间的增大而减小</strong>。</li><li>新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发</li><li>把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推</li><li>老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>15.网络七层</title>
      <link href="//pages/2d9cd4/"/>
      <url>//pages/2d9cd4/</url>
      
        <content type="html"><![CDATA[<h2 id="01-网络七层与TCP"><a href="#01-网络七层与TCP" class="headerlink" title="01.网络七层与TCP"></a>01.网络七层与TCP</h2><p><a href="https://www.cnblogs.com/xiaonq/p/10470551.html">https://www.cnblogs.com/xiaonq/p/10470551.html</a></p><h3 id="1-1-网络七层"><a href="#1-1-网络七层" class="headerlink" title="1.1 网络七层"></a>1.1 网络七层</h3><img src="./assets/image-20210118163519958.png" style="zoom:80%;" /><h3 id="1-2-TCP三层握手"><a href="#1-2-TCP三层握手" class="headerlink" title="1.2 TCP三层握手"></a>1.2 TCP三层握手</h3><img src="./assets/image-20210118163645279.png" style="zoom:80%;" /><h3 id="1-3-TCP与UDP比较"><a href="#1-3-TCP与UDP比较" class="headerlink" title="1.3 TCP与UDP比较"></a>1.3 TCP与UDP比较</h3><ul><li><p>1.TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</p></li><li><p>2.TCP提供可靠的服务，也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付</p></li><li><p>3.Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。</p></li><li><p>4.UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</p></li><li><p>5.每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</p></li><li><p>6.TCP对系统资源要求较多，UDP对系统资源要求较少。</p></li><li><p>注：UDP一般用于即时通信（QQ聊天对数据准确性和丢包要求比较低，但速度必须快），在线视频等</p></li><li><p>tcp&#x2F;udp相关协议</p><ul><li>1.TCP:STMP,TELNET,HTTP,FTP</li><li>2.UDP:DNS,TFTP,RIP,DHCP,SNMP</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>17.次重点</title>
      <link href="//pages/480866/"/>
      <url>//pages/480866/</url>
      
        <content type="html"><![CDATA[<h2 id="01-读写文件"><a href="#01-读写文件" class="headerlink" title="01.读写文件"></a>01.读写文件</h2><ul><li><p>读写文件（python如何读取大文件）：<a href="https://www.cnblogs.com/xiaonq/p/7860309.html">https://www.cnblogs.com/xiaonq/p/7860309.html</a></p></li><li><p>经典面试题：现在有一个5G的文件，用python写入另一个文件里</p><ul><li>read(): 指定读取指定大小的文件（默认一次读取所有）</li><li>readline(): 逐行读取，适合读大文件</li><li>readlines(): 一次性读取所有文件， 将文件按行读取成列表</li></ul></li><li><p>我们使用了一个 while 循环来读取文件内容，每次最多读取 8kb 大小</p></li><li><p>这样可以避免之前需要拼接一个巨大字符串的过程，把内存占用降低非常多。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_big_file_v</span>(<span class="params">fname</span>):</span><br><span class="line">    block_size = <span class="number">1024</span> * <span class="number">8</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fname,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            chunk = fp.read(block_size)</span><br><span class="line">            <span class="comment"># 当文件没有更多内容时，read 调用将会返回空字符串 &#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(chunk)</span><br><span class="line">path = <span class="string">r&#x27;C:\aaa\luting\edc-backend\tttt.py&#x27;</span></span><br><span class="line">read_big_file_v(path)</span><br></pre></td></tr></table></figure><h2 id="02-字符编码"><a href="#02-字符编码" class="headerlink" title="02.字符编码"></a>02.字符编码</h2><ul><li><p>各种编码由来</p><ul><li>ASCII       :  不支持中文（<strong>一个字母一个字节：a&#x2F;b&#x2F;c</strong>）</li><li>GBK        :  是中国的中文字符，其包含了简体中文和繁体中文的字符</li><li>Unicode :  万国编码（Unicode 包含GBK）</li></ul></li><li><p>Unicode（<strong>每个字母需要用两个字节：a&#x2F;b&#x2F;c</strong>）</p><ul><li>存储所有字符串都用连个字节</li><li>Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码</li><li>规定所有的字符和符号最少由 16 位来表示（2个字节），即：2 **16 &#x3D; 65536</li><li>这里还有个问题：使用的字节增加了，那么造成的直接影响就是使用的空间就直接翻倍了</li></ul></li><li><p>Utf-8       : 可变长码, 是Unicode 的扩展集</p><ul><li><p>UTF-8编码：是对Unicode编码的压缩和优化，他不再使用最少使用2个字节，而是将所有的字符和符号进行分类</p></li><li><p>ascii码中的内容用1个字节保存、欧洲的字符用2个字节保存，东亚的字符用3个字节保存…</p></li><li><p><strong>存一个a字母用一个字节，存一个中文用三个字节</strong></p></li></ul></li><li><p>python2与python3的几个区别　</p><ul><li>Python2默认 编码方式为ASCII， Python3  默认编码方式为UTF-8（是Unicode 的扩展集）</li><li>python2中字符串有str和unicode两种类型， python3 中字符串有str和字节(bytes) 两种类型</li><li>python3中不再支持u中文的语法格式</li></ul></li><li><p>python2和python3中编码转换</p><ul><li>在python3中字符串默认是unicode所以不需要decode()，直接encode成想要转换的编码如gb2312</li><li>在python2中默认是ASCII编码，必须先转换成Unicode，Unicode 可以作为各种编码的转换的中转站</li></ul></li></ul><h2 id="03-常用模块"><a href="#03-常用模块" class="headerlink" title="03.常用模块"></a>03.常用模块</h2><ul><li>（re）(paramiko、subprocess)：<a href="https://www.cnblogs.com/xiaonq/p/7866925.html">https://www.cnblogs.com/xiaonq/p/7866925.html</a></li></ul><h2 id="04-python2与python3的区别"><a href="#04-python2与python3的区别" class="headerlink" title="04.python2与python3的区别"></a>04.python2与python3的区别</h2><p><a href="https://www.cnblogs.com/xiaonq/p/8706111.html">https://www.cnblogs.com/xiaonq/p/8706111.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>16.高阶函数</title>
      <link href="//pages/a18e2b/"/>
      <url>//pages/a18e2b/</url>
      
        <content type="html"><![CDATA[<h2 id="00-匿名函数"><a href="#00-匿名函数" class="headerlink" title="00.匿名函数"></a>00.匿名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x,y,z:x+y+z</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x:x <span class="keyword">if</span> x % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">else</span> x + <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">10</span>))                    <span class="comment"># 110</span></span><br></pre></td></tr></table></figure><ul><li>三元运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Tom&#x27;</span> <span class="keyword">if</span> <span class="number">1</span> == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;fly&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># 运行结果： Tom</span></span><br></pre></td></tr></table></figure><h2 id="01-filter"><a href="#01-filter" class="headerlink" title="01.filter"></a>01.<code>filter</code></h2><ul><li>filter()函数可以对序列做过滤处理，就是说可以使用一个自定的函数过滤一个序列，把序列的每一项传到自定义的过滤函数里处理，并返回结果做过滤。</li><li>最终一次性返回过滤后的结果。</li><li>filter()函数有两个参数：<ul><li>第一个，自定函数名，必须的</li><li>第二个，需要过滤的列，也是必须的</li></ul></li><li>利用 filter、lambda表达式 获取l1中元素小于33的所有元素 l1 &#x3D; [11, 22, 33, 44, 55]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1= [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">a = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x&lt;<span class="number">33</span>, l1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x&lt;<span class="number">33</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">b = <span class="built_in">filter</span>(F,l1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(b))<span class="number">111</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入 &#x27;102304&#x27;  ==&gt; [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class="line">l1= <span class="string">&#x27;102304&#x27;</span></span><br><span class="line">a = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x !=<span class="string">&#x27;0&#x27;</span>, l1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))</span><br></pre></td></tr></table></figure><h2 id="02-map"><a href="#02-map" class="headerlink" title="02.map"></a>02.<code>map</code></h2><ul><li>第一个参数接收一个函数名，第二个参数接收一个可迭代对象</li><li>利用map，lambda表达式将所有偶数元素加100</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line">l1= [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">ret = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:x-<span class="number">100</span> <span class="keyword">if</span> x % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">else</span> x + <span class="number">100</span>,l1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ret))</span><br><span class="line"><span class="comment"># 运行结果： [-89, 122, -67, 144, -45]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda x:x-100 if x % 2 != 0 else x + 100</span></span><br><span class="line"><span class="comment"># 如果 &quot;if x % 2 != 0&quot; 条件成立返回 x-100</span></span><br><span class="line"><span class="comment"># 不成立：返回 x+100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x-<span class="number">100</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x+<span class="number">100</span></span><br><span class="line">ret = <span class="built_in">map</span>(F,l1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ret))</span><br></pre></td></tr></table></figure><h2 id="03-reduce"><a href="#03-reduce" class="headerlink" title="03.reduce"></a>03.<code>reduce</code></h2><ul><li>字符串反转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;使用reduce将字符串反转&#x27;&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x,y:y+x,s)</span><br><span class="line"><span class="comment"># # 1、第一次：x=H,y=e  =&gt; y+x = eH</span></span><br><span class="line"><span class="comment"># # 2、第二次：x=l,y=eH  =&gt; y+x = leH</span></span><br><span class="line"><span class="comment"># # 3、第三次：x=l,y=leH  =&gt; y+x = lleH</span></span><br><span class="line"><span class="built_in">print</span>( result )      <span class="comment"># dlroW olleH</span></span><br></pre></td></tr></table></figure><h2 id="04-sorted"><a href="#04-sorted" class="headerlink" title="04.sorted"></a>04.<code>sorted</code></h2><ul><li>经典面试题只 列表排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;jane&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;dave&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="comment"># [(&#x27;dave&#x27;, &#x27;B&#x27;, 10), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;john&#x27;, &#x27;A&#x27;, 15)]</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">sorted</span>(students, key=<span class="keyword">lambda</span> s: s[<span class="number">2</span>], reverse=<span class="literal">False</span>) )    <span class="comment"># 按年龄排序</span></span><br><span class="line"><span class="comment"># 结果：[(&#x27;dave&#x27;, &#x27;B&#x27;, 10), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;john&#x27;, &#x27;A&#x27;, 15)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="comment"># (&#x27;john&#x27;, &#x27;A&#x27;, 15)</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">sorted</span>(students, key=f, reverse=<span class="literal">False</span>) )    <span class="comment"># 按年龄排序</span></span><br></pre></td></tr></table></figure><ul><li>对字典的value排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;k3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;k2&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># d.items() = [(&#x27;k1&#x27;, 1), (&#x27;k3&#x27;, 3), (&#x27;k2&#x27;, 2)]</span></span><br><span class="line">a = <span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a)            <span class="comment"># [(&#x27;k1&#x27;, 1), (&#x27;k2&#x27;, 2), (&#x27;k3&#x27;, 3)]</span></span><br></pre></td></tr></table></figure><ul><li>两个列表编一个字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L1 = [<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>]</span><br><span class="line">L2 = [<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;v3&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>(<span class="built_in">zip</span>(L1,L2)))</span><br><span class="line"><span class="comment"># zip(L1,L2) : [(&#x27;k1&#x27;, &#x27;v1&#x27;), (&#x27;k2&#x27;, &#x27;v2&#x27;), (&#x27;k3&#x27;, &#x27;v3&#x27;)]</span></span><br><span class="line"><span class="comment"># dict( [(&#x27;k1&#x27;, &#x27;v1&#x27;), (&#x27;k2&#x27;, &#x27;v2&#x27;), (&#x27;k3&#x27;, &#x27;v3&#x27;)] )  = &#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;, &#x27;k3&#x27;: &#x27;v3&#x27;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python基础 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
